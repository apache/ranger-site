#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RecurrenceSchedule 

    # (no documentation provided)
    attr_accessor :minute
    # (no documentation provided)
    attr_accessor :dayOfWeek
    # (no documentation provided)
    attr_accessor :year
    # (no documentation provided)
    attr_accessor :hour
    # (no documentation provided)
    attr_accessor :month
    # (no documentation provided)
    attr_accessor :dayOfMonth

    # the json hash for this RecurrenceSchedule
    def to_jaxb_json_hash
      _h = {}
      _h['minute'] = minute.to_jaxb_json_hash unless minute.nil?
      _h['dayOfWeek'] = dayOfWeek.to_jaxb_json_hash unless dayOfWeek.nil?
      _h['year'] = year.to_jaxb_json_hash unless year.nil?
      _h['hour'] = hour.to_jaxb_json_hash unless hour.nil?
      _h['month'] = month.to_jaxb_json_hash unless month.nil?
      _h['dayOfMonth'] = dayOfMonth.to_jaxb_json_hash unless dayOfMonth.nil?
      return _h
    end

    # the json (string form) for this RecurrenceSchedule
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RecurrenceSchedule with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['minute'].nil?
          _oa = _o['minute']
            if(_oa.is_a? Hash)
              @minute = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minute =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minute = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minute.push String.from_json(_item)
                 else
                   @minute.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minute = _oa
            end
          end
        if !_o['dayOfWeek'].nil?
          _oa = _o['dayOfWeek']
            if(_oa.is_a? Hash)
              @dayOfWeek = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dayOfWeek =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dayOfWeek = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dayOfWeek.push String.from_json(_item)
                 else
                   @dayOfWeek.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dayOfWeek = _oa
            end
          end
        if !_o['year'].nil?
          _oa = _o['year']
            if(_oa.is_a? Hash)
              @year = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @year =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @year = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @year.push String.from_json(_item)
                 else
                   @year.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @year = _oa
            end
          end
        if !_o['hour'].nil?
          _oa = _o['hour']
            if(_oa.is_a? Hash)
              @hour = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hour =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hour = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hour.push String.from_json(_item)
                 else
                   @hour.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hour = _oa
            end
          end
        if !_o['month'].nil?
          _oa = _o['month']
            if(_oa.is_a? Hash)
              @month = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @month =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @month = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @month.push String.from_json(_item)
                 else
                   @month.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @month = _oa
            end
          end
        if !_o['dayOfMonth'].nil?
          _oa = _o['dayOfMonth']
            if(_oa.is_a? Hash)
              @dayOfMonth = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dayOfMonth =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dayOfMonth = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dayOfMonth.push String.from_json(_item)
                 else
                   @dayOfMonth.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dayOfMonth = _oa
            end
          end
    end

    # constructs a RecurrenceSchedule from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyConditionDef 

    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :evaluator
    # (no documentation provided)
    attr_accessor :uiHint
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :validationMessage
    # (no documentation provided)
    attr_accessor :rbKeyValidationMessage
    # (no documentation provided)
    attr_accessor :evaluatorOptions
    # (no documentation provided)
    attr_accessor :validationRegEx

    # the json hash for this RangerPolicyConditionDef
    def to_jaxb_json_hash
      _h = {}
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['evaluator'] = evaluator.to_jaxb_json_hash unless evaluator.nil?
      _h['uiHint'] = uiHint.to_jaxb_json_hash unless uiHint.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      _h['validationMessage'] = validationMessage.to_jaxb_json_hash unless validationMessage.nil?
      _h['rbKeyValidationMessage'] = rbKeyValidationMessage.to_jaxb_json_hash unless rbKeyValidationMessage.nil?
      _h['evaluatorOptions'] = evaluatorOptions.to_jaxb_json_hash unless evaluatorOptions.nil?
      _h['validationRegEx'] = validationRegEx.to_jaxb_json_hash unless validationRegEx.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyConditionDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyConditionDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['evaluator'].nil?
          _oa = _o['evaluator']
            if(_oa.is_a? Hash)
              @evaluator = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @evaluator =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @evaluator = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @evaluator.push String.from_json(_item)
                 else
                   @evaluator.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @evaluator = _oa
            end
          end
        if !_o['uiHint'].nil?
          _oa = _o['uiHint']
            if(_oa.is_a? Hash)
              @uiHint = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uiHint =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uiHint = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uiHint.push String.from_json(_item)
                 else
                   @uiHint.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uiHint = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['validationMessage'].nil?
          _oa = _o['validationMessage']
            if(_oa.is_a? Hash)
              @validationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationMessage.push String.from_json(_item)
                 else
                   @validationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationMessage = _oa
            end
          end
        if !_o['rbKeyValidationMessage'].nil?
          _oa = _o['rbKeyValidationMessage']
            if(_oa.is_a? Hash)
              @rbKeyValidationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyValidationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyValidationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyValidationMessage.push String.from_json(_item)
                 else
                   @rbKeyValidationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyValidationMessage = _oa
            end
          end
        if !_o['evaluatorOptions'].nil?
          _oa = _o['evaluatorOptions']
            if(_oa.is_a? Hash)
              @evaluatorOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @evaluatorOptions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @evaluatorOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @evaluatorOptions.push Hash.from_json(_item)
                 else
                   @evaluatorOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @evaluatorOptions = _oa
            end
          end
        if !_o['validationRegEx'].nil?
          _oa = _o['validationRegEx']
            if(_oa.is_a? Hash)
              @validationRegEx = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationRegEx =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationRegEx = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationRegEx.push String.from_json(_item)
                 else
                   @validationRegEx.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationRegEx = _oa
            end
          end
    end

    # constructs a RangerPolicyConditionDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :updatedBy
    # (no documentation provided)
    attr_accessor :createdBy
    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :isEnabled
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this RangerBaseModelObject
    def to_jaxb_json_hash
      _h = {}
      _h['updatedBy'] = updatedBy.to_jaxb_json_hash unless updatedBy.nil?
      _h['createdBy'] = createdBy.to_jaxb_json_hash unless createdBy.nil?
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['isEnabled'] = isEnabled.to_jaxb_json_hash unless isEnabled.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this RangerBaseModelObject
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerBaseModelObject with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['updatedBy'].nil?
          _oa = _o['updatedBy']
            if(_oa.is_a? Hash)
              @updatedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedBy.push String.from_json(_item)
                 else
                   @updatedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedBy = _oa
            end
          end
        if !_o['createdBy'].nil?
          _oa = _o['createdBy']
            if(_oa.is_a? Hash)
              @createdBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdBy.push String.from_json(_item)
                 else
                   @createdBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdBy = _oa
            end
          end
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Bignum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['isEnabled'].nil?
          _oa = _o['isEnabled']
            if(_oa.is_a? Hash)
              @isEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isEnabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isEnabled.push Boolean.from_json(_item)
                 else
                   @isEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isEnabled = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a RangerBaseModelObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class ViewBaseBean 


    # the json hash for this ViewBaseBean
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this ViewBaseBean
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ViewBaseBean with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a ViewBaseBean from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerValidityRecurrence 

    # (no documentation provided)
    attr_accessor :interval
    # (no documentation provided)
    attr_accessor :schedule

    # the json hash for this RangerValidityRecurrence
    def to_jaxb_json_hash
      _h = {}
      _h['interval'] = interval.to_jaxb_json_hash unless interval.nil?
      _h['schedule'] = schedule.to_jaxb_json_hash unless schedule.nil?
      return _h
    end

    # the json (string form) for this RangerValidityRecurrence
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerValidityRecurrence with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['interval'].nil?
          _oa = _o['interval']
            if(_oa.is_a? Hash)
              @interval = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @interval =  Org::Apache::Ranger::Plugin::Model::ValidityInterval.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @interval = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @interval.push Org::Apache::Ranger::Plugin::Model::ValidityInterval.from_json(_item)
                 else
                   @interval.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @interval = _oa
            end
          end
        if !_o['schedule'].nil?
          _oa = _o['schedule']
            if(_oa.is_a? Hash)
              @schedule = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @schedule =  Org::Apache::Ranger::Plugin::Model::RecurrenceSchedule.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @schedule = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @schedule.push Org::Apache::Ranger::Plugin::Model::RecurrenceSchedule.from_json(_item)
                 else
                   @schedule.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @schedule = _oa
            end
          end
    end

    # constructs a RangerValidityRecurrence from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class ValidityInterval 

    # (no documentation provided)
    attr_accessor :hours
    # (no documentation provided)
    attr_accessor :minutes
    # (no documentation provided)
    attr_accessor :days

    # the json hash for this ValidityInterval
    def to_jaxb_json_hash
      _h = {}
      _h['hours'] = hours.to_jaxb_json_hash unless hours.nil?
      _h['minutes'] = minutes.to_jaxb_json_hash unless minutes.nil?
      _h['days'] = days.to_jaxb_json_hash unless days.nil?
      return _h
    end

    # the json (string form) for this ValidityInterval
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ValidityInterval with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['hours'].nil?
          _oa = _o['hours']
            if(_oa.is_a? Hash)
              @hours = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hours =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hours = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hours.push Fixnum.from_json(_item)
                 else
                   @hours.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hours = _oa
            end
          end
        if !_o['minutes'].nil?
          _oa = _o['minutes']
            if(_oa.is_a? Hash)
              @minutes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minutes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minutes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minutes.push Fixnum.from_json(_item)
                 else
                   @minutes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minutes = _oa
            end
          end
        if !_o['days'].nil?
          _oa = _o['days']
            if(_oa.is_a? Hash)
              @days = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @days =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @days = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @days.push Fixnum.from_json(_item)
                 else
                   @days.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @days = _oa
            end
          end
    end

    # constructs a ValidityInterval from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPluginInfo 

    # (no documentation provided)
    attr_accessor :ipAddress
    # (no documentation provided)
    attr_accessor :info
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :serviceName
    # (no documentation provided)
    attr_accessor :appType
    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :hostName

    # the json hash for this RangerPluginInfo
    def to_jaxb_json_hash
      _h = {}
      _h['ipAddress'] = ipAddress.to_jaxb_json_hash unless ipAddress.nil?
      _h['info'] = info.to_jaxb_json_hash unless info.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      _h['appType'] = appType.to_jaxb_json_hash unless appType.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['hostName'] = hostName.to_jaxb_json_hash unless hostName.nil?
      return _h
    end

    # the json (string form) for this RangerPluginInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPluginInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['ipAddress'].nil?
          _oa = _o['ipAddress']
            if(_oa.is_a? Hash)
              @ipAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipAddress.push String.from_json(_item)
                 else
                   @ipAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipAddress = _oa
            end
          end
        if !_o['info'].nil?
          _oa = _o['info']
            if(_oa.is_a? Hash)
              @info = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @info =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @info = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @info.push Hash.from_json(_item)
                 else
                   @info.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @info = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
        if !_o['appType'].nil?
          _oa = _o['appType']
            if(_oa.is_a? Hash)
              @appType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @appType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @appType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @appType.push String.from_json(_item)
                 else
                   @appType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @appType = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['hostName'].nil?
          _oa = _o['hostName']
            if(_oa.is_a? Hash)
              @hostName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hostName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hostName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hostName.push String.from_json(_item)
                 else
                   @hostName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hostName = _oa
            end
          end
    end

    # constructs a RangerPluginInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerServiceConfigDef 

    # (no documentation provided)
    attr_accessor :subType
    # (no documentation provided)
    attr_accessor :defaultValue
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :uiHint
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :rbKeyValidationMessage
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :validationRegEx
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :validationMessage
    # (no documentation provided)
    attr_accessor :mandatory

    # the json hash for this RangerServiceConfigDef
    def to_jaxb_json_hash
      _h = {}
      _h['subType'] = subType.to_jaxb_json_hash unless subType.nil?
      _h['defaultValue'] = defaultValue.to_jaxb_json_hash unless defaultValue.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['uiHint'] = uiHint.to_jaxb_json_hash unless uiHint.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['rbKeyValidationMessage'] = rbKeyValidationMessage.to_jaxb_json_hash unless rbKeyValidationMessage.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['validationRegEx'] = validationRegEx.to_jaxb_json_hash unless validationRegEx.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['validationMessage'] = validationMessage.to_jaxb_json_hash unless validationMessage.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      return _h
    end

    # the json (string form) for this RangerServiceConfigDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerServiceConfigDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['subType'].nil?
          _oa = _o['subType']
            if(_oa.is_a? Hash)
              @subType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subType.push String.from_json(_item)
                 else
                   @subType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subType = _oa
            end
          end
        if !_o['defaultValue'].nil?
          _oa = _o['defaultValue']
            if(_oa.is_a? Hash)
              @defaultValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultValue.push String.from_json(_item)
                 else
                   @defaultValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultValue = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['uiHint'].nil?
          _oa = _o['uiHint']
            if(_oa.is_a? Hash)
              @uiHint = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uiHint =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uiHint = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uiHint.push String.from_json(_item)
                 else
                   @uiHint.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uiHint = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['rbKeyValidationMessage'].nil?
          _oa = _o['rbKeyValidationMessage']
            if(_oa.is_a? Hash)
              @rbKeyValidationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyValidationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyValidationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyValidationMessage.push String.from_json(_item)
                 else
                   @rbKeyValidationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyValidationMessage = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['validationRegEx'].nil?
          _oa = _o['validationRegEx']
            if(_oa.is_a? Hash)
              @validationRegEx = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationRegEx =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationRegEx = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationRegEx.push String.from_json(_item)
                 else
                   @validationRegEx.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationRegEx = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['validationMessage'].nil?
          _oa = _o['validationMessage']
            if(_oa.is_a? Hash)
              @validationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationMessage.push String.from_json(_item)
                 else
                   @validationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationMessage = _oa
            end
          end
        if !_o['mandatory'].nil?
          _oa = _o['mandatory']
            if(_oa.is_a? Hash)
              @mandatory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mandatory =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mandatory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mandatory.push Boolean.from_json(_item)
                 else
                   @mandatory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mandatory = _oa
            end
          end
    end

    # constructs a RangerServiceConfigDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Admin

module Client

module Datatype

  # (no documentation provided)
  class RESTResponse 

    # (no documentation provided)
    attr_accessor :statusCode
    # (no documentation provided)
    attr_accessor :msgDesc
    # (no documentation provided)
    attr_accessor :messageList
    # (no documentation provided)
    attr_accessor :message
    # (no documentation provided)
    attr_accessor :httpStatusCode

    # the json hash for this RESTResponse
    def to_jaxb_json_hash
      _h = {}
      _h['statusCode'] = statusCode.to_jaxb_json_hash unless statusCode.nil?
      _h['msgDesc'] = msgDesc.to_jaxb_json_hash unless msgDesc.nil?
      if !messageList.nil?
        _ha = Array.new
        messageList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['messageList'] = _ha
      end
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      _h['httpStatusCode'] = httpStatusCode.to_jaxb_json_hash unless httpStatusCode.nil?
      return _h
    end

    # the json (string form) for this RESTResponse
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RESTResponse with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['statusCode'].nil?
          _oa = _o['statusCode']
            if(_oa.is_a? Hash)
              @statusCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @statusCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @statusCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @statusCode.push Fixnum.from_json(_item)
                 else
                   @statusCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @statusCode = _oa
            end
          end
        if !_o['msgDesc'].nil?
          _oa = _o['msgDesc']
            if(_oa.is_a? Hash)
              @msgDesc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @msgDesc =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @msgDesc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @msgDesc.push String.from_json(_item)
                 else
                   @msgDesc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @msgDesc = _oa
            end
          end
        if !_o['messageList'].nil?
          _oa = _o['messageList']
            if(_oa.is_a? Hash)
              @messageList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @messageList =  Org::Apache::Ranger::Admin::Client::Datatype::Message.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @messageList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @messageList.push Org::Apache::Ranger::Admin::Client::Datatype::Message.from_json(_item)
                 else
                   @messageList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @messageList = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
        if !_o['httpStatusCode'].nil?
          _oa = _o['httpStatusCode']
            if(_oa.is_a? Hash)
              @httpStatusCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @httpStatusCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @httpStatusCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @httpStatusCode.push Fixnum.from_json(_item)
                 else
                   @httpStatusCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @httpStatusCode = _oa
            end
          end
    end

    # constructs a RESTResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItemCondition 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :values

    # the json hash for this RangerPolicyItemCondition
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      if !values.nil?
        _ha = Array.new
        values.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['values'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerPolicyItemCondition
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItemCondition with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['values'].nil?
          _oa = _o['values']
            if(_oa.is_a? Hash)
              @values = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @values =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @values = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @values.push String.from_json(_item)
                 else
                   @values.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @values = _oa
            end
          end
    end

    # constructs a RangerPolicyItemCondition from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerDataMaskDef 

    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :maskTypes
    # (no documentation provided)
    attr_accessor :accessTypes

    # the json hash for this RangerDataMaskDef
    def to_jaxb_json_hash
      _h = {}
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      if !maskTypes.nil?
        _ha = Array.new
        maskTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['maskTypes'] = _ha
      end
      if !accessTypes.nil?
        _ha = Array.new
        accessTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypes'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerDataMaskDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerDataMaskDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['maskTypes'].nil?
          _oa = _o['maskTypes']
            if(_oa.is_a? Hash)
              @maskTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maskTypes =  Org::Apache::Ranger::Plugin::Model::RangerDataMaskTypeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maskTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maskTypes.push Org::Apache::Ranger::Plugin::Model::RangerDataMaskTypeDef.from_json(_item)
                 else
                   @maskTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maskTypes = _oa
            end
          end
        if !_o['accessTypes'].nil?
          _oa = _o['accessTypes']
            if(_oa.is_a? Hash)
              @accessTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypes =  Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypes.push Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_item)
                 else
                   @accessTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypes = _oa
            end
          end
    end

    # constructs a RangerDataMaskDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXFileSyncSourceInfo 

    # (no documentation provided)
    attr_accessor :fileName
    # (no documentation provided)
    attr_accessor :syncTime
    # (no documentation provided)
    attr_accessor :lastModified
    # (no documentation provided)
    attr_accessor :totalUsersSynced
    # (no documentation provided)
    attr_accessor :totalGroupsSynced

    # the json hash for this VXFileSyncSourceInfo
    def to_jaxb_json_hash
      _h = {}
      _h['fileName'] = fileName.to_jaxb_json_hash unless fileName.nil?
      _h['syncTime'] = syncTime.to_jaxb_json_hash unless syncTime.nil?
      _h['lastModified'] = lastModified.to_jaxb_json_hash unless lastModified.nil?
      _h['totalUsersSynced'] = totalUsersSynced.to_jaxb_json_hash unless totalUsersSynced.nil?
      _h['totalGroupsSynced'] = totalGroupsSynced.to_jaxb_json_hash unless totalGroupsSynced.nil?
      return _h
    end

    # the json (string form) for this VXFileSyncSourceInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXFileSyncSourceInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['fileName'].nil?
          _oa = _o['fileName']
            if(_oa.is_a? Hash)
              @fileName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fileName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fileName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fileName.push String.from_json(_item)
                 else
                   @fileName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fileName = _oa
            end
          end
        if !_o['syncTime'].nil?
          _oa = _o['syncTime']
            if(_oa.is_a? Hash)
              @syncTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncTime.push String.from_json(_item)
                 else
                   @syncTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncTime = _oa
            end
          end
        if !_o['lastModified'].nil?
          _oa = _o['lastModified']
            if(_oa.is_a? Hash)
              @lastModified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastModified =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastModified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastModified.push String.from_json(_item)
                 else
                   @lastModified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastModified = _oa
            end
          end
        if !_o['totalUsersSynced'].nil?
          _oa = _o['totalUsersSynced']
            if(_oa.is_a? Hash)
              @totalUsersSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalUsersSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalUsersSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalUsersSynced.push Bignum.from_json(_item)
                 else
                   @totalUsersSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalUsersSynced = _oa
            end
          end
        if !_o['totalGroupsSynced'].nil?
          _oa = _o['totalGroupsSynced']
            if(_oa.is_a? Hash)
              @totalGroupsSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalGroupsSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalGroupsSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalGroupsSynced.push Bignum.from_json(_item)
                 else
                   @totalGroupsSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalGroupsSynced = _oa
            end
          end
    end

    # constructs a VXFileSyncSourceInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuditRecord 

    # Date - value of member attribute &lt;b&gt;date&lt;/b&gt;.
    attr_accessor :date
    # String - value of member attribute &lt;b&gt;resource&lt;/b&gt;.
    attr_accessor :resource
    # String - value of member attribute &lt;b&gt;action&lt;/b&gt;.
    attr_accessor :action
    # String - value of member attribute &lt;b&gt;result&lt;/b&gt;.
    attr_accessor :result
    # String - value of member attribute &lt;b&gt;user&lt;/b&gt;.
    attr_accessor :user
    # (no documentation provided)
    attr_accessor :enforcer
    # int - value of member attribute &lt;b&gt;resourceType&lt;/b&gt;.
    attr_accessor :resourceType
    # int - value of member attribute &lt;b&gt;assetType&lt;/b&gt;.
    attr_accessor :assetType

    # the json hash for this VXAuditRecord
    def to_jaxb_json_hash
      _h = {}
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['resource'] = resource.to_jaxb_json_hash unless resource.nil?
      _h['action'] = action.to_jaxb_json_hash unless action.nil?
      _h['result'] = result.to_jaxb_json_hash unless result.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['enforcer'] = enforcer.to_jaxb_json_hash unless enforcer.nil?
      _h['resourceType'] = resourceType.to_jaxb_json_hash unless resourceType.nil?
      _h['assetType'] = assetType.to_jaxb_json_hash unless assetType.nil?
      return _h
    end

    # the json (string form) for this VXAuditRecord
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXAuditRecord with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Time.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
        if !_o['resource'].nil?
          _oa = _o['resource']
            if(_oa.is_a? Hash)
              @resource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resource =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resource.push String.from_json(_item)
                 else
                   @resource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resource = _oa
            end
          end
        if !_o['action'].nil?
          _oa = _o['action']
            if(_oa.is_a? Hash)
              @action = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @action =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @action = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @action.push String.from_json(_item)
                 else
                   @action.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @action = _oa
            end
          end
        if !_o['result'].nil?
          _oa = _o['result']
            if(_oa.is_a? Hash)
              @result = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @result =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @result = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @result.push String.from_json(_item)
                 else
                   @result.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @result = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push String.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['enforcer'].nil?
          _oa = _o['enforcer']
            if(_oa.is_a? Hash)
              @enforcer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enforcer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enforcer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enforcer.push String.from_json(_item)
                 else
                   @enforcer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enforcer = _oa
            end
          end
        if !_o['resourceType'].nil?
          _oa = _o['resourceType']
            if(_oa.is_a? Hash)
              @resourceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceType.push Fixnum.from_json(_item)
                 else
                   @resourceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceType = _oa
            end
          end
        if !_o['assetType'].nil?
          _oa = _o['assetType']
            if(_oa.is_a? Hash)
              @assetType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetType.push Fixnum.from_json(_item)
                 else
                   @assetType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetType = _oa
            end
          end
    end

    # constructs a VXAuditRecord from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerValiditySchedule 

    # (no documentation provided)
    attr_accessor :recurrences
    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :timeZone

    # the json hash for this RangerValiditySchedule
    def to_jaxb_json_hash
      _h = {}
      if !recurrences.nil?
        _ha = Array.new
        recurrences.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['recurrences'] = _ha
      end
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      _h['timeZone'] = timeZone.to_jaxb_json_hash unless timeZone.nil?
      return _h
    end

    # the json (string form) for this RangerValiditySchedule
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerValiditySchedule with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['recurrences'].nil?
          _oa = _o['recurrences']
            if(_oa.is_a? Hash)
              @recurrences = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recurrences =  Org::Apache::Ranger::Plugin::Model::RangerValidityRecurrence.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recurrences = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recurrences.push Org::Apache::Ranger::Plugin::Model::RangerValidityRecurrence.from_json(_item)
                 else
                   @recurrences.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recurrences = _oa
            end
          end
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push String.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push String.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['timeZone'].nil?
          _oa = _o['timeZone']
            if(_oa.is_a? Hash)
              @timeZone = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @timeZone =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @timeZone = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @timeZone.push String.from_json(_item)
                 else
                   @timeZone.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @timeZone = _oa
            end
          end
    end

    # constructs a RangerValiditySchedule from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerAccessTypeDef 

    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :impliedGrants
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this RangerAccessTypeDef
    def to_jaxb_json_hash
      _h = {}
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      if !impliedGrants.nil?
        _ha = Array.new
        impliedGrants.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['impliedGrants'] = _ha
      end
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this RangerAccessTypeDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerAccessTypeDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['impliedGrants'].nil?
          _oa = _o['impliedGrants']
            if(_oa.is_a? Hash)
              @impliedGrants = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @impliedGrants =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @impliedGrants = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @impliedGrants.push String.from_json(_item)
                 else
                   @impliedGrants.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @impliedGrants = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a RangerAccessTypeDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItemAccess 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :isAllowed

    # the json hash for this RangerPolicyItemAccess
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['isAllowed'] = isAllowed.to_jaxb_json_hash unless isAllowed.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyItemAccess
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItemAccess with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['isAllowed'].nil?
          _oa = _o['isAllowed']
            if(_oa.is_a? Hash)
              @isAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAllowed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAllowed.push Boolean.from_json(_item)
                 else
                   @isAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAllowed = _oa
            end
          end
    end

    # constructs a RangerPolicyItemAccess from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerSecurityZoneService 

    # (no documentation provided)
    attr_accessor :resources

    # the json hash for this RangerSecurityZoneService
    def to_jaxb_json_hash
      _h = {}
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerSecurityZoneService
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerSecurityZoneService with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Hash.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
    end

    # constructs a RangerSecurityZoneService from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Service

  # (no documentation provided)
  class ResourceLookupContext 

    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :userInput
    # (no documentation provided)
    attr_accessor :resourceName

    # the json hash for this ResourceLookupContext
    def to_jaxb_json_hash
      _h = {}
      _h['resources'] = resources.to_jaxb_json_hash unless resources.nil?
      _h['userInput'] = userInput.to_jaxb_json_hash unless userInput.nil?
      _h['resourceName'] = resourceName.to_jaxb_json_hash unless resourceName.nil?
      return _h
    end

    # the json (string form) for this ResourceLookupContext
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ResourceLookupContext with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Hash.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['userInput'].nil?
          _oa = _o['userInput']
            if(_oa.is_a? Hash)
              @userInput = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userInput =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userInput = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userInput.push String.from_json(_item)
                 else
                   @userInput.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userInput = _oa
            end
          end
        if !_o['resourceName'].nil?
          _oa = _o['resourceName']
            if(_oa.is_a? Hash)
              @resourceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceName.push String.from_json(_item)
                 else
                   @resourceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceName = _oa
            end
          end
    end

    # constructs a ResourceLookupContext from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerDataMaskTypeDef 

    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :transformer
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :dataMaskOptions

    # the json hash for this RangerDataMaskTypeDef
    def to_jaxb_json_hash
      _h = {}
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['transformer'] = transformer.to_jaxb_json_hash unless transformer.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['dataMaskOptions'] = dataMaskOptions.to_jaxb_json_hash unless dataMaskOptions.nil?
      return _h
    end

    # the json (string form) for this RangerDataMaskTypeDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerDataMaskTypeDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['transformer'].nil?
          _oa = _o['transformer']
            if(_oa.is_a? Hash)
              @transformer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transformer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transformer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transformer.push String.from_json(_item)
                 else
                   @transformer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transformer = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['dataMaskOptions'].nil?
          _oa = _o['dataMaskOptions']
            if(_oa.is_a? Hash)
              @dataMaskOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskOptions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskOptions.push Hash.from_json(_item)
                 else
                   @dataMaskOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskOptions = _oa
            end
          end
    end

    # constructs a RangerDataMaskTypeDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class SecurityZoneInfo 

    # (no documentation provided)
    attr_accessor :policies
    # (no documentation provided)
    attr_accessor :policyDeltas
    # (no documentation provided)
    attr_accessor :zoneName
    # (no documentation provided)
    attr_accessor :resources

    # the json hash for this SecurityZoneInfo
    def to_jaxb_json_hash
      _h = {}
      if !policies.nil?
        _ha = Array.new
        policies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policies'] = _ha
      end
      if !policyDeltas.nil?
        _ha = Array.new
        policyDeltas.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyDeltas'] = _ha
      end
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      return _h
    end

    # the json (string form) for this SecurityZoneInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SecurityZoneInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['policies'].nil?
          _oa = _o['policies']
            if(_oa.is_a? Hash)
              @policies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policies =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policies.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policies = _oa
            end
          end
        if !_o['policyDeltas'].nil?
          _oa = _o['policyDeltas']
            if(_oa.is_a? Hash)
              @policyDeltas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyDeltas =  Org::Apache::Ranger::Plugin::Model::RangerPolicyDelta.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyDeltas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyDeltas.push Org::Apache::Ranger::Plugin::Model::RangerPolicyDelta.from_json(_item)
                 else
                   @policyDeltas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyDeltas = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Hash.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
    end

    # constructs a SecurityZoneInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItemDataMaskInfo 

    # (no documentation provided)
    attr_accessor :conditionExpr
    # (no documentation provided)
    attr_accessor :dataMaskType
    # (no documentation provided)
    attr_accessor :valueExpr

    # the json hash for this RangerPolicyItemDataMaskInfo
    def to_jaxb_json_hash
      _h = {}
      _h['conditionExpr'] = conditionExpr.to_jaxb_json_hash unless conditionExpr.nil?
      _h['dataMaskType'] = dataMaskType.to_jaxb_json_hash unless dataMaskType.nil?
      _h['valueExpr'] = valueExpr.to_jaxb_json_hash unless valueExpr.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyItemDataMaskInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItemDataMaskInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['conditionExpr'].nil?
          _oa = _o['conditionExpr']
            if(_oa.is_a? Hash)
              @conditionExpr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conditionExpr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conditionExpr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conditionExpr.push String.from_json(_item)
                 else
                   @conditionExpr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conditionExpr = _oa
            end
          end
        if !_o['dataMaskType'].nil?
          _oa = _o['dataMaskType']
            if(_oa.is_a? Hash)
              @dataMaskType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskType.push String.from_json(_item)
                 else
                   @dataMaskType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskType = _oa
            end
          end
        if !_o['valueExpr'].nil?
          _oa = _o['valueExpr']
            if(_oa.is_a? Hash)
              @valueExpr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valueExpr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valueExpr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valueExpr.push String.from_json(_item)
                 else
                   @valueExpr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valueExpr = _oa
            end
          end
    end

    # constructs a RangerPolicyItemDataMaskInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPermObj 

    # the userList
    attr_accessor :userList
    # the groupList
    attr_accessor :groupList
    # the permList
    attr_accessor :permList
    # the ipAddress
    attr_accessor :ipAddress

    # the json hash for this VXPermObj
    def to_jaxb_json_hash
      _h = {}
      if !userList.nil?
        _ha = Array.new
        userList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userList'] = _ha
      end
      if !groupList.nil?
        _ha = Array.new
        groupList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupList'] = _ha
      end
      if !permList.nil?
        _ha = Array.new
        permList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permList'] = _ha
      end
      _h['ipAddress'] = ipAddress.to_jaxb_json_hash unless ipAddress.nil?
      return _h
    end

    # the json (string form) for this VXPermObj
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXPermObj with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['userList'].nil?
          _oa = _o['userList']
            if(_oa.is_a? Hash)
              @userList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userList.push String.from_json(_item)
                 else
                   @userList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userList = _oa
            end
          end
        if !_o['groupList'].nil?
          _oa = _o['groupList']
            if(_oa.is_a? Hash)
              @groupList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupList.push String.from_json(_item)
                 else
                   @groupList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupList = _oa
            end
          end
        if !_o['permList'].nil?
          _oa = _o['permList']
            if(_oa.is_a? Hash)
              @permList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permList.push String.from_json(_item)
                 else
                   @permList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permList = _oa
            end
          end
        if !_o['ipAddress'].nil?
          _oa = _o['ipAddress']
            if(_oa.is_a? Hash)
              @ipAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipAddress.push String.from_json(_item)
                 else
                   @ipAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipAddress = _oa
            end
          end
    end

    # constructs a VXPermObj from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItemRowFilterInfo 

    # (no documentation provided)
    attr_accessor :filterExpr

    # the json hash for this RangerPolicyItemRowFilterInfo
    def to_jaxb_json_hash
      _h = {}
      _h['filterExpr'] = filterExpr.to_jaxb_json_hash unless filterExpr.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyItemRowFilterInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItemRowFilterInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['filterExpr'].nil?
          _oa = _o['filterExpr']
            if(_oa.is_a? Hash)
              @filterExpr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @filterExpr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @filterExpr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @filterExpr.push String.from_json(_item)
                 else
                   @filterExpr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @filterExpr = _oa
            end
          end
    end

    # constructs a RangerPolicyItemRowFilterInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerRowFilterDef 

    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :accessTypes

    # the json hash for this RangerRowFilterDef
    def to_jaxb_json_hash
      _h = {}
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      if !accessTypes.nil?
        _ha = Array.new
        accessTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypes'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerRowFilterDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerRowFilterDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['accessTypes'].nil?
          _oa = _o['accessTypes']
            if(_oa.is_a? Hash)
              @accessTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypes =  Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypes.push Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_item)
                 else
                   @accessTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypes = _oa
            end
          end
    end

    # constructs a RangerRowFilterDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyDelta 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :changeType
    # (no documentation provided)
    attr_accessor :policy

    # the json hash for this RangerPolicyDelta
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['changeType'] = changeType.to_jaxb_json_hash unless changeType.nil?
      _h['policy'] = policy.to_jaxb_json_hash unless policy.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyDelta
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyDelta with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['changeType'].nil?
          _oa = _o['changeType']
            if(_oa.is_a? Hash)
              @changeType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @changeType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @changeType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @changeType.push Fixnum.from_json(_item)
                 else
                   @changeType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @changeType = _oa
            end
          end
        if !_o['policy'].nil?
          _oa = _o['policy']
            if(_oa.is_a? Hash)
              @policy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policy =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policy.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policy = _oa
            end
          end
    end

    # constructs a RangerPolicyDelta from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUnixSyncSourceInfo 

    # (no documentation provided)
    attr_accessor :fileName
    # (no documentation provided)
    attr_accessor :syncTime
    # (no documentation provided)
    attr_accessor :lastModified
    # (no documentation provided)
    attr_accessor :unixBackend
    # (no documentation provided)
    attr_accessor :minUserId
    # (no documentation provided)
    attr_accessor :minGroupId
    # (no documentation provided)
    attr_accessor :totalUsersSynced
    # (no documentation provided)
    attr_accessor :totalGroupsSynced

    # the json hash for this VXUnixSyncSourceInfo
    def to_jaxb_json_hash
      _h = {}
      _h['fileName'] = fileName.to_jaxb_json_hash unless fileName.nil?
      _h['syncTime'] = syncTime.to_jaxb_json_hash unless syncTime.nil?
      _h['lastModified'] = lastModified.to_jaxb_json_hash unless lastModified.nil?
      _h['unixBackend'] = unixBackend.to_jaxb_json_hash unless unixBackend.nil?
      _h['minUserId'] = minUserId.to_jaxb_json_hash unless minUserId.nil?
      _h['minGroupId'] = minGroupId.to_jaxb_json_hash unless minGroupId.nil?
      _h['totalUsersSynced'] = totalUsersSynced.to_jaxb_json_hash unless totalUsersSynced.nil?
      _h['totalGroupsSynced'] = totalGroupsSynced.to_jaxb_json_hash unless totalGroupsSynced.nil?
      return _h
    end

    # the json (string form) for this VXUnixSyncSourceInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXUnixSyncSourceInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['fileName'].nil?
          _oa = _o['fileName']
            if(_oa.is_a? Hash)
              @fileName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fileName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fileName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fileName.push String.from_json(_item)
                 else
                   @fileName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fileName = _oa
            end
          end
        if !_o['syncTime'].nil?
          _oa = _o['syncTime']
            if(_oa.is_a? Hash)
              @syncTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncTime.push String.from_json(_item)
                 else
                   @syncTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncTime = _oa
            end
          end
        if !_o['lastModified'].nil?
          _oa = _o['lastModified']
            if(_oa.is_a? Hash)
              @lastModified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastModified =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastModified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastModified.push String.from_json(_item)
                 else
                   @lastModified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastModified = _oa
            end
          end
        if !_o['unixBackend'].nil?
          _oa = _o['unixBackend']
            if(_oa.is_a? Hash)
              @unixBackend = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unixBackend =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unixBackend = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unixBackend.push String.from_json(_item)
                 else
                   @unixBackend.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unixBackend = _oa
            end
          end
        if !_o['minUserId'].nil?
          _oa = _o['minUserId']
            if(_oa.is_a? Hash)
              @minUserId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minUserId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minUserId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minUserId.push String.from_json(_item)
                 else
                   @minUserId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minUserId = _oa
            end
          end
        if !_o['minGroupId'].nil?
          _oa = _o['minGroupId']
            if(_oa.is_a? Hash)
              @minGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minGroupId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minGroupId.push String.from_json(_item)
                 else
                   @minGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minGroupId = _oa
            end
          end
        if !_o['totalUsersSynced'].nil?
          _oa = _o['totalUsersSynced']
            if(_oa.is_a? Hash)
              @totalUsersSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalUsersSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalUsersSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalUsersSynced.push Bignum.from_json(_item)
                 else
                   @totalUsersSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalUsersSynced = _oa
            end
          end
        if !_o['totalGroupsSynced'].nil?
          _oa = _o['totalGroupsSynced']
            if(_oa.is_a? Hash)
              @totalGroupsSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalGroupsSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalGroupsSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalGroupsSynced.push Bignum.from_json(_item)
                 else
                   @totalGroupsSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalGroupsSynced = _oa
            end
          end
    end

    # constructs a VXUnixSyncSourceInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyResource 

    # (no documentation provided)
    attr_accessor :isExcludes
    # (no documentation provided)
    attr_accessor :values
    # (no documentation provided)
    attr_accessor :isRecursive

    # the json hash for this RangerPolicyResource
    def to_jaxb_json_hash
      _h = {}
      _h['isExcludes'] = isExcludes.to_jaxb_json_hash unless isExcludes.nil?
      if !values.nil?
        _ha = Array.new
        values.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['values'] = _ha
      end
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyResource
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyResource with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['isExcludes'].nil?
          _oa = _o['isExcludes']
            if(_oa.is_a? Hash)
              @isExcludes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isExcludes =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isExcludes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isExcludes.push Boolean.from_json(_item)
                 else
                   @isExcludes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isExcludes = _oa
            end
          end
        if !_o['values'].nil?
          _oa = _o['values']
            if(_oa.is_a? Hash)
              @values = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @values =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @values = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @values.push String.from_json(_item)
                 else
                   @values.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @values = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Boolean.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
    end

    # constructs a RangerPolicyResource from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class ServiceTags 

    # (no documentation provided)
    attr_accessor :serviceName
    # (no documentation provided)
    attr_accessor :resourceToTagIds
    # (no documentation provided)
    attr_accessor :serviceResources
    # (no documentation provided)
    attr_accessor :tags
    # (no documentation provided)
    attr_accessor :op
    # (no documentation provided)
    attr_accessor :tagDefinitions
    # (no documentation provided)
    attr_accessor :tagVersion
    # (no documentation provided)
    attr_accessor :tagUpdateTime

    # the json hash for this ServiceTags
    def to_jaxb_json_hash
      _h = {}
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      _h['resourceToTagIds'] = resourceToTagIds.to_jaxb_json_hash unless resourceToTagIds.nil?
      if !serviceResources.nil?
        _ha = Array.new
        serviceResources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['serviceResources'] = _ha
      end
      _h['tags'] = tags.to_jaxb_json_hash unless tags.nil?
      _h['op'] = op.to_jaxb_json_hash unless op.nil?
      _h['tagDefinitions'] = tagDefinitions.to_jaxb_json_hash unless tagDefinitions.nil?
      _h['tagVersion'] = tagVersion.to_jaxb_json_hash unless tagVersion.nil?
      _h['tagUpdateTime'] = tagUpdateTime.to_jaxb_json_hash unless tagUpdateTime.nil?
      return _h
    end

    # the json (string form) for this ServiceTags
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ServiceTags with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
        if !_o['resourceToTagIds'].nil?
          _oa = _o['resourceToTagIds']
            if(_oa.is_a? Hash)
              @resourceToTagIds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceToTagIds =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceToTagIds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceToTagIds.push Hash.from_json(_item)
                 else
                   @resourceToTagIds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceToTagIds = _oa
            end
          end
        if !_o['serviceResources'].nil?
          _oa = _o['serviceResources']
            if(_oa.is_a? Hash)
              @serviceResources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceResources =  Org::Apache::Ranger::Plugin::Model::RangerServiceResource.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceResources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceResources.push Org::Apache::Ranger::Plugin::Model::RangerServiceResource.from_json(_item)
                 else
                   @serviceResources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceResources = _oa
            end
          end
        if !_o['tags'].nil?
          _oa = _o['tags']
            if(_oa.is_a? Hash)
              @tags = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tags =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tags = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tags.push Hash.from_json(_item)
                 else
                   @tags.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tags = _oa
            end
          end
        if !_o['op'].nil?
          _oa = _o['op']
            if(_oa.is_a? Hash)
              @op = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @op =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @op = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @op.push String.from_json(_item)
                 else
                   @op.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @op = _oa
            end
          end
        if !_o['tagDefinitions'].nil?
          _oa = _o['tagDefinitions']
            if(_oa.is_a? Hash)
              @tagDefinitions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagDefinitions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagDefinitions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagDefinitions.push Hash.from_json(_item)
                 else
                   @tagDefinitions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagDefinitions = _oa
            end
          end
        if !_o['tagVersion'].nil?
          _oa = _o['tagVersion']
            if(_oa.is_a? Hash)
              @tagVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagVersion.push Bignum.from_json(_item)
                 else
                   @tagVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagVersion = _oa
            end
          end
        if !_o['tagUpdateTime'].nil?
          _oa = _o['tagUpdateTime']
            if(_oa.is_a? Hash)
              @tagUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagUpdateTime.push Time.from_json(_item)
                 else
                   @tagUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagUpdateTime = _oa
            end
          end
    end

    # constructs a ServiceTags from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerContextEnricherDef 

    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :enricherOptions
    # (no documentation provided)
    attr_accessor :enricher
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this RangerContextEnricherDef
    def to_jaxb_json_hash
      _h = {}
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['enricherOptions'] = enricherOptions.to_jaxb_json_hash unless enricherOptions.nil?
      _h['enricher'] = enricher.to_jaxb_json_hash unless enricher.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this RangerContextEnricherDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerContextEnricherDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['enricherOptions'].nil?
          _oa = _o['enricherOptions']
            if(_oa.is_a? Hash)
              @enricherOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enricherOptions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enricherOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enricherOptions.push Hash.from_json(_item)
                 else
                   @enricherOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enricherOptions = _oa
            end
          end
        if !_o['enricher'].nil?
          _oa = _o['enricher']
            if(_oa.is_a? Hash)
              @enricher = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enricher =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enricher = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enricher.push String.from_json(_item)
                 else
                   @enricher.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enricher = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a RangerContextEnricherDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerResourceDef 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :isValidLeaf
    # (no documentation provided)
    attr_accessor :level
    # (no documentation provided)
    attr_accessor :mandatory
    # (no documentation provided)
    attr_accessor :uiHint
    # (no documentation provided)
    attr_accessor :excludesSupported
    # (no documentation provided)
    attr_accessor :lookupSupported
    # (no documentation provided)
    attr_accessor :matcher
    # (no documentation provided)
    attr_accessor :recursiveSupported
    # (no documentation provided)
    attr_accessor :accessTypeRestrictions
    # (no documentation provided)
    attr_accessor :rbKeyValidationMessage
    # (no documentation provided)
    attr_accessor :validationRegEx
    # (no documentation provided)
    attr_accessor :validationMessage
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :matcherOptions
    # (no documentation provided)
    attr_accessor :parent
    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :itemId

    # the json hash for this RangerResourceDef
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      _h['isValidLeaf'] = isValidLeaf.to_jaxb_json_hash unless isValidLeaf.nil?
      _h['level'] = level.to_jaxb_json_hash unless level.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      _h['uiHint'] = uiHint.to_jaxb_json_hash unless uiHint.nil?
      _h['excludesSupported'] = excludesSupported.to_jaxb_json_hash unless excludesSupported.nil?
      _h['lookupSupported'] = lookupSupported.to_jaxb_json_hash unless lookupSupported.nil?
      _h['matcher'] = matcher.to_jaxb_json_hash unless matcher.nil?
      _h['recursiveSupported'] = recursiveSupported.to_jaxb_json_hash unless recursiveSupported.nil?
      if !accessTypeRestrictions.nil?
        _ha = Array.new
        accessTypeRestrictions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypeRestrictions'] = _ha
      end
      _h['rbKeyValidationMessage'] = rbKeyValidationMessage.to_jaxb_json_hash unless rbKeyValidationMessage.nil?
      _h['validationRegEx'] = validationRegEx.to_jaxb_json_hash unless validationRegEx.nil?
      _h['validationMessage'] = validationMessage.to_jaxb_json_hash unless validationMessage.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['matcherOptions'] = matcherOptions.to_jaxb_json_hash unless matcherOptions.nil?
      _h['parent'] = parent.to_jaxb_json_hash unless parent.nil?
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      return _h
    end

    # the json (string form) for this RangerResourceDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerResourceDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['isValidLeaf'].nil?
          _oa = _o['isValidLeaf']
            if(_oa.is_a? Hash)
              @isValidLeaf = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isValidLeaf =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isValidLeaf = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isValidLeaf.push Boolean.from_json(_item)
                 else
                   @isValidLeaf.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isValidLeaf = _oa
            end
          end
        if !_o['level'].nil?
          _oa = _o['level']
            if(_oa.is_a? Hash)
              @level = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @level =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @level = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @level.push Fixnum.from_json(_item)
                 else
                   @level.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @level = _oa
            end
          end
        if !_o['mandatory'].nil?
          _oa = _o['mandatory']
            if(_oa.is_a? Hash)
              @mandatory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mandatory =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mandatory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mandatory.push Boolean.from_json(_item)
                 else
                   @mandatory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mandatory = _oa
            end
          end
        if !_o['uiHint'].nil?
          _oa = _o['uiHint']
            if(_oa.is_a? Hash)
              @uiHint = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uiHint =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uiHint = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uiHint.push String.from_json(_item)
                 else
                   @uiHint.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uiHint = _oa
            end
          end
        if !_o['excludesSupported'].nil?
          _oa = _o['excludesSupported']
            if(_oa.is_a? Hash)
              @excludesSupported = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @excludesSupported =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @excludesSupported = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @excludesSupported.push Boolean.from_json(_item)
                 else
                   @excludesSupported.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @excludesSupported = _oa
            end
          end
        if !_o['lookupSupported'].nil?
          _oa = _o['lookupSupported']
            if(_oa.is_a? Hash)
              @lookupSupported = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lookupSupported =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lookupSupported = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lookupSupported.push Boolean.from_json(_item)
                 else
                   @lookupSupported.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lookupSupported = _oa
            end
          end
        if !_o['matcher'].nil?
          _oa = _o['matcher']
            if(_oa.is_a? Hash)
              @matcher = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @matcher =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @matcher = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @matcher.push String.from_json(_item)
                 else
                   @matcher.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @matcher = _oa
            end
          end
        if !_o['recursiveSupported'].nil?
          _oa = _o['recursiveSupported']
            if(_oa.is_a? Hash)
              @recursiveSupported = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recursiveSupported =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recursiveSupported = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recursiveSupported.push Boolean.from_json(_item)
                 else
                   @recursiveSupported.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recursiveSupported = _oa
            end
          end
        if !_o['accessTypeRestrictions'].nil?
          _oa = _o['accessTypeRestrictions']
            if(_oa.is_a? Hash)
              @accessTypeRestrictions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypeRestrictions =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypeRestrictions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypeRestrictions.push String.from_json(_item)
                 else
                   @accessTypeRestrictions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypeRestrictions = _oa
            end
          end
        if !_o['rbKeyValidationMessage'].nil?
          _oa = _o['rbKeyValidationMessage']
            if(_oa.is_a? Hash)
              @rbKeyValidationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyValidationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyValidationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyValidationMessage.push String.from_json(_item)
                 else
                   @rbKeyValidationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyValidationMessage = _oa
            end
          end
        if !_o['validationRegEx'].nil?
          _oa = _o['validationRegEx']
            if(_oa.is_a? Hash)
              @validationRegEx = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationRegEx =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationRegEx = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationRegEx.push String.from_json(_item)
                 else
                   @validationRegEx.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationRegEx = _oa
            end
          end
        if !_o['validationMessage'].nil?
          _oa = _o['validationMessage']
            if(_oa.is_a? Hash)
              @validationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationMessage.push String.from_json(_item)
                 else
                   @validationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationMessage = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['matcherOptions'].nil?
          _oa = _o['matcherOptions']
            if(_oa.is_a? Hash)
              @matcherOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @matcherOptions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @matcherOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @matcherOptions.push Hash.from_json(_item)
                 else
                   @matcherOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @matcherOptions = _oa
            end
          end
        if !_o['parent'].nil?
          _oa = _o['parent']
            if(_oa.is_a? Hash)
              @parent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parent.push String.from_json(_item)
                 else
                   @parent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parent = _oa
            end
          end
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
    end

    # constructs a RangerResourceDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItem 

    # (no documentation provided)
    attr_accessor :conditions
    # (no documentation provided)
    attr_accessor :accesses
    # (no documentation provided)
    attr_accessor :delegateAdmin
    # (no documentation provided)
    attr_accessor :groups
    # (no documentation provided)
    attr_accessor :users

    # the json hash for this RangerPolicyItem
    def to_jaxb_json_hash
      _h = {}
      if !conditions.nil?
        _ha = Array.new
        conditions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['conditions'] = _ha
      end
      if !accesses.nil?
        _ha = Array.new
        accesses.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accesses'] = _ha
      end
      _h['delegateAdmin'] = delegateAdmin.to_jaxb_json_hash unless delegateAdmin.nil?
      if !groups.nil?
        _ha = Array.new
        groups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groups'] = _ha
      end
      if !users.nil?
        _ha = Array.new
        users.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['users'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerPolicyItem
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItem with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['conditions'].nil?
          _oa = _o['conditions']
            if(_oa.is_a? Hash)
              @conditions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conditions =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItemCondition.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conditions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conditions.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItemCondition.from_json(_item)
                 else
                   @conditions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conditions = _oa
            end
          end
        if !_o['accesses'].nil?
          _oa = _o['accesses']
            if(_oa.is_a? Hash)
              @accesses = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accesses =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItemAccess.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accesses = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accesses.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItemAccess.from_json(_item)
                 else
                   @accesses.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accesses = _oa
            end
          end
        if !_o['delegateAdmin'].nil?
          _oa = _o['delegateAdmin']
            if(_oa.is_a? Hash)
              @delegateAdmin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delegateAdmin =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delegateAdmin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delegateAdmin.push Boolean.from_json(_item)
                 else
                   @delegateAdmin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delegateAdmin = _oa
            end
          end
        if !_o['groups'].nil?
          _oa = _o['groups']
            if(_oa.is_a? Hash)
              @groups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groups.push String.from_json(_item)
                 else
                   @groups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groups = _oa
            end
          end
        if !_o['users'].nil?
          _oa = _o['users']
            if(_oa.is_a? Hash)
              @users = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @users =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @users = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @users.push String.from_json(_item)
                 else
                   @users.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @users = _oa
            end
          end
    end

    # constructs a RangerPolicyItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class ServicePolicies 

    # (no documentation provided)
    attr_accessor :securityZones
    # (no documentation provided)
    attr_accessor :policies
    # (no documentation provided)
    attr_accessor :serviceId
    # (no documentation provided)
    attr_accessor :policyDeltas
    # (no documentation provided)
    attr_accessor :policyVersion
    # (no documentation provided)
    attr_accessor :serviceName
    # (no documentation provided)
    attr_accessor :serviceDef
    # (no documentation provided)
    attr_accessor :auditMode
    # (no documentation provided)
    attr_accessor :tagPolicies
    # (no documentation provided)
    attr_accessor :policyUpdateTime

    # the json hash for this ServicePolicies
    def to_jaxb_json_hash
      _h = {}
      _h['securityZones'] = securityZones.to_jaxb_json_hash unless securityZones.nil?
      if !policies.nil?
        _ha = Array.new
        policies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policies'] = _ha
      end
      _h['serviceId'] = serviceId.to_jaxb_json_hash unless serviceId.nil?
      if !policyDeltas.nil?
        _ha = Array.new
        policyDeltas.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyDeltas'] = _ha
      end
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      _h['serviceDef'] = serviceDef.to_jaxb_json_hash unless serviceDef.nil?
      _h['auditMode'] = auditMode.to_jaxb_json_hash unless auditMode.nil?
      _h['tagPolicies'] = tagPolicies.to_jaxb_json_hash unless tagPolicies.nil?
      _h['policyUpdateTime'] = policyUpdateTime.to_jaxb_json_hash unless policyUpdateTime.nil?
      return _h
    end

    # the json (string form) for this ServicePolicies
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ServicePolicies with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['securityZones'].nil?
          _oa = _o['securityZones']
            if(_oa.is_a? Hash)
              @securityZones = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @securityZones =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @securityZones = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @securityZones.push Hash.from_json(_item)
                 else
                   @securityZones.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @securityZones = _oa
            end
          end
        if !_o['policies'].nil?
          _oa = _o['policies']
            if(_oa.is_a? Hash)
              @policies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policies =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policies.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policies = _oa
            end
          end
        if !_o['serviceId'].nil?
          _oa = _o['serviceId']
            if(_oa.is_a? Hash)
              @serviceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceId.push Bignum.from_json(_item)
                 else
                   @serviceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceId = _oa
            end
          end
        if !_o['policyDeltas'].nil?
          _oa = _o['policyDeltas']
            if(_oa.is_a? Hash)
              @policyDeltas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyDeltas =  Org::Apache::Ranger::Plugin::Model::RangerPolicyDelta.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyDeltas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyDeltas.push Org::Apache::Ranger::Plugin::Model::RangerPolicyDelta.from_json(_item)
                 else
                   @policyDeltas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyDeltas = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
        if !_o['serviceDef'].nil?
          _oa = _o['serviceDef']
            if(_oa.is_a? Hash)
              @serviceDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceDef =  Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceDef.push Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_item)
                 else
                   @serviceDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceDef = _oa
            end
          end
        if !_o['auditMode'].nil?
          _oa = _o['auditMode']
            if(_oa.is_a? Hash)
              @auditMode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditMode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditMode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditMode.push String.from_json(_item)
                 else
                   @auditMode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditMode = _oa
            end
          end
        if !_o['tagPolicies'].nil?
          _oa = _o['tagPolicies']
            if(_oa.is_a? Hash)
              @tagPolicies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagPolicies =  Org::Apache::Ranger::Plugin::Util::TagPolicies.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagPolicies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagPolicies.push Org::Apache::Ranger::Plugin::Util::TagPolicies.from_json(_item)
                 else
                   @tagPolicies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagPolicies = _oa
            end
          end
        if !_o['policyUpdateTime'].nil?
          _oa = _o['policyUpdateTime']
            if(_oa.is_a? Hash)
              @policyUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyUpdateTime.push Time.from_json(_item)
                 else
                   @policyUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyUpdateTime = _oa
            end
          end
    end

    # constructs a ServicePolicies from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class GrantRevokeRequest 

    # (no documentation provided)
    attr_accessor :users
    # (no documentation provided)
    attr_accessor :accessTypes
    # (no documentation provided)
    attr_accessor :replaceExistingPermissions
    # (no documentation provided)
    attr_accessor :isRecursive
    # (no documentation provided)
    attr_accessor :resource
    # (no documentation provided)
    attr_accessor :zoneName
    # (no documentation provided)
    attr_accessor :groups
    # (no documentation provided)
    attr_accessor :clientType
    # (no documentation provided)
    attr_accessor :grantorGroups
    # (no documentation provided)
    attr_accessor :clientIPAddress
    # (no documentation provided)
    attr_accessor :grantor
    # (no documentation provided)
    attr_accessor :delegateAdmin
    # (no documentation provided)
    attr_accessor :clusterName
    # (no documentation provided)
    attr_accessor :enableAudit
    # (no documentation provided)
    attr_accessor :requestData
    # (no documentation provided)
    attr_accessor :sessionId

    # the json hash for this GrantRevokeRequest
    def to_jaxb_json_hash
      _h = {}
      if !users.nil?
        _ha = Array.new
        users.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['users'] = _ha
      end
      if !accessTypes.nil?
        _ha = Array.new
        accessTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypes'] = _ha
      end
      _h['replaceExistingPermissions'] = replaceExistingPermissions.to_jaxb_json_hash unless replaceExistingPermissions.nil?
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['resource'] = resource.to_jaxb_json_hash unless resource.nil?
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      if !groups.nil?
        _ha = Array.new
        groups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groups'] = _ha
      end
      _h['clientType'] = clientType.to_jaxb_json_hash unless clientType.nil?
      if !grantorGroups.nil?
        _ha = Array.new
        grantorGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['grantorGroups'] = _ha
      end
      _h['clientIPAddress'] = clientIPAddress.to_jaxb_json_hash unless clientIPAddress.nil?
      _h['grantor'] = grantor.to_jaxb_json_hash unless grantor.nil?
      _h['delegateAdmin'] = delegateAdmin.to_jaxb_json_hash unless delegateAdmin.nil?
      _h['clusterName'] = clusterName.to_jaxb_json_hash unless clusterName.nil?
      _h['enableAudit'] = enableAudit.to_jaxb_json_hash unless enableAudit.nil?
      _h['requestData'] = requestData.to_jaxb_json_hash unless requestData.nil?
      _h['sessionId'] = sessionId.to_jaxb_json_hash unless sessionId.nil?
      return _h
    end

    # the json (string form) for this GrantRevokeRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this GrantRevokeRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['users'].nil?
          _oa = _o['users']
            if(_oa.is_a? Hash)
              @users = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @users =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @users = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @users.push String.from_json(_item)
                 else
                   @users.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @users = _oa
            end
          end
        if !_o['accessTypes'].nil?
          _oa = _o['accessTypes']
            if(_oa.is_a? Hash)
              @accessTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypes =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypes.push String.from_json(_item)
                 else
                   @accessTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypes = _oa
            end
          end
        if !_o['replaceExistingPermissions'].nil?
          _oa = _o['replaceExistingPermissions']
            if(_oa.is_a? Hash)
              @replaceExistingPermissions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @replaceExistingPermissions =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @replaceExistingPermissions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @replaceExistingPermissions.push Boolean.from_json(_item)
                 else
                   @replaceExistingPermissions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @replaceExistingPermissions = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Boolean.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['resource'].nil?
          _oa = _o['resource']
            if(_oa.is_a? Hash)
              @resource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resource =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resource.push Hash.from_json(_item)
                 else
                   @resource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resource = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['groups'].nil?
          _oa = _o['groups']
            if(_oa.is_a? Hash)
              @groups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groups.push String.from_json(_item)
                 else
                   @groups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groups = _oa
            end
          end
        if !_o['clientType'].nil?
          _oa = _o['clientType']
            if(_oa.is_a? Hash)
              @clientType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientType.push String.from_json(_item)
                 else
                   @clientType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientType = _oa
            end
          end
        if !_o['grantorGroups'].nil?
          _oa = _o['grantorGroups']
            if(_oa.is_a? Hash)
              @grantorGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grantorGroups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grantorGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grantorGroups.push String.from_json(_item)
                 else
                   @grantorGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grantorGroups = _oa
            end
          end
        if !_o['clientIPAddress'].nil?
          _oa = _o['clientIPAddress']
            if(_oa.is_a? Hash)
              @clientIPAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientIPAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientIPAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientIPAddress.push String.from_json(_item)
                 else
                   @clientIPAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientIPAddress = _oa
            end
          end
        if !_o['grantor'].nil?
          _oa = _o['grantor']
            if(_oa.is_a? Hash)
              @grantor = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grantor =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grantor = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grantor.push String.from_json(_item)
                 else
                   @grantor.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grantor = _oa
            end
          end
        if !_o['delegateAdmin'].nil?
          _oa = _o['delegateAdmin']
            if(_oa.is_a? Hash)
              @delegateAdmin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delegateAdmin =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delegateAdmin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delegateAdmin.push Boolean.from_json(_item)
                 else
                   @delegateAdmin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delegateAdmin = _oa
            end
          end
        if !_o['clusterName'].nil?
          _oa = _o['clusterName']
            if(_oa.is_a? Hash)
              @clusterName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clusterName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clusterName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clusterName.push String.from_json(_item)
                 else
                   @clusterName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clusterName = _oa
            end
          end
        if !_o['enableAudit'].nil?
          _oa = _o['enableAudit']
            if(_oa.is_a? Hash)
              @enableAudit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enableAudit =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enableAudit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enableAudit.push Boolean.from_json(_item)
                 else
                   @enableAudit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enableAudit = _oa
            end
          end
        if !_o['requestData'].nil?
          _oa = _o['requestData']
            if(_oa.is_a? Hash)
              @requestData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestData =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestData.push String.from_json(_item)
                 else
                   @requestData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestData = _oa
            end
          end
        if !_o['sessionId'].nil?
          _oa = _o['sessionId']
            if(_oa.is_a? Hash)
              @sessionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionId.push String.from_json(_item)
                 else
                   @sessionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionId = _oa
            end
          end
    end

    # constructs a GrantRevokeRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class TagPolicies 

    # (no documentation provided)
    attr_accessor :policyVersion
    # (no documentation provided)
    attr_accessor :serviceId
    # (no documentation provided)
    attr_accessor :policies
    # (no documentation provided)
    attr_accessor :auditMode
    # (no documentation provided)
    attr_accessor :serviceDef
    # (no documentation provided)
    attr_accessor :policyUpdateTime
    # (no documentation provided)
    attr_accessor :serviceName

    # the json hash for this TagPolicies
    def to_jaxb_json_hash
      _h = {}
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      _h['serviceId'] = serviceId.to_jaxb_json_hash unless serviceId.nil?
      if !policies.nil?
        _ha = Array.new
        policies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policies'] = _ha
      end
      _h['auditMode'] = auditMode.to_jaxb_json_hash unless auditMode.nil?
      _h['serviceDef'] = serviceDef.to_jaxb_json_hash unless serviceDef.nil?
      _h['policyUpdateTime'] = policyUpdateTime.to_jaxb_json_hash unless policyUpdateTime.nil?
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      return _h
    end

    # the json (string form) for this TagPolicies
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TagPolicies with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
        if !_o['serviceId'].nil?
          _oa = _o['serviceId']
            if(_oa.is_a? Hash)
              @serviceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceId.push Bignum.from_json(_item)
                 else
                   @serviceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceId = _oa
            end
          end
        if !_o['policies'].nil?
          _oa = _o['policies']
            if(_oa.is_a? Hash)
              @policies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policies =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policies.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policies = _oa
            end
          end
        if !_o['auditMode'].nil?
          _oa = _o['auditMode']
            if(_oa.is_a? Hash)
              @auditMode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditMode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditMode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditMode.push String.from_json(_item)
                 else
                   @auditMode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditMode = _oa
            end
          end
        if !_o['serviceDef'].nil?
          _oa = _o['serviceDef']
            if(_oa.is_a? Hash)
              @serviceDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceDef =  Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceDef.push Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_item)
                 else
                   @serviceDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceDef = _oa
            end
          end
        if !_o['policyUpdateTime'].nil?
          _oa = _o['policyUpdateTime']
            if(_oa.is_a? Hash)
              @policyUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyUpdateTime.push Time.from_json(_item)
                 else
                   @policyUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyUpdateTime = _oa
            end
          end
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
    end

    # constructs a TagPolicies from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Admin

module Client

module Datatype

  # (no documentation provided)
  class Message 

    # (no documentation provided)
    attr_accessor :message
    # (no documentation provided)
    attr_accessor :fieldName
    # (no documentation provided)
    attr_accessor :rbKey
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :objectId

    # the json hash for this Message
    def to_jaxb_json_hash
      _h = {}
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      _h['fieldName'] = fieldName.to_jaxb_json_hash unless fieldName.nil?
      _h['rbKey'] = rbKey.to_jaxb_json_hash unless rbKey.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['objectId'] = objectId.to_jaxb_json_hash unless objectId.nil?
      return _h
    end

    # the json (string form) for this Message
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Message with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
        if !_o['fieldName'].nil?
          _oa = _o['fieldName']
            if(_oa.is_a? Hash)
              @fieldName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fieldName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fieldName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fieldName.push String.from_json(_item)
                 else
                   @fieldName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fieldName = _oa
            end
          end
        if !_o['rbKey'].nil?
          _oa = _o['rbKey']
            if(_oa.is_a? Hash)
              @rbKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKey.push String.from_json(_item)
                 else
                   @rbKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKey = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['objectId'].nil?
          _oa = _o['objectId']
            if(_oa.is_a? Hash)
              @objectId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectId.push Bignum.from_json(_item)
                 else
                   @objectId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectId = _oa
            end
          end
    end

    # constructs a Message from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerEnumDef 

    # (no documentation provided)
    attr_accessor :elements
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :defaultIndex

    # the json hash for this RangerEnumDef
    def to_jaxb_json_hash
      _h = {}
      if !elements.nil?
        _ha = Array.new
        elements.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['elements'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['defaultIndex'] = defaultIndex.to_jaxb_json_hash unless defaultIndex.nil?
      return _h
    end

    # the json (string form) for this RangerEnumDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerEnumDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['elements'].nil?
          _oa = _o['elements']
            if(_oa.is_a? Hash)
              @elements = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elements =  Org::Apache::Ranger::Plugin::Model::RangerEnumElementDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elements = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elements.push Org::Apache::Ranger::Plugin::Model::RangerEnumElementDef.from_json(_item)
                 else
                   @elements.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elements = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['defaultIndex'].nil?
          _oa = _o['defaultIndex']
            if(_oa.is_a? Hash)
              @defaultIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultIndex.push Fixnum.from_json(_item)
                 else
                   @defaultIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultIndex = _oa
            end
          end
    end

    # constructs a RangerEnumDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXLdapSyncSourceInfo 

    # (no documentation provided)
    attr_accessor :ldapUrl
    # (no documentation provided)
    attr_accessor :userSearchFilter
    # (no documentation provided)
    attr_accessor :groupSearchFilter
    # (no documentation provided)
    attr_accessor :groupHierarchyLevel
    # (no documentation provided)
    attr_accessor :totalUsersSynced
    # (no documentation provided)
    attr_accessor :totalGroupsSynced
    # (no documentation provided)
    attr_accessor :groupSearchFirstEnabled
    # (no documentation provided)
    attr_accessor :groupSearchEnabled
    # (no documentation provided)
    attr_accessor :userSearchEnabled

    # the json hash for this VXLdapSyncSourceInfo
    def to_jaxb_json_hash
      _h = {}
      _h['ldapUrl'] = ldapUrl.to_jaxb_json_hash unless ldapUrl.nil?
      _h['userSearchFilter'] = userSearchFilter.to_jaxb_json_hash unless userSearchFilter.nil?
      _h['groupSearchFilter'] = groupSearchFilter.to_jaxb_json_hash unless groupSearchFilter.nil?
      _h['groupHierarchyLevel'] = groupHierarchyLevel.to_jaxb_json_hash unless groupHierarchyLevel.nil?
      _h['totalUsersSynced'] = totalUsersSynced.to_jaxb_json_hash unless totalUsersSynced.nil?
      _h['totalGroupsSynced'] = totalGroupsSynced.to_jaxb_json_hash unless totalGroupsSynced.nil?
      _h['groupSearchFirstEnabled'] = groupSearchFirstEnabled.to_jaxb_json_hash unless groupSearchFirstEnabled.nil?
      _h['groupSearchEnabled'] = groupSearchEnabled.to_jaxb_json_hash unless groupSearchEnabled.nil?
      _h['userSearchEnabled'] = userSearchEnabled.to_jaxb_json_hash unless userSearchEnabled.nil?
      return _h
    end

    # the json (string form) for this VXLdapSyncSourceInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXLdapSyncSourceInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['ldapUrl'].nil?
          _oa = _o['ldapUrl']
            if(_oa.is_a? Hash)
              @ldapUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ldapUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ldapUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ldapUrl.push String.from_json(_item)
                 else
                   @ldapUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ldapUrl = _oa
            end
          end
        if !_o['userSearchFilter'].nil?
          _oa = _o['userSearchFilter']
            if(_oa.is_a? Hash)
              @userSearchFilter = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSearchFilter =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSearchFilter = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSearchFilter.push String.from_json(_item)
                 else
                   @userSearchFilter.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSearchFilter = _oa
            end
          end
        if !_o['groupSearchFilter'].nil?
          _oa = _o['groupSearchFilter']
            if(_oa.is_a? Hash)
              @groupSearchFilter = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupSearchFilter =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupSearchFilter = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupSearchFilter.push String.from_json(_item)
                 else
                   @groupSearchFilter.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupSearchFilter = _oa
            end
          end
        if !_o['groupHierarchyLevel'].nil?
          _oa = _o['groupHierarchyLevel']
            if(_oa.is_a? Hash)
              @groupHierarchyLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupHierarchyLevel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupHierarchyLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupHierarchyLevel.push String.from_json(_item)
                 else
                   @groupHierarchyLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupHierarchyLevel = _oa
            end
          end
        if !_o['totalUsersSynced'].nil?
          _oa = _o['totalUsersSynced']
            if(_oa.is_a? Hash)
              @totalUsersSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalUsersSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalUsersSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalUsersSynced.push Bignum.from_json(_item)
                 else
                   @totalUsersSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalUsersSynced = _oa
            end
          end
        if !_o['totalGroupsSynced'].nil?
          _oa = _o['totalGroupsSynced']
            if(_oa.is_a? Hash)
              @totalGroupsSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalGroupsSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalGroupsSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalGroupsSynced.push Bignum.from_json(_item)
                 else
                   @totalGroupsSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalGroupsSynced = _oa
            end
          end
        if !_o['groupSearchFirstEnabled'].nil?
          _oa = _o['groupSearchFirstEnabled']
            if(_oa.is_a? Hash)
              @groupSearchFirstEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupSearchFirstEnabled =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupSearchFirstEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupSearchFirstEnabled.push String.from_json(_item)
                 else
                   @groupSearchFirstEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupSearchFirstEnabled = _oa
            end
          end
        if !_o['groupSearchEnabled'].nil?
          _oa = _o['groupSearchEnabled']
            if(_oa.is_a? Hash)
              @groupSearchEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupSearchEnabled =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupSearchEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupSearchEnabled.push String.from_json(_item)
                 else
                   @groupSearchEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupSearchEnabled = _oa
            end
          end
        if !_o['userSearchEnabled'].nil?
          _oa = _o['userSearchEnabled']
            if(_oa.is_a? Hash)
              @userSearchEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSearchEnabled =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSearchEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSearchEnabled.push String.from_json(_item)
                 else
                   @userSearchEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSearchEnabled = _oa
            end
          end
    end

    # constructs a VXLdapSyncSourceInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerTagAttributeDef 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this RangerTagAttributeDef
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this RangerTagAttributeDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerTagAttributeDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a RangerTagAttributeDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerEnumElementDef 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :itemId

    # the json hash for this RangerEnumElementDef
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      return _h
    end

    # the json (string form) for this RangerEnumElementDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerEnumElementDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
    end

    # constructs a RangerEnumElementDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class VEnumElement < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # the elementName
    attr_accessor :elementName
    # the enumName
    attr_accessor :enumName
    # the rbKey
    attr_accessor :rbKey
    # int - value of member attribute &lt;b&gt;elementValue&lt;/b&gt;.
    attr_accessor :elementValue
    # String - value of member attribute &lt;b&gt;elementLabel&lt;/b&gt;.
    attr_accessor :elementLabel
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VEnumElement
    def to_jaxb_json_hash
      _h = super
      _h['elementName'] = elementName.to_jaxb_json_hash unless elementName.nil?
      _h['enumName'] = enumName.to_jaxb_json_hash unless enumName.nil?
      _h['rbKey'] = rbKey.to_jaxb_json_hash unless rbKey.nil?
      _h['elementValue'] = elementValue.to_jaxb_json_hash unless elementValue.nil?
      _h['elementLabel'] = elementLabel.to_jaxb_json_hash unless elementLabel.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VEnumElement with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['elementName'].nil?
          _oa = _o['elementName']
            if(_oa.is_a? Hash)
              @elementName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elementName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elementName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elementName.push String.from_json(_item)
                 else
                   @elementName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elementName = _oa
            end
          end
        if !_o['enumName'].nil?
          _oa = _o['enumName']
            if(_oa.is_a? Hash)
              @enumName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enumName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enumName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enumName.push String.from_json(_item)
                 else
                   @enumName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enumName = _oa
            end
          end
        if !_o['rbKey'].nil?
          _oa = _o['rbKey']
            if(_oa.is_a? Hash)
              @rbKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKey.push String.from_json(_item)
                 else
                   @rbKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKey = _oa
            end
          end
        if !_o['elementValue'].nil?
          _oa = _o['elementValue']
            if(_oa.is_a? Hash)
              @elementValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elementValue =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elementValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elementValue.push Fixnum.from_json(_item)
                 else
                   @elementValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elementValue = _oa
            end
          end
        if !_o['elementLabel'].nil?
          _oa = _o['elementLabel']
            if(_oa.is_a? Hash)
              @elementLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elementLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elementLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elementLabel.push String.from_json(_item)
                 else
                   @elementLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elementLabel = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VEnumElement from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerTagResourceMap < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :resourceId
    # (no documentation provided)
    attr_accessor :tagId

    # the json hash for this RangerTagResourceMap
    def to_jaxb_json_hash
      _h = super
      _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
      _h['tagId'] = tagId.to_jaxb_json_hash unless tagId.nil?
      return _h
    end

    #initializes this RangerTagResourceMap with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['resourceId'].nil?
          _oa = _o['resourceId']
            if(_oa.is_a? Hash)
              @resourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceId.push Bignum.from_json(_item)
                 else
                   @resourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceId = _oa
            end
          end
        if !_o['tagId'].nil?
          _oa = _o['tagId']
            if(_oa.is_a? Hash)
              @tagId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagId.push Bignum.from_json(_item)
                 else
                   @tagId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagId = _oa
            end
          end
    end

    # constructs a RangerTagResourceMap from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerServiceDef < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :configs
    # (no documentation provided)
    attr_accessor :rowFilterDef
    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :dataMaskDef
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :policyConditions
    # (no documentation provided)
    attr_accessor :enums
    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :contextEnrichers
    # (no documentation provided)
    attr_accessor :options
    # (no documentation provided)
    attr_accessor :implClass
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :accessTypes

    # the json hash for this RangerServiceDef
    def to_jaxb_json_hash
      _h = super
      if !configs.nil?
        _ha = Array.new
        configs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['configs'] = _ha
      end
      _h['rowFilterDef'] = rowFilterDef.to_jaxb_json_hash unless rowFilterDef.nil?
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['dataMaskDef'] = dataMaskDef.to_jaxb_json_hash unless dataMaskDef.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      if !policyConditions.nil?
        _ha = Array.new
        policyConditions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyConditions'] = _ha
      end
      if !enums.nil?
        _ha = Array.new
        enums.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['enums'] = _ha
      end
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !contextEnrichers.nil?
        _ha = Array.new
        contextEnrichers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['contextEnrichers'] = _ha
      end
      _h['options'] = options.to_jaxb_json_hash unless options.nil?
      _h['implClass'] = implClass.to_jaxb_json_hash unless implClass.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      if !accessTypes.nil?
        _ha = Array.new
        accessTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypes'] = _ha
      end
      return _h
    end

    #initializes this RangerServiceDef with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['configs'].nil?
          _oa = _o['configs']
            if(_oa.is_a? Hash)
              @configs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configs =  Org::Apache::Ranger::Plugin::Model::RangerServiceConfigDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configs.push Org::Apache::Ranger::Plugin::Model::RangerServiceConfigDef.from_json(_item)
                 else
                   @configs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configs = _oa
            end
          end
        if !_o['rowFilterDef'].nil?
          _oa = _o['rowFilterDef']
            if(_oa.is_a? Hash)
              @rowFilterDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rowFilterDef =  Org::Apache::Ranger::Plugin::Model::RangerRowFilterDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rowFilterDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rowFilterDef.push Org::Apache::Ranger::Plugin::Model::RangerRowFilterDef.from_json(_item)
                 else
                   @rowFilterDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rowFilterDef = _oa
            end
          end
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['dataMaskDef'].nil?
          _oa = _o['dataMaskDef']
            if(_oa.is_a? Hash)
              @dataMaskDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskDef =  Org::Apache::Ranger::Plugin::Model::RangerDataMaskDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskDef.push Org::Apache::Ranger::Plugin::Model::RangerDataMaskDef.from_json(_item)
                 else
                   @dataMaskDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskDef = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['policyConditions'].nil?
          _oa = _o['policyConditions']
            if(_oa.is_a? Hash)
              @policyConditions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyConditions =  Org::Apache::Ranger::Plugin::Model::RangerPolicyConditionDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyConditions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyConditions.push Org::Apache::Ranger::Plugin::Model::RangerPolicyConditionDef.from_json(_item)
                 else
                   @policyConditions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyConditions = _oa
            end
          end
        if !_o['enums'].nil?
          _oa = _o['enums']
            if(_oa.is_a? Hash)
              @enums = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enums =  Org::Apache::Ranger::Plugin::Model::RangerEnumDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enums = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enums.push Org::Apache::Ranger::Plugin::Model::RangerEnumDef.from_json(_item)
                 else
                   @enums.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enums = _oa
            end
          end
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['contextEnrichers'].nil?
          _oa = _o['contextEnrichers']
            if(_oa.is_a? Hash)
              @contextEnrichers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contextEnrichers =  Org::Apache::Ranger::Plugin::Model::RangerContextEnricherDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contextEnrichers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contextEnrichers.push Org::Apache::Ranger::Plugin::Model::RangerContextEnricherDef.from_json(_item)
                 else
                   @contextEnrichers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contextEnrichers = _oa
            end
          end
        if !_o['options'].nil?
          _oa = _o['options']
            if(_oa.is_a? Hash)
              @options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @options =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @options.push Hash.from_json(_item)
                 else
                   @options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @options = _oa
            end
          end
        if !_o['implClass'].nil?
          _oa = _o['implClass']
            if(_oa.is_a? Hash)
              @implClass = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @implClass =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @implClass = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @implClass.push String.from_json(_item)
                 else
                   @implClass.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @implClass = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['accessTypes'].nil?
          _oa = _o['accessTypes']
            if(_oa.is_a? Hash)
              @accessTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypes =  Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypes.push Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_item)
                 else
                   @accessTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypes = _oa
            end
          end
    end

    # constructs a RangerServiceDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerServiceResource < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :resourceElements
    # (no documentation provided)
    attr_accessor :serviceName
    # (no documentation provided)
    attr_accessor :resourceSignature

    # the json hash for this RangerServiceResource
    def to_jaxb_json_hash
      _h = super
      _h['resourceElements'] = resourceElements.to_jaxb_json_hash unless resourceElements.nil?
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      _h['resourceSignature'] = resourceSignature.to_jaxb_json_hash unless resourceSignature.nil?
      return _h
    end

    #initializes this RangerServiceResource with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['resourceElements'].nil?
          _oa = _o['resourceElements']
            if(_oa.is_a? Hash)
              @resourceElements = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceElements =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceElements = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceElements.push Hash.from_json(_item)
                 else
                   @resourceElements.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceElements = _oa
            end
          end
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
        if !_o['resourceSignature'].nil?
          _oa = _o['resourceSignature']
            if(_oa.is_a? Hash)
              @resourceSignature = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceSignature =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceSignature = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceSignature.push String.from_json(_item)
                 else
                   @resourceSignature.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceSignature = _oa
            end
          end
    end

    # constructs a RangerServiceResource from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXLong < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # long - value of member attribute &lt;b&gt;value&lt;/b&gt;.
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXLong
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXLong with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push Bignum.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXLong from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPasswordChange < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # Long - value of member attribute &lt;b&gt;id&lt;/b&gt;.
    attr_accessor :id
    # String - value of member attribute &lt;b&gt;loginId&lt;/b&gt;.
    attr_accessor :loginId
    # String - value of member attribute &lt;b&gt;emailAddress&lt;/b&gt;.
    attr_accessor :emailAddress
    # String - value of member attribute &lt;b&gt;resetCode&lt;/b&gt;.
    attr_accessor :resetCode
    # String - value of member attribute &lt;b&gt;oldPassword&lt;/b&gt;.
    attr_accessor :oldPassword
    # String - value of member attribute &lt;b&gt;updPassword&lt;/b&gt;.
    attr_accessor :updPassword
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXPasswordChange
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['loginId'] = loginId.to_jaxb_json_hash unless loginId.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['resetCode'] = resetCode.to_jaxb_json_hash unless resetCode.nil?
      _h['oldPassword'] = oldPassword.to_jaxb_json_hash unless oldPassword.nil?
      _h['updPassword'] = updPassword.to_jaxb_json_hash unless updPassword.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXPasswordChange with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['loginId'].nil?
          _oa = _o['loginId']
            if(_oa.is_a? Hash)
              @loginId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginId.push String.from_json(_item)
                 else
                   @loginId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginId = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['resetCode'].nil?
          _oa = _o['resetCode']
            if(_oa.is_a? Hash)
              @resetCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resetCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resetCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resetCode.push String.from_json(_item)
                 else
                   @resetCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resetCode = _oa
            end
          end
        if !_o['oldPassword'].nil?
          _oa = _o['oldPassword']
            if(_oa.is_a? Hash)
              @oldPassword = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oldPassword =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oldPassword = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oldPassword.push String.from_json(_item)
                 else
                   @oldPassword.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oldPassword = _oa
            end
          end
        if !_o['updPassword'].nil?
          _oa = _o['updPassword']
            if(_oa.is_a? Hash)
              @updPassword = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updPassword =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updPassword = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updPassword.push String.from_json(_item)
                 else
                   @updPassword.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updPassword = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXPasswordChange from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class VList < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # (no documentation provided)
    attr_accessor :listSize
    # (no documentation provided)
    attr_accessor :list
    # (no documentation provided)
    attr_accessor :startIndex
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :totalCount
    # int - value of member attribute &lt;b&gt;resultSize&lt;/b&gt;.
    attr_accessor :resultSize
    # (no documentation provided)
    attr_accessor :sortType
    # (no documentation provided)
    attr_accessor :sortBy

    # the json hash for this VList
    def to_jaxb_json_hash
      _h = super
      _h['listSize'] = listSize.to_jaxb_json_hash unless listSize.nil?
      if !list.nil?
        _ha = Array.new
        list.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['list'] = _ha
      end
      _h['startIndex'] = startIndex.to_jaxb_json_hash unless startIndex.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['totalCount'] = totalCount.to_jaxb_json_hash unless totalCount.nil?
      _h['resultSize'] = resultSize.to_jaxb_json_hash unless resultSize.nil?
      _h['sortType'] = sortType.to_jaxb_json_hash unless sortType.nil?
      _h['sortBy'] = sortBy.to_jaxb_json_hash unless sortBy.nil?
      return _h
    end

    #initializes this VList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['listSize'].nil?
          _oa = _o['listSize']
            if(_oa.is_a? Hash)
              @listSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listSize.push Fixnum.from_json(_item)
                 else
                   @listSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listSize = _oa
            end
          end
        if !_o['list'].nil?
          _oa = _o['list']
            if(_oa.is_a? Hash)
              @list = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @list =  ?.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @list = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @list.push ?.from_json(_item)
                 else
                   @list.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @list = _oa
            end
          end
        if !_o['startIndex'].nil?
          _oa = _o['startIndex']
            if(_oa.is_a? Hash)
              @startIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startIndex.push Fixnum.from_json(_item)
                 else
                   @startIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startIndex = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['totalCount'].nil?
          _oa = _o['totalCount']
            if(_oa.is_a? Hash)
              @totalCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalCount =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalCount.push Bignum.from_json(_item)
                 else
                   @totalCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalCount = _oa
            end
          end
        if !_o['resultSize'].nil?
          _oa = _o['resultSize']
            if(_oa.is_a? Hash)
              @resultSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resultSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resultSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resultSize.push Fixnum.from_json(_item)
                 else
                   @resultSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resultSize = _oa
            end
          end
        if !_o['sortType'].nil?
          _oa = _o['sortType']
            if(_oa.is_a? Hash)
              @sortType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sortType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sortType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sortType.push String.from_json(_item)
                 else
                   @sortType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sortType = _oa
            end
          end
        if !_o['sortBy'].nil?
          _oa = _o['sortBy']
            if(_oa.is_a? Hash)
              @sortBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sortBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sortBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sortBy.push String.from_json(_item)
                 else
                   @sortBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sortBy = _oa
            end
          end
    end

    # constructs a VList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerRowFilterPolicyItem < Org::Apache::Ranger::Plugin::Model::RangerPolicyItem 

    # (no documentation provided)
    attr_accessor :rowFilterInfo

    # the json hash for this RangerRowFilterPolicyItem
    def to_jaxb_json_hash
      _h = super
      _h['rowFilterInfo'] = rowFilterInfo.to_jaxb_json_hash unless rowFilterInfo.nil?
      return _h
    end

    #initializes this RangerRowFilterPolicyItem with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['rowFilterInfo'].nil?
          _oa = _o['rowFilterInfo']
            if(_oa.is_a? Hash)
              @rowFilterInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rowFilterInfo =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItemRowFilterInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rowFilterInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rowFilterInfo.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItemRowFilterInfo.from_json(_item)
                 else
                   @rowFilterInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rowFilterInfo = _oa
            end
          end
    end

    # constructs a RangerRowFilterPolicyItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerTagDef < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :source
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :attributeDefs

    # the json hash for this RangerTagDef
    def to_jaxb_json_hash
      _h = super
      _h['source'] = source.to_jaxb_json_hash unless source.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !attributeDefs.nil?
        _ha = Array.new
        attributeDefs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['attributeDefs'] = _ha
      end
      return _h
    end

    #initializes this RangerTagDef with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['source'].nil?
          _oa = _o['source']
            if(_oa.is_a? Hash)
              @source = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @source =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @source = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @source.push String.from_json(_item)
                 else
                   @source.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @source = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['attributeDefs'].nil?
          _oa = _o['attributeDefs']
            if(_oa.is_a? Hash)
              @attributeDefs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributeDefs =  Org::Apache::Ranger::Plugin::Model::RangerTagAttributeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributeDefs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributeDefs.push Org::Apache::Ranger::Plugin::Model::RangerTagAttributeDef.from_json(_item)
                 else
                   @attributeDefs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributeDefs = _oa
            end
          end
    end

    # constructs a RangerTagDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerService < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :tagService
    # (no documentation provided)
    attr_accessor :tagVersion
    # (no documentation provided)
    attr_accessor :tagUpdateTime
    # (no documentation provided)
    attr_accessor :policyVersion
    # (no documentation provided)
    attr_accessor :policyUpdateTime
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :configs

    # the json hash for this RangerService
    def to_jaxb_json_hash
      _h = super
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['tagService'] = tagService.to_jaxb_json_hash unless tagService.nil?
      _h['tagVersion'] = tagVersion.to_jaxb_json_hash unless tagVersion.nil?
      _h['tagUpdateTime'] = tagUpdateTime.to_jaxb_json_hash unless tagUpdateTime.nil?
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      _h['policyUpdateTime'] = policyUpdateTime.to_jaxb_json_hash unless policyUpdateTime.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['configs'] = configs.to_jaxb_json_hash unless configs.nil?
      return _h
    end

    #initializes this RangerService with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['tagService'].nil?
          _oa = _o['tagService']
            if(_oa.is_a? Hash)
              @tagService = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagService =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagService = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagService.push String.from_json(_item)
                 else
                   @tagService.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagService = _oa
            end
          end
        if !_o['tagVersion'].nil?
          _oa = _o['tagVersion']
            if(_oa.is_a? Hash)
              @tagVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagVersion.push Bignum.from_json(_item)
                 else
                   @tagVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagVersion = _oa
            end
          end
        if !_o['tagUpdateTime'].nil?
          _oa = _o['tagUpdateTime']
            if(_oa.is_a? Hash)
              @tagUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagUpdateTime.push Time.from_json(_item)
                 else
                   @tagUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagUpdateTime = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
        if !_o['policyUpdateTime'].nil?
          _oa = _o['policyUpdateTime']
            if(_oa.is_a? Hash)
              @policyUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyUpdateTime.push Time.from_json(_item)
                 else
                   @policyUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyUpdateTime = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['configs'].nil?
          _oa = _o['configs']
            if(_oa.is_a? Hash)
              @configs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configs =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configs.push Hash.from_json(_item)
                 else
                   @configs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configs = _oa
            end
          end
    end

    # constructs a RangerService from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerTag < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :owner
    # (no documentation provided)
    attr_accessor :attributes
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :options
    # (no documentation provided)
    attr_accessor :validityPeriods

    # the json hash for this RangerTag
    def to_jaxb_json_hash
      _h = super
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['options'] = options.to_jaxb_json_hash unless options.nil?
      if !validityPeriods.nil?
        _ha = Array.new
        validityPeriods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['validityPeriods'] = _ha
      end
      return _h
    end

    #initializes this RangerTag with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push Fixnum.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['options'].nil?
          _oa = _o['options']
            if(_oa.is_a? Hash)
              @options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @options =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @options.push Hash.from_json(_item)
                 else
                   @options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @options = _oa
            end
          end
        if !_o['validityPeriods'].nil?
          _oa = _o['validityPeriods']
            if(_oa.is_a? Hash)
              @validityPeriods = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validityPeriods =  Org::Apache::Ranger::Plugin::Model::RangerValiditySchedule.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validityPeriods = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validityPeriods.push Org::Apache::Ranger::Plugin::Model::RangerValiditySchedule.from_json(_item)
                 else
                   @validityPeriods.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validityPeriods = _oa
            end
          end
    end

    # constructs a RangerTag from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXString < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # String - value of member attribute &lt;b&gt;value&lt;/b&gt;.
    attr_accessor :value
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXString
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXString with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXString from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXResponse < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # int - value of member attribute &lt;b&gt;statusCode&lt;/b&gt;.
    attr_accessor :statusCode
    # String - value of member attribute &lt;b&gt;msgDesc&lt;/b&gt;.
    attr_accessor :msgDesc
    # List&lt;VXMessage&gt; - value of member attribute &lt;b&gt;messageList&lt;/b&gt;.
    attr_accessor :messageList
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXResponse
    def to_jaxb_json_hash
      _h = super
      _h['statusCode'] = statusCode.to_jaxb_json_hash unless statusCode.nil?
      _h['msgDesc'] = msgDesc.to_jaxb_json_hash unless msgDesc.nil?
      if !messageList.nil?
        _ha = Array.new
        messageList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['messageList'] = _ha
      end
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['statusCode'].nil?
          _oa = _o['statusCode']
            if(_oa.is_a? Hash)
              @statusCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @statusCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @statusCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @statusCode.push Fixnum.from_json(_item)
                 else
                   @statusCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @statusCode = _oa
            end
          end
        if !_o['msgDesc'].nil?
          _oa = _o['msgDesc']
            if(_oa.is_a? Hash)
              @msgDesc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @msgDesc =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @msgDesc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @msgDesc.push String.from_json(_item)
                 else
                   @msgDesc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @msgDesc = _oa
            end
          end
        if !_o['messageList'].nil?
          _oa = _o['messageList']
            if(_oa.is_a? Hash)
              @messageList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @messageList =  Org::Apache::Ranger::View::VXMessage.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @messageList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @messageList.push Org::Apache::Ranger::View::VXMessage.from_json(_item)
                 else
                   @messageList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @messageList = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXDataObject < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # Long - value of member attribute &lt;b&gt;id&lt;/b&gt;.
    attr_accessor :id
    # Date - value of member attribute &lt;b&gt;createDate&lt;/b&gt;.
    attr_accessor :createDate
    # Date - value of member attribute &lt;b&gt;updateDate&lt;/b&gt;.
    attr_accessor :updateDate
    # String - value of member attribute &lt;b&gt;owner&lt;/b&gt;.
    attr_accessor :owner
    # String - value of member attribute &lt;b&gt;updatedBy&lt;/b&gt;.
    attr_accessor :updatedBy
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXDataObject
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['createDate'] = createDate.to_jaxb_json_hash unless createDate.nil?
      _h['updateDate'] = updateDate.to_jaxb_json_hash unless updateDate.nil?
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      _h['updatedBy'] = updatedBy.to_jaxb_json_hash unless updatedBy.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXDataObject with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['createDate'].nil?
          _oa = _o['createDate']
            if(_oa.is_a? Hash)
              @createDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createDate.push Time.from_json(_item)
                 else
                   @createDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createDate = _oa
            end
          end
        if !_o['updateDate'].nil?
          _oa = _o['updateDate']
            if(_oa.is_a? Hash)
              @updateDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateDate.push Time.from_json(_item)
                 else
                   @updateDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateDate = _oa
            end
          end
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push String.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
        if !_o['updatedBy'].nil?
          _oa = _o['updatedBy']
            if(_oa.is_a? Hash)
              @updatedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedBy.push String.from_json(_item)
                 else
                   @updatedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedBy = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXDataObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerSecurityZone < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :auditUsers
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :services
    # (no documentation provided)
    attr_accessor :adminUsers
    # (no documentation provided)
    attr_accessor :adminUserGroups
    # (no documentation provided)
    attr_accessor :auditUserGroups
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this RangerSecurityZone
    def to_jaxb_json_hash
      _h = super
      if !auditUsers.nil?
        _ha = Array.new
        auditUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['auditUsers'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['services'] = services.to_jaxb_json_hash unless services.nil?
      if !adminUsers.nil?
        _ha = Array.new
        adminUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['adminUsers'] = _ha
      end
      if !adminUserGroups.nil?
        _ha = Array.new
        adminUserGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['adminUserGroups'] = _ha
      end
      if !auditUserGroups.nil?
        _ha = Array.new
        auditUserGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['auditUserGroups'] = _ha
      end
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this RangerSecurityZone with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['auditUsers'].nil?
          _oa = _o['auditUsers']
            if(_oa.is_a? Hash)
              @auditUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditUsers =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditUsers.push String.from_json(_item)
                 else
                   @auditUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditUsers = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['services'].nil?
          _oa = _o['services']
            if(_oa.is_a? Hash)
              @services = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @services =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @services = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @services.push Hash.from_json(_item)
                 else
                   @services.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @services = _oa
            end
          end
        if !_o['adminUsers'].nil?
          _oa = _o['adminUsers']
            if(_oa.is_a? Hash)
              @adminUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @adminUsers =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @adminUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @adminUsers.push String.from_json(_item)
                 else
                   @adminUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @adminUsers = _oa
            end
          end
        if !_o['adminUserGroups'].nil?
          _oa = _o['adminUserGroups']
            if(_oa.is_a? Hash)
              @adminUserGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @adminUserGroups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @adminUserGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @adminUserGroups.push String.from_json(_item)
                 else
                   @adminUserGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @adminUserGroups = _oa
            end
          end
        if !_o['auditUserGroups'].nil?
          _oa = _o['auditUserGroups']
            if(_oa.is_a? Hash)
              @auditUserGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditUserGroups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditUserGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditUserGroups.push String.from_json(_item)
                 else
                   @auditUserGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditUserGroups = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a RangerSecurityZone from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicy < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :zoneName
    # (no documentation provided)
    attr_accessor :serviceType
    # (no documentation provided)
    attr_accessor :policyPriority
    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :service
    # (no documentation provided)
    attr_accessor :policyType
    # (no documentation provided)
    attr_accessor :validitySchedules
    # (no documentation provided)
    attr_accessor :isAuditEnabled
    # (no documentation provided)
    attr_accessor :denyPolicyItems
    # (no documentation provided)
    attr_accessor :denyExceptions
    # (no documentation provided)
    attr_accessor :resourceSignature
    # (no documentation provided)
    attr_accessor :allowExceptions
    # (no documentation provided)
    attr_accessor :policyLabels
    # (no documentation provided)
    attr_accessor :rowFilterPolicyItems
    # (no documentation provided)
    attr_accessor :dataMaskPolicyItems
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :options
    # (no documentation provided)
    attr_accessor :policyItems
    # (no documentation provided)
    attr_accessor :name

    # the json hash for this RangerPolicy
    def to_jaxb_json_hash
      _h = super
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      _h['serviceType'] = serviceType.to_jaxb_json_hash unless serviceType.nil?
      _h['policyPriority'] = policyPriority.to_jaxb_json_hash unless policyPriority.nil?
      _h['resources'] = resources.to_jaxb_json_hash unless resources.nil?
      _h['service'] = service.to_jaxb_json_hash unless service.nil?
      _h['policyType'] = policyType.to_jaxb_json_hash unless policyType.nil?
      if !validitySchedules.nil?
        _ha = Array.new
        validitySchedules.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['validitySchedules'] = _ha
      end
      _h['isAuditEnabled'] = isAuditEnabled.to_jaxb_json_hash unless isAuditEnabled.nil?
      if !denyPolicyItems.nil?
        _ha = Array.new
        denyPolicyItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['denyPolicyItems'] = _ha
      end
      if !denyExceptions.nil?
        _ha = Array.new
        denyExceptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['denyExceptions'] = _ha
      end
      _h['resourceSignature'] = resourceSignature.to_jaxb_json_hash unless resourceSignature.nil?
      if !allowExceptions.nil?
        _ha = Array.new
        allowExceptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['allowExceptions'] = _ha
      end
      if !policyLabels.nil?
        _ha = Array.new
        policyLabels.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyLabels'] = _ha
      end
      if !rowFilterPolicyItems.nil?
        _ha = Array.new
        rowFilterPolicyItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rowFilterPolicyItems'] = _ha
      end
      if !dataMaskPolicyItems.nil?
        _ha = Array.new
        dataMaskPolicyItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['dataMaskPolicyItems'] = _ha
      end
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['options'] = options.to_jaxb_json_hash unless options.nil?
      if !policyItems.nil?
        _ha = Array.new
        policyItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyItems'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    #initializes this RangerPolicy with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['serviceType'].nil?
          _oa = _o['serviceType']
            if(_oa.is_a? Hash)
              @serviceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceType.push String.from_json(_item)
                 else
                   @serviceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceType = _oa
            end
          end
        if !_o['policyPriority'].nil?
          _oa = _o['policyPriority']
            if(_oa.is_a? Hash)
              @policyPriority = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyPriority =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyPriority = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyPriority.push Fixnum.from_json(_item)
                 else
                   @policyPriority.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyPriority = _oa
            end
          end
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Hash.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['service'].nil?
          _oa = _o['service']
            if(_oa.is_a? Hash)
              @service = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @service =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @service = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @service.push String.from_json(_item)
                 else
                   @service.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @service = _oa
            end
          end
        if !_o['policyType'].nil?
          _oa = _o['policyType']
            if(_oa.is_a? Hash)
              @policyType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyType.push Fixnum.from_json(_item)
                 else
                   @policyType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyType = _oa
            end
          end
        if !_o['validitySchedules'].nil?
          _oa = _o['validitySchedules']
            if(_oa.is_a? Hash)
              @validitySchedules = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validitySchedules =  Org::Apache::Ranger::Plugin::Model::RangerValiditySchedule.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validitySchedules = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validitySchedules.push Org::Apache::Ranger::Plugin::Model::RangerValiditySchedule.from_json(_item)
                 else
                   @validitySchedules.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validitySchedules = _oa
            end
          end
        if !_o['isAuditEnabled'].nil?
          _oa = _o['isAuditEnabled']
            if(_oa.is_a? Hash)
              @isAuditEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAuditEnabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAuditEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAuditEnabled.push Boolean.from_json(_item)
                 else
                   @isAuditEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAuditEnabled = _oa
            end
          end
        if !_o['denyPolicyItems'].nil?
          _oa = _o['denyPolicyItems']
            if(_oa.is_a? Hash)
              @denyPolicyItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @denyPolicyItems =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @denyPolicyItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @denyPolicyItems.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_item)
                 else
                   @denyPolicyItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @denyPolicyItems = _oa
            end
          end
        if !_o['denyExceptions'].nil?
          _oa = _o['denyExceptions']
            if(_oa.is_a? Hash)
              @denyExceptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @denyExceptions =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @denyExceptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @denyExceptions.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_item)
                 else
                   @denyExceptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @denyExceptions = _oa
            end
          end
        if !_o['resourceSignature'].nil?
          _oa = _o['resourceSignature']
            if(_oa.is_a? Hash)
              @resourceSignature = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceSignature =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceSignature = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceSignature.push String.from_json(_item)
                 else
                   @resourceSignature.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceSignature = _oa
            end
          end
        if !_o['allowExceptions'].nil?
          _oa = _o['allowExceptions']
            if(_oa.is_a? Hash)
              @allowExceptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allowExceptions =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allowExceptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allowExceptions.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_item)
                 else
                   @allowExceptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allowExceptions = _oa
            end
          end
        if !_o['policyLabels'].nil?
          _oa = _o['policyLabels']
            if(_oa.is_a? Hash)
              @policyLabels = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyLabels =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyLabels = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyLabels.push String.from_json(_item)
                 else
                   @policyLabels.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyLabels = _oa
            end
          end
        if !_o['rowFilterPolicyItems'].nil?
          _oa = _o['rowFilterPolicyItems']
            if(_oa.is_a? Hash)
              @rowFilterPolicyItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rowFilterPolicyItems =  Org::Apache::Ranger::Plugin::Model::RangerRowFilterPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rowFilterPolicyItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rowFilterPolicyItems.push Org::Apache::Ranger::Plugin::Model::RangerRowFilterPolicyItem.from_json(_item)
                 else
                   @rowFilterPolicyItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rowFilterPolicyItems = _oa
            end
          end
        if !_o['dataMaskPolicyItems'].nil?
          _oa = _o['dataMaskPolicyItems']
            if(_oa.is_a? Hash)
              @dataMaskPolicyItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskPolicyItems =  Org::Apache::Ranger::Plugin::Model::RangerDataMaskPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskPolicyItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskPolicyItems.push Org::Apache::Ranger::Plugin::Model::RangerDataMaskPolicyItem.from_json(_item)
                 else
                   @dataMaskPolicyItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskPolicyItems = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['options'].nil?
          _oa = _o['options']
            if(_oa.is_a? Hash)
              @options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @options =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @options.push Hash.from_json(_item)
                 else
                   @options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @options = _oa
            end
          end
        if !_o['policyItems'].nil?
          _oa = _o['policyItems']
            if(_oa.is_a? Hash)
              @policyItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyItems =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyItems.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_item)
                 else
                   @policyItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyItems = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
    end

    # constructs a RangerPolicy from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerDataMaskPolicyItem < Org::Apache::Ranger::Plugin::Model::RangerPolicyItem 

    # (no documentation provided)
    attr_accessor :dataMaskInfo

    # the json hash for this RangerDataMaskPolicyItem
    def to_jaxb_json_hash
      _h = super
      _h['dataMaskInfo'] = dataMaskInfo.to_jaxb_json_hash unless dataMaskInfo.nil?
      return _h
    end

    #initializes this RangerDataMaskPolicyItem with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['dataMaskInfo'].nil?
          _oa = _o['dataMaskInfo']
            if(_oa.is_a? Hash)
              @dataMaskInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskInfo =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItemDataMaskInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskInfo.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItemDataMaskInfo.from_json(_item)
                 else
                   @dataMaskInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskInfo = _oa
            end
          end
    end

    # constructs a RangerDataMaskPolicyItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class VTrxLogAttr < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # the attribUserFriendlyName
    attr_accessor :attribUserFriendlyName
    # the isEnum
    attr_accessor :enum
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VTrxLogAttr
    def to_jaxb_json_hash
      _h = super
      _h['attribUserFriendlyName'] = attribUserFriendlyName.to_jaxb_json_hash unless attribUserFriendlyName.nil?
      _h['enum'] = enum.to_jaxb_json_hash unless enum.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VTrxLogAttr with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['attribUserFriendlyName'].nil?
          _oa = _o['attribUserFriendlyName']
            if(_oa.is_a? Hash)
              @attribUserFriendlyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attribUserFriendlyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attribUserFriendlyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attribUserFriendlyName.push String.from_json(_item)
                 else
                   @attribUserFriendlyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attribUserFriendlyName = _oa
            end
          end
        if !_o['enum'].nil?
          _oa = _o['enum']
            if(_oa.is_a? Hash)
              @enum = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enum =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enum = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enum.push Boolean.from_json(_item)
                 else
                   @enum.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enum = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VTrxLogAttr from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class VEnum < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # String - value of member attribute &lt;b&gt;enumName&lt;/b&gt;.
    attr_accessor :enumName
    # List&lt;VEnumElement&gt; - value of member attribute
    # &lt;b&gt;elementList&lt;/b&gt;.
    attr_accessor :elementList
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VEnum
    def to_jaxb_json_hash
      _h = super
      _h['enumName'] = enumName.to_jaxb_json_hash unless enumName.nil?
      if !elementList.nil?
        _ha = Array.new
        elementList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['elementList'] = _ha
      end
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VEnum with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['enumName'].nil?
          _oa = _o['enumName']
            if(_oa.is_a? Hash)
              @enumName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enumName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enumName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enumName.push String.from_json(_item)
                 else
                   @enumName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enumName = _oa
            end
          end
        if !_o['elementList'].nil?
          _oa = _o['elementList']
            if(_oa.is_a? Hash)
              @elementList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elementList =  Org::Apache::Ranger::Common::View::VEnumElement.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elementList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elementList.push Org::Apache::Ranger::Common::View::VEnumElement.from_json(_item)
                 else
                   @elementList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elementList = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VEnum from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXMessage < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # String - value of member attribute &lt;b&gt;rbKey&lt;/b&gt;.
    attr_accessor :rbKey
    # String - value of member attribute &lt;b&gt;message&lt;/b&gt;.
    attr_accessor :message
    # Long - value of member attribute &lt;b&gt;objectId&lt;/b&gt;.
    attr_accessor :objectId
    # String - value of member attribute &lt;b&gt;fieldName&lt;/b&gt;.
    attr_accessor :fieldName
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXMessage
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['rbKey'] = rbKey.to_jaxb_json_hash unless rbKey.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      _h['objectId'] = objectId.to_jaxb_json_hash unless objectId.nil?
      _h['fieldName'] = fieldName.to_jaxb_json_hash unless fieldName.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXMessage with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['rbKey'].nil?
          _oa = _o['rbKey']
            if(_oa.is_a? Hash)
              @rbKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKey.push String.from_json(_item)
                 else
                   @rbKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKey = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
        if !_o['objectId'].nil?
          _oa = _o['objectId']
            if(_oa.is_a? Hash)
              @objectId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectId.push Bignum.from_json(_item)
                 else
                   @objectId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectId = _oa
            end
          end
        if !_o['fieldName'].nil?
          _oa = _o['fieldName']
            if(_oa.is_a? Hash)
              @fieldName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fieldName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fieldName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fieldName.push String.from_json(_item)
                 else
                   @fieldName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fieldName = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXMessage from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupUser < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # Long - value of member attribute &lt;b&gt;parentGroupId&lt;/b&gt;.
    attr_accessor :parentGroupId
    # Long - value of member attribute &lt;b&gt;userId&lt;/b&gt;.
    attr_accessor :userId
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXGroupUser
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['parentGroupId'] = parentGroupId.to_jaxb_json_hash unless parentGroupId.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXGroupUser with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['parentGroupId'].nil?
          _oa = _o['parentGroupId']
            if(_oa.is_a? Hash)
              @parentGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentGroupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentGroupId.push Bignum.from_json(_item)
                 else
                   @parentGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentGroupId = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXGroupUser from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupUserInfo < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :xgroupInfo
    # (no documentation provided)
    attr_accessor :xuserInfo

    # the json hash for this VXGroupUserInfo
    def to_jaxb_json_hash
      _h = super
      _h['xgroupInfo'] = xgroupInfo.to_jaxb_json_hash unless xgroupInfo.nil?
      if !xuserInfo.nil?
        _ha = Array.new
        xuserInfo.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['xuserInfo'] = _ha
      end
      return _h
    end

    #initializes this VXGroupUserInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['xgroupInfo'].nil?
          _oa = _o['xgroupInfo']
            if(_oa.is_a? Hash)
              @xgroupInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xgroupInfo =  Org::Apache::Ranger::View::VXGroup.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xgroupInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xgroupInfo.push Org::Apache::Ranger::View::VXGroup.from_json(_item)
                 else
                   @xgroupInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xgroupInfo = _oa
            end
          end
        if !_o['xuserInfo'].nil?
          _oa = _o['xuserInfo']
            if(_oa.is_a? Hash)
              @xuserInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xuserInfo =  Org::Apache::Ranger::View::VXUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xuserInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xuserInfo.push Org::Apache::Ranger::View::VXUser.from_json(_item)
                 else
                   @xuserInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xuserInfo = _oa
            end
          end
    end

    # constructs a VXGroupUserInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupPermissionList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXGroupPermission

    # the json hash for this VXGroupPermissionList
    def to_jaxb_json_hash
      _h = super
      if !vXGroupPermission.nil?
        _ha = Array.new
        vXGroupPermission.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXGroupPermission'] = _ha
      end
      return _h
    end

    #initializes this VXGroupPermissionList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXGroupPermission'].nil?
          _oa = _o['vXGroupPermission']
            if(_oa.is_a? Hash)
              @vXGroupPermission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXGroupPermission =  Org::Apache::Ranger::View::VXGroupPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXGroupPermission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXGroupPermission.push Org::Apache::Ranger::View::VXGroupPermission.from_json(_item)
                 else
                   @vXGroupPermission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXGroupPermission = _oa
            end
          end
    end

    # constructs a VXGroupPermissionList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXRepositoryList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXRepositories

    # the json hash for this VXRepositoryList
    def to_jaxb_json_hash
      _h = super
      if !vXRepositories.nil?
        _ha = Array.new
        vXRepositories.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXRepositories'] = _ha
      end
      return _h
    end

    #initializes this VXRepositoryList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXRepositories'].nil?
          _oa = _o['vXRepositories']
            if(_oa.is_a? Hash)
              @vXRepositories = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXRepositories =  Org::Apache::Ranger::View::VXRepository.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXRepositories = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXRepositories.push Org::Apache::Ranger::View::VXRepository.from_json(_item)
                 else
                   @vXRepositories.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXRepositories = _oa
            end
          end
    end

    # constructs a VXRepositoryList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUser < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # String - value of member attribute &lt;b&gt;firstName&lt;/b&gt;.
    attr_accessor :firstName
    # String - value of member attribute &lt;b&gt;lastName&lt;/b&gt;.
    attr_accessor :lastName
    # String - value of member attribute &lt;b&gt;emailAddress&lt;/b&gt;.
    attr_accessor :emailAddress
    # String - value of member attribute &lt;b&gt;password&lt;/b&gt;.
    attr_accessor :password
    # String - value of member attribute &lt;b&gt;description&lt;/b&gt;.
    attr_accessor :description
    # Long - value of member attribute &lt;b&gt;credStoreId&lt;/b&gt;.
    attr_accessor :credStoreId
    # Collection&lt;Long&gt; - value of member attribute &lt;b&gt;groupIdList&lt;/b&gt;.
    attr_accessor :groupIdList
    # (no documentation provided)
    attr_accessor :myClassType
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :isVisible
    # (no documentation provided)
    attr_accessor :userSource
    # Collection&lt;String&gt; - value of member attribute &lt;b&gt;userRoleList&lt;/b&gt;.
    attr_accessor :userRoleList
    # (no documentation provided)
    attr_accessor :groupNameList

    # the json hash for this VXUser
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['credStoreId'] = credStoreId.to_jaxb_json_hash unless credStoreId.nil?
      if !groupIdList.nil?
        _ha = Array.new
        groupIdList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupIdList'] = _ha
      end
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['isVisible'] = isVisible.to_jaxb_json_hash unless isVisible.nil?
      _h['userSource'] = userSource.to_jaxb_json_hash unless userSource.nil?
      if !userRoleList.nil?
        _ha = Array.new
        userRoleList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userRoleList'] = _ha
      end
      if !groupNameList.nil?
        _ha = Array.new
        groupNameList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupNameList'] = _ha
      end
      return _h
    end

    #initializes this VXUser with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['credStoreId'].nil?
          _oa = _o['credStoreId']
            if(_oa.is_a? Hash)
              @credStoreId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @credStoreId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @credStoreId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @credStoreId.push Bignum.from_json(_item)
                 else
                   @credStoreId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @credStoreId = _oa
            end
          end
        if !_o['groupIdList'].nil?
          _oa = _o['groupIdList']
            if(_oa.is_a? Hash)
              @groupIdList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupIdList =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupIdList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupIdList.push Bignum.from_json(_item)
                 else
                   @groupIdList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupIdList = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push Fixnum.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['isVisible'].nil?
          _oa = _o['isVisible']
            if(_oa.is_a? Hash)
              @isVisible = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isVisible =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isVisible = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isVisible.push Fixnum.from_json(_item)
                 else
                   @isVisible.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isVisible = _oa
            end
          end
        if !_o['userSource'].nil?
          _oa = _o['userSource']
            if(_oa.is_a? Hash)
              @userSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSource =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSource.push Fixnum.from_json(_item)
                 else
                   @userSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSource = _oa
            end
          end
        if !_o['userRoleList'].nil?
          _oa = _o['userRoleList']
            if(_oa.is_a? Hash)
              @userRoleList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userRoleList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userRoleList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userRoleList.push String.from_json(_item)
                 else
                   @userRoleList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userRoleList = _oa
            end
          end
        if !_o['groupNameList'].nil?
          _oa = _o['groupNameList']
            if(_oa.is_a? Hash)
              @groupNameList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupNameList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupNameList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupNameList.push String.from_json(_item)
                 else
                   @groupNameList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupNameList = _oa
            end
          end
    end

    # constructs a VXUser from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyExportAudit < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;clientIP&lt;/b&gt;.
    attr_accessor :clientIP
    # String - value of member attribute &lt;b&gt;agentId&lt;/b&gt;.
    attr_accessor :agentId
    # Long - value of member attribute &lt;b&gt;requestedEpoch&lt;/b&gt;.
    attr_accessor :requestedEpoch
    # Date - value of member attribute &lt;b&gt;lastUpdated&lt;/b&gt;.
    attr_accessor :lastUpdated
    # String - value of member attribute &lt;b&gt;repositoryName&lt;/b&gt;.
    attr_accessor :repositoryName
    # String - value of member attribute &lt;b&gt;exportedJson&lt;/b&gt;.
    attr_accessor :exportedJson
    # int - value of member attribute &lt;b&gt;httpRetCode&lt;/b&gt;.
    attr_accessor :httpRetCode
    # (no documentation provided)
    attr_accessor :syncStatus
    # (no documentation provided)
    attr_accessor :clusterName
    # (no documentation provided)
    attr_accessor :zoneName
    # (no documentation provided)
    attr_accessor :policyVersion
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXPolicyExportAudit
    def to_jaxb_json_hash
      _h = super
      _h['clientIP'] = clientIP.to_jaxb_json_hash unless clientIP.nil?
      _h['agentId'] = agentId.to_jaxb_json_hash unless agentId.nil?
      _h['requestedEpoch'] = requestedEpoch.to_jaxb_json_hash unless requestedEpoch.nil?
      _h['lastUpdated'] = lastUpdated.to_jaxb_json_hash unless lastUpdated.nil?
      _h['repositoryName'] = repositoryName.to_jaxb_json_hash unless repositoryName.nil?
      _h['exportedJson'] = exportedJson.to_jaxb_json_hash unless exportedJson.nil?
      _h['httpRetCode'] = httpRetCode.to_jaxb_json_hash unless httpRetCode.nil?
      _h['syncStatus'] = syncStatus.to_jaxb_json_hash unless syncStatus.nil?
      _h['clusterName'] = clusterName.to_jaxb_json_hash unless clusterName.nil?
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXPolicyExportAudit with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['clientIP'].nil?
          _oa = _o['clientIP']
            if(_oa.is_a? Hash)
              @clientIP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientIP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientIP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientIP.push String.from_json(_item)
                 else
                   @clientIP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientIP = _oa
            end
          end
        if !_o['agentId'].nil?
          _oa = _o['agentId']
            if(_oa.is_a? Hash)
              @agentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @agentId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @agentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @agentId.push String.from_json(_item)
                 else
                   @agentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @agentId = _oa
            end
          end
        if !_o['requestedEpoch'].nil?
          _oa = _o['requestedEpoch']
            if(_oa.is_a? Hash)
              @requestedEpoch = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestedEpoch =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestedEpoch = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestedEpoch.push Bignum.from_json(_item)
                 else
                   @requestedEpoch.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestedEpoch = _oa
            end
          end
        if !_o['lastUpdated'].nil?
          _oa = _o['lastUpdated']
            if(_oa.is_a? Hash)
              @lastUpdated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastUpdated =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastUpdated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastUpdated.push Time.from_json(_item)
                 else
                   @lastUpdated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastUpdated = _oa
            end
          end
        if !_o['repositoryName'].nil?
          _oa = _o['repositoryName']
            if(_oa.is_a? Hash)
              @repositoryName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repositoryName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repositoryName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repositoryName.push String.from_json(_item)
                 else
                   @repositoryName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repositoryName = _oa
            end
          end
        if !_o['exportedJson'].nil?
          _oa = _o['exportedJson']
            if(_oa.is_a? Hash)
              @exportedJson = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @exportedJson =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @exportedJson = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @exportedJson.push String.from_json(_item)
                 else
                   @exportedJson.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @exportedJson = _oa
            end
          end
        if !_o['httpRetCode'].nil?
          _oa = _o['httpRetCode']
            if(_oa.is_a? Hash)
              @httpRetCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @httpRetCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @httpRetCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @httpRetCode.push Fixnum.from_json(_item)
                 else
                   @httpRetCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @httpRetCode = _oa
            end
          end
        if !_o['syncStatus'].nil?
          _oa = _o['syncStatus']
            if(_oa.is_a? Hash)
              @syncStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncStatus.push String.from_json(_item)
                 else
                   @syncStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncStatus = _oa
            end
          end
        if !_o['clusterName'].nil?
          _oa = _o['clusterName']
            if(_oa.is_a? Hash)
              @clusterName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clusterName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clusterName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clusterName.push String.from_json(_item)
                 else
                   @clusterName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clusterName = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXPolicyExportAudit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXKmsKey < Org::Apache::Ranger::View::VXDataObject 

    # the name
    attr_accessor :name
    # the cipher
    attr_accessor :cipher
    # the length
    attr_accessor :length
    # the description
    attr_accessor :description
    # the version
    attr_accessor :versions
    # the material
    attr_accessor :material
    # the versionName
    attr_accessor :versionName
    # the created
    attr_accessor :created
    # the attributes
    attr_accessor :attributes
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXKmsKey
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['cipher'] = cipher.to_jaxb_json_hash unless cipher.nil?
      _h['length'] = length.to_jaxb_json_hash unless length.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['versions'] = versions.to_jaxb_json_hash unless versions.nil?
      _h['material'] = material.to_jaxb_json_hash unless material.nil?
      _h['versionName'] = versionName.to_jaxb_json_hash unless versionName.nil?
      _h['created'] = created.to_jaxb_json_hash unless created.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXKmsKey with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['cipher'].nil?
          _oa = _o['cipher']
            if(_oa.is_a? Hash)
              @cipher = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cipher =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cipher = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cipher.push String.from_json(_item)
                 else
                   @cipher.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cipher = _oa
            end
          end
        if !_o['length'].nil?
          _oa = _o['length']
            if(_oa.is_a? Hash)
              @length = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @length =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @length = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @length.push Fixnum.from_json(_item)
                 else
                   @length.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @length = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['versions'].nil?
          _oa = _o['versions']
            if(_oa.is_a? Hash)
              @versions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versions =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versions.push Fixnum.from_json(_item)
                 else
                   @versions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versions = _oa
            end
          end
        if !_o['material'].nil?
          _oa = _o['material']
            if(_oa.is_a? Hash)
              @material = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @material =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @material = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @material.push String.from_json(_item)
                 else
                   @material.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @material = _oa
            end
          end
        if !_o['versionName'].nil?
          _oa = _o['versionName']
            if(_oa.is_a? Hash)
              @versionName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionName.push String.from_json(_item)
                 else
                   @versionName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionName = _oa
            end
          end
        if !_o['created'].nil?
          _oa = _o['created']
            if(_oa.is_a? Hash)
              @created = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @created =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @created = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @created.push Bignum.from_json(_item)
                 else
                   @created.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @created = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXKmsKey from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupPermission < Org::Apache::Ranger::View::VXDataObject 

    # the id
    attr_accessor :id
    # the groupId
    attr_accessor :groupId
    # the groupName
    attr_accessor :groupName
    # the moduleId
    attr_accessor :moduleId
    # the isAllowed
    attr_accessor :isAllowed
    # (no documentation provided)
    attr_accessor :moduleName
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXGroupPermission
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['groupId'] = groupId.to_jaxb_json_hash unless groupId.nil?
      _h['groupName'] = groupName.to_jaxb_json_hash unless groupName.nil?
      _h['moduleId'] = moduleId.to_jaxb_json_hash unless moduleId.nil?
      _h['isAllowed'] = isAllowed.to_jaxb_json_hash unless isAllowed.nil?
      _h['moduleName'] = moduleName.to_jaxb_json_hash unless moduleName.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXGroupPermission with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['groupId'].nil?
          _oa = _o['groupId']
            if(_oa.is_a? Hash)
              @groupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupId.push Bignum.from_json(_item)
                 else
                   @groupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupId = _oa
            end
          end
        if !_o['groupName'].nil?
          _oa = _o['groupName']
            if(_oa.is_a? Hash)
              @groupName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupName.push String.from_json(_item)
                 else
                   @groupName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupName = _oa
            end
          end
        if !_o['moduleId'].nil?
          _oa = _o['moduleId']
            if(_oa.is_a? Hash)
              @moduleId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleId.push Bignum.from_json(_item)
                 else
                   @moduleId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleId = _oa
            end
          end
        if !_o['isAllowed'].nil?
          _oa = _o['isAllowed']
            if(_oa.is_a? Hash)
              @isAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAllowed =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAllowed.push Fixnum.from_json(_item)
                 else
                   @isAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAllowed = _oa
            end
          end
        if !_o['moduleName'].nil?
          _oa = _o['moduleName']
            if(_oa.is_a? Hash)
              @moduleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleName.push String.from_json(_item)
                 else
                   @moduleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleName = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXGroupPermission from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXResourceList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXResources

    # the json hash for this VXResourceList
    def to_jaxb_json_hash
      _h = super
      if !vXResources.nil?
        _ha = Array.new
        vXResources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXResources'] = _ha
      end
      return _h
    end

    #initializes this VXResourceList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXResources'].nil?
          _oa = _o['vXResources']
            if(_oa.is_a? Hash)
              @vXResources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXResources =  Org::Apache::Ranger::View::VXResource.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXResources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXResources.push Org::Apache::Ranger::View::VXResource.from_json(_item)
                 else
                   @vXResources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXResources = _oa
            end
          end
    end

    # constructs a VXResourceList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerServiceList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :services

    # the json hash for this RangerServiceList
    def to_jaxb_json_hash
      _h = super
      if !services.nil?
        _ha = Array.new
        services.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['services'] = _ha
      end
      return _h
    end

    #initializes this RangerServiceList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['services'].nil?
          _oa = _o['services']
            if(_oa.is_a? Hash)
              @services = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @services =  Org::Apache::Ranger::Plugin::Model::RangerService.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @services = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @services.push Org::Apache::Ranger::Plugin::Model::RangerService.from_json(_item)
                 else
                   @services.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @services = _oa
            end
          end
    end

    # constructs a RangerServiceList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPermMap < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;permGroup&lt;/b&gt;.
    attr_accessor :permGroup
    # Long - value of member attribute &lt;b&gt;resourceId&lt;/b&gt;.
    attr_accessor :resourceId
    # Long - value of member attribute &lt;b&gt;groupId&lt;/b&gt;.
    attr_accessor :groupId
    # Long - value of member attribute &lt;b&gt;userId&lt;/b&gt;.
    attr_accessor :userId
    # int - value of member attribute &lt;b&gt;permFor&lt;/b&gt;.
    attr_accessor :permFor
    # int - value of member attribute &lt;b&gt;permType&lt;/b&gt;.
    attr_accessor :permType
    # boolean - value of member attribute &lt;b&gt;grantOrRevoke&lt;/b&gt;.
    attr_accessor :grantOrRevoke
    # String - value of member attribute &lt;b&gt;groupName&lt;/b&gt;.
    attr_accessor :groupName
    # String - value of member attribute &lt;b&gt;userName&lt;/b&gt;.
    attr_accessor :userName
    # int - value of member attribute &lt;b&gt;isRecursive&lt;/b&gt;.
    attr_accessor :isRecursive
    # boolean - value of member attribute &lt;b&gt;isWildCard&lt;/b&gt;.
    attr_accessor :isWildCard
    # (no documentation provided)
    attr_accessor :ipAddress
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXPermMap
    def to_jaxb_json_hash
      _h = super
      _h['permGroup'] = permGroup.to_jaxb_json_hash unless permGroup.nil?
      _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
      _h['groupId'] = groupId.to_jaxb_json_hash unless groupId.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['permFor'] = permFor.to_jaxb_json_hash unless permFor.nil?
      _h['permType'] = permType.to_jaxb_json_hash unless permType.nil?
      _h['grantOrRevoke'] = grantOrRevoke.to_jaxb_json_hash unless grantOrRevoke.nil?
      _h['groupName'] = groupName.to_jaxb_json_hash unless groupName.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['isWildCard'] = isWildCard.to_jaxb_json_hash unless isWildCard.nil?
      _h['ipAddress'] = ipAddress.to_jaxb_json_hash unless ipAddress.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXPermMap with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['permGroup'].nil?
          _oa = _o['permGroup']
            if(_oa.is_a? Hash)
              @permGroup = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permGroup =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permGroup = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permGroup.push String.from_json(_item)
                 else
                   @permGroup.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permGroup = _oa
            end
          end
        if !_o['resourceId'].nil?
          _oa = _o['resourceId']
            if(_oa.is_a? Hash)
              @resourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceId.push Bignum.from_json(_item)
                 else
                   @resourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceId = _oa
            end
          end
        if !_o['groupId'].nil?
          _oa = _o['groupId']
            if(_oa.is_a? Hash)
              @groupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupId.push Bignum.from_json(_item)
                 else
                   @groupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupId = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['permFor'].nil?
          _oa = _o['permFor']
            if(_oa.is_a? Hash)
              @permFor = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permFor =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permFor = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permFor.push Fixnum.from_json(_item)
                 else
                   @permFor.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permFor = _oa
            end
          end
        if !_o['permType'].nil?
          _oa = _o['permType']
            if(_oa.is_a? Hash)
              @permType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permType.push Fixnum.from_json(_item)
                 else
                   @permType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permType = _oa
            end
          end
        if !_o['grantOrRevoke'].nil?
          _oa = _o['grantOrRevoke']
            if(_oa.is_a? Hash)
              @grantOrRevoke = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grantOrRevoke =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grantOrRevoke = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grantOrRevoke.push Boolean.from_json(_item)
                 else
                   @grantOrRevoke.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grantOrRevoke = _oa
            end
          end
        if !_o['groupName'].nil?
          _oa = _o['groupName']
            if(_oa.is_a? Hash)
              @groupName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupName.push String.from_json(_item)
                 else
                   @groupName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupName = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Fixnum.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['isWildCard'].nil?
          _oa = _o['isWildCard']
            if(_oa.is_a? Hash)
              @isWildCard = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isWildCard =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isWildCard = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isWildCard.push Boolean.from_json(_item)
                 else
                   @isWildCard.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isWildCard = _oa
            end
          end
        if !_o['ipAddress'].nil?
          _oa = _o['ipAddress']
            if(_oa.is_a? Hash)
              @ipAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipAddress.push String.from_json(_item)
                 else
                   @ipAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipAddress = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXPermMap from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuditMap < Org::Apache::Ranger::View::VXDataObject 

    # Long - value of member attribute &lt;b&gt;resourceId&lt;/b&gt;.
    attr_accessor :resourceId
    # Long - value of member attribute &lt;b&gt;groupId&lt;/b&gt;.
    attr_accessor :groupId
    # Long - value of member attribute &lt;b&gt;userId&lt;/b&gt;.
    attr_accessor :userId
    # int - value of member attribute &lt;b&gt;auditType&lt;/b&gt;.
    attr_accessor :auditType
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXAuditMap
    def to_jaxb_json_hash
      _h = super
      _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
      _h['groupId'] = groupId.to_jaxb_json_hash unless groupId.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['auditType'] = auditType.to_jaxb_json_hash unless auditType.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXAuditMap with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['resourceId'].nil?
          _oa = _o['resourceId']
            if(_oa.is_a? Hash)
              @resourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceId.push Bignum.from_json(_item)
                 else
                   @resourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceId = _oa
            end
          end
        if !_o['groupId'].nil?
          _oa = _o['groupId']
            if(_oa.is_a? Hash)
              @groupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupId.push Bignum.from_json(_item)
                 else
                   @groupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupId = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['auditType'].nil?
          _oa = _o['auditType']
            if(_oa.is_a? Hash)
              @auditType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditType.push Fixnum.from_json(_item)
                 else
                   @auditType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditType = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXAuditMap from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXTrxLogList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXTrxLogs

    # the json hash for this VXTrxLogList
    def to_jaxb_json_hash
      _h = super
      if !vXTrxLogs.nil?
        _ha = Array.new
        vXTrxLogs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXTrxLogs'] = _ha
      end
      return _h
    end

    #initializes this VXTrxLogList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXTrxLogs'].nil?
          _oa = _o['vXTrxLogs']
            if(_oa.is_a? Hash)
              @vXTrxLogs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXTrxLogs =  Org::Apache::Ranger::View::VXTrxLog.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXTrxLogs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXTrxLogs.push Org::Apache::Ranger::View::VXTrxLog.from_json(_item)
                 else
                   @vXTrxLogs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXTrxLogs = _oa
            end
          end
    end

    # constructs a VXTrxLogList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuthSession < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;loginId&lt;/b&gt;.
    attr_accessor :loginId
    # Long - value of member attribute &lt;b&gt;userId&lt;/b&gt;.
    attr_accessor :userId
    # String - value of member attribute &lt;b&gt;emailAddress&lt;/b&gt;.
    attr_accessor :emailAddress
    # boolean - value of member attribute &lt;b&gt;isTestUser&lt;/b&gt;.
    attr_accessor :isTestUser
    # String - value of member attribute &lt;b&gt;firstName&lt;/b&gt;.
    attr_accessor :firstName
    # String - value of member attribute &lt;b&gt;lastName&lt;/b&gt;.
    attr_accessor :lastName
    # String - value of member attribute &lt;b&gt;publicScreenName&lt;/b&gt;.
    attr_accessor :publicScreenName
    # String - value of member attribute &lt;b&gt;familyScreenName&lt;/b&gt;.
    attr_accessor :familyScreenName
    # Date - value of member attribute &lt;b&gt;authTime&lt;/b&gt;.
    attr_accessor :authTime
    # int - value of member attribute &lt;b&gt;authStatus&lt;/b&gt;.
    attr_accessor :authStatus
    # int - value of member attribute &lt;b&gt;authType&lt;/b&gt;.
    attr_accessor :authType
    # int - value of member attribute &lt;b&gt;authProvider&lt;/b&gt;.
    attr_accessor :authProvider
    # int - value of member attribute &lt;b&gt;deviceType&lt;/b&gt;.
    attr_accessor :deviceType
    # String - value of member attribute &lt;b&gt;requestIP&lt;/b&gt;.
    attr_accessor :requestIP
    # String - value of member attribute &lt;b&gt;cityName&lt;/b&gt;.
    attr_accessor :cityName
    # String - value of member attribute &lt;b&gt;stateName&lt;/b&gt;.
    attr_accessor :stateName
    # String - value of member attribute &lt;b&gt;countryName&lt;/b&gt;.
    attr_accessor :countryName
    # String - value of member attribute &lt;b&gt;requestUserAgent&lt;/b&gt;.
    attr_accessor :requestUserAgent
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXAuthSession
    def to_jaxb_json_hash
      _h = super
      _h['loginId'] = loginId.to_jaxb_json_hash unless loginId.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['isTestUser'] = isTestUser.to_jaxb_json_hash unless isTestUser.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['publicScreenName'] = publicScreenName.to_jaxb_json_hash unless publicScreenName.nil?
      _h['familyScreenName'] = familyScreenName.to_jaxb_json_hash unless familyScreenName.nil?
      _h['authTime'] = authTime.to_jaxb_json_hash unless authTime.nil?
      _h['authStatus'] = authStatus.to_jaxb_json_hash unless authStatus.nil?
      _h['authType'] = authType.to_jaxb_json_hash unless authType.nil?
      _h['authProvider'] = authProvider.to_jaxb_json_hash unless authProvider.nil?
      _h['deviceType'] = deviceType.to_jaxb_json_hash unless deviceType.nil?
      _h['requestIP'] = requestIP.to_jaxb_json_hash unless requestIP.nil?
      _h['cityName'] = cityName.to_jaxb_json_hash unless cityName.nil?
      _h['stateName'] = stateName.to_jaxb_json_hash unless stateName.nil?
      _h['countryName'] = countryName.to_jaxb_json_hash unless countryName.nil?
      _h['requestUserAgent'] = requestUserAgent.to_jaxb_json_hash unless requestUserAgent.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXAuthSession with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['loginId'].nil?
          _oa = _o['loginId']
            if(_oa.is_a? Hash)
              @loginId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginId.push String.from_json(_item)
                 else
                   @loginId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginId = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['isTestUser'].nil?
          _oa = _o['isTestUser']
            if(_oa.is_a? Hash)
              @isTestUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isTestUser =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isTestUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isTestUser.push Boolean.from_json(_item)
                 else
                   @isTestUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isTestUser = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['publicScreenName'].nil?
          _oa = _o['publicScreenName']
            if(_oa.is_a? Hash)
              @publicScreenName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicScreenName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicScreenName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicScreenName.push String.from_json(_item)
                 else
                   @publicScreenName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicScreenName = _oa
            end
          end
        if !_o['familyScreenName'].nil?
          _oa = _o['familyScreenName']
            if(_oa.is_a? Hash)
              @familyScreenName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @familyScreenName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @familyScreenName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @familyScreenName.push String.from_json(_item)
                 else
                   @familyScreenName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @familyScreenName = _oa
            end
          end
        if !_o['authTime'].nil?
          _oa = _o['authTime']
            if(_oa.is_a? Hash)
              @authTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authTime.push Time.from_json(_item)
                 else
                   @authTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authTime = _oa
            end
          end
        if !_o['authStatus'].nil?
          _oa = _o['authStatus']
            if(_oa.is_a? Hash)
              @authStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authStatus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authStatus.push Fixnum.from_json(_item)
                 else
                   @authStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authStatus = _oa
            end
          end
        if !_o['authType'].nil?
          _oa = _o['authType']
            if(_oa.is_a? Hash)
              @authType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authType.push Fixnum.from_json(_item)
                 else
                   @authType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authType = _oa
            end
          end
        if !_o['authProvider'].nil?
          _oa = _o['authProvider']
            if(_oa.is_a? Hash)
              @authProvider = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authProvider =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authProvider = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authProvider.push Fixnum.from_json(_item)
                 else
                   @authProvider.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authProvider = _oa
            end
          end
        if !_o['deviceType'].nil?
          _oa = _o['deviceType']
            if(_oa.is_a? Hash)
              @deviceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deviceType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deviceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deviceType.push Fixnum.from_json(_item)
                 else
                   @deviceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deviceType = _oa
            end
          end
        if !_o['requestIP'].nil?
          _oa = _o['requestIP']
            if(_oa.is_a? Hash)
              @requestIP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestIP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestIP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestIP.push String.from_json(_item)
                 else
                   @requestIP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestIP = _oa
            end
          end
        if !_o['cityName'].nil?
          _oa = _o['cityName']
            if(_oa.is_a? Hash)
              @cityName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cityName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cityName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cityName.push String.from_json(_item)
                 else
                   @cityName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cityName = _oa
            end
          end
        if !_o['stateName'].nil?
          _oa = _o['stateName']
            if(_oa.is_a? Hash)
              @stateName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stateName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stateName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stateName.push String.from_json(_item)
                 else
                   @stateName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stateName = _oa
            end
          end
        if !_o['countryName'].nil?
          _oa = _o['countryName']
            if(_oa.is_a? Hash)
              @countryName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @countryName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @countryName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @countryName.push String.from_json(_item)
                 else
                   @countryName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @countryName = _oa
            end
          end
        if !_o['requestUserAgent'].nil?
          _oa = _o['requestUserAgent']
            if(_oa.is_a? Hash)
              @requestUserAgent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestUserAgent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestUserAgent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestUserAgent.push String.from_json(_item)
                 else
                   @requestUserAgent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestUserAgent = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXAuthSession from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXCredentialStoreList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXCredentialStores

    # the json hash for this VXCredentialStoreList
    def to_jaxb_json_hash
      _h = super
      if !vXCredentialStores.nil?
        _ha = Array.new
        vXCredentialStores.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXCredentialStores'] = _ha
      end
      return _h
    end

    #initializes this VXCredentialStoreList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXCredentialStores'].nil?
          _oa = _o['vXCredentialStores']
            if(_oa.is_a? Hash)
              @vXCredentialStores = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXCredentialStores =  Org::Apache::Ranger::View::VXCredentialStore.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXCredentialStores = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXCredentialStores.push Org::Apache::Ranger::View::VXCredentialStore.from_json(_item)
                 else
                   @vXCredentialStores.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXCredentialStores = _oa
            end
          end
    end

    # constructs a VXCredentialStoreList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAccessAudit < Org::Apache::Ranger::View::VXDataObject 

    # int - value of member attribute &lt;b&gt;auditType&lt;/b&gt;.
    attr_accessor :auditType
    # int - value of member attribute &lt;b&gt;accessResult&lt;/b&gt;.
    attr_accessor :accessResult
    # String - value of member attribute &lt;b&gt;accessType&lt;/b&gt;.
    attr_accessor :accessType
    # String - value of member attribute &lt;b&gt;aclEnforcer&lt;/b&gt;.
    attr_accessor :aclEnforcer
    # String - value of member attribute &lt;b&gt;agentId&lt;/b&gt;.
    attr_accessor :agentId
    # String - value of member attribute &lt;b&gt;clientIP&lt;/b&gt;.
    attr_accessor :clientIP
    # String - value of member attribute &lt;b&gt;clientType&lt;/b&gt;.
    attr_accessor :clientType
    # long - value of member attribute &lt;b&gt;policyId&lt;/b&gt;.
    attr_accessor :policyId
    # String - value of member attribute &lt;b&gt;repoName&lt;/b&gt;.
    attr_accessor :repoName
    # int - value of member attribute &lt;b&gt;repoType&lt;/b&gt;.
    attr_accessor :repoType
    # the serviceType
    attr_accessor :serviceType
    # String - value of member attribute &lt;b&gt;resultReason&lt;/b&gt;.
    attr_accessor :resultReason
    # String - value of member attribute &lt;b&gt;sessionId&lt;/b&gt;.
    attr_accessor :sessionId
    # Date - value of member attribute &lt;b&gt;eventTime&lt;/b&gt;.
    attr_accessor :eventTime
    # String - value of member attribute &lt;b&gt;requestUser&lt;/b&gt;.
    attr_accessor :requestUser
    # String - value of member attribute &lt;b&gt;action&lt;/b&gt;.
    attr_accessor :action
    # String - value of member attribute &lt;b&gt;requestData&lt;/b&gt;.
    attr_accessor :requestData
    # String - value of member attribute &lt;b&gt;resourcePath&lt;/b&gt;.
    attr_accessor :resourcePath
    # String - value of member attribute &lt;b&gt;resourceType&lt;/b&gt;.
    attr_accessor :resourceType
    # (no documentation provided)
    attr_accessor :sequenceNumber
    # (no documentation provided)
    attr_accessor :eventCount
    # (no documentation provided)
    attr_accessor :eventDuration
    # the tags
    attr_accessor :tags
    # the clusterName
    attr_accessor :clusterName
    # (no documentation provided)
    attr_accessor :myClassType
    # the zoneName
    attr_accessor :zoneName
    # the policyVersion
    attr_accessor :policyVersion

    # the json hash for this VXAccessAudit
    def to_jaxb_json_hash
      _h = super
      _h['auditType'] = auditType.to_jaxb_json_hash unless auditType.nil?
      _h['accessResult'] = accessResult.to_jaxb_json_hash unless accessResult.nil?
      _h['accessType'] = accessType.to_jaxb_json_hash unless accessType.nil?
      _h['aclEnforcer'] = aclEnforcer.to_jaxb_json_hash unless aclEnforcer.nil?
      _h['agentId'] = agentId.to_jaxb_json_hash unless agentId.nil?
      _h['clientIP'] = clientIP.to_jaxb_json_hash unless clientIP.nil?
      _h['clientType'] = clientType.to_jaxb_json_hash unless clientType.nil?
      _h['policyId'] = policyId.to_jaxb_json_hash unless policyId.nil?
      _h['repoName'] = repoName.to_jaxb_json_hash unless repoName.nil?
      _h['repoType'] = repoType.to_jaxb_json_hash unless repoType.nil?
      _h['serviceType'] = serviceType.to_jaxb_json_hash unless serviceType.nil?
      _h['resultReason'] = resultReason.to_jaxb_json_hash unless resultReason.nil?
      _h['sessionId'] = sessionId.to_jaxb_json_hash unless sessionId.nil?
      _h['eventTime'] = eventTime.to_jaxb_json_hash unless eventTime.nil?
      _h['requestUser'] = requestUser.to_jaxb_json_hash unless requestUser.nil?
      _h['action'] = action.to_jaxb_json_hash unless action.nil?
      _h['requestData'] = requestData.to_jaxb_json_hash unless requestData.nil?
      _h['resourcePath'] = resourcePath.to_jaxb_json_hash unless resourcePath.nil?
      _h['resourceType'] = resourceType.to_jaxb_json_hash unless resourceType.nil?
      _h['sequenceNumber'] = sequenceNumber.to_jaxb_json_hash unless sequenceNumber.nil?
      _h['eventCount'] = eventCount.to_jaxb_json_hash unless eventCount.nil?
      _h['eventDuration'] = eventDuration.to_jaxb_json_hash unless eventDuration.nil?
      _h['tags'] = tags.to_jaxb_json_hash unless tags.nil?
      _h['clusterName'] = clusterName.to_jaxb_json_hash unless clusterName.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      return _h
    end

    #initializes this VXAccessAudit with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['auditType'].nil?
          _oa = _o['auditType']
            if(_oa.is_a? Hash)
              @auditType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditType.push Fixnum.from_json(_item)
                 else
                   @auditType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditType = _oa
            end
          end
        if !_o['accessResult'].nil?
          _oa = _o['accessResult']
            if(_oa.is_a? Hash)
              @accessResult = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessResult =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessResult = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessResult.push Fixnum.from_json(_item)
                 else
                   @accessResult.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessResult = _oa
            end
          end
        if !_o['accessType'].nil?
          _oa = _o['accessType']
            if(_oa.is_a? Hash)
              @accessType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessType.push String.from_json(_item)
                 else
                   @accessType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessType = _oa
            end
          end
        if !_o['aclEnforcer'].nil?
          _oa = _o['aclEnforcer']
            if(_oa.is_a? Hash)
              @aclEnforcer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aclEnforcer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aclEnforcer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aclEnforcer.push String.from_json(_item)
                 else
                   @aclEnforcer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aclEnforcer = _oa
            end
          end
        if !_o['agentId'].nil?
          _oa = _o['agentId']
            if(_oa.is_a? Hash)
              @agentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @agentId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @agentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @agentId.push String.from_json(_item)
                 else
                   @agentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @agentId = _oa
            end
          end
        if !_o['clientIP'].nil?
          _oa = _o['clientIP']
            if(_oa.is_a? Hash)
              @clientIP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientIP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientIP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientIP.push String.from_json(_item)
                 else
                   @clientIP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientIP = _oa
            end
          end
        if !_o['clientType'].nil?
          _oa = _o['clientType']
            if(_oa.is_a? Hash)
              @clientType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientType.push String.from_json(_item)
                 else
                   @clientType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientType = _oa
            end
          end
        if !_o['policyId'].nil?
          _oa = _o['policyId']
            if(_oa.is_a? Hash)
              @policyId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyId.push Bignum.from_json(_item)
                 else
                   @policyId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyId = _oa
            end
          end
        if !_o['repoName'].nil?
          _oa = _o['repoName']
            if(_oa.is_a? Hash)
              @repoName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repoName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repoName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repoName.push String.from_json(_item)
                 else
                   @repoName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repoName = _oa
            end
          end
        if !_o['repoType'].nil?
          _oa = _o['repoType']
            if(_oa.is_a? Hash)
              @repoType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repoType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repoType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repoType.push Fixnum.from_json(_item)
                 else
                   @repoType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repoType = _oa
            end
          end
        if !_o['serviceType'].nil?
          _oa = _o['serviceType']
            if(_oa.is_a? Hash)
              @serviceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceType.push String.from_json(_item)
                 else
                   @serviceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceType = _oa
            end
          end
        if !_o['resultReason'].nil?
          _oa = _o['resultReason']
            if(_oa.is_a? Hash)
              @resultReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resultReason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resultReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resultReason.push String.from_json(_item)
                 else
                   @resultReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resultReason = _oa
            end
          end
        if !_o['sessionId'].nil?
          _oa = _o['sessionId']
            if(_oa.is_a? Hash)
              @sessionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionId.push String.from_json(_item)
                 else
                   @sessionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionId = _oa
            end
          end
        if !_o['eventTime'].nil?
          _oa = _o['eventTime']
            if(_oa.is_a? Hash)
              @eventTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventTime.push Time.from_json(_item)
                 else
                   @eventTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventTime = _oa
            end
          end
        if !_o['requestUser'].nil?
          _oa = _o['requestUser']
            if(_oa.is_a? Hash)
              @requestUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestUser =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestUser.push String.from_json(_item)
                 else
                   @requestUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestUser = _oa
            end
          end
        if !_o['action'].nil?
          _oa = _o['action']
            if(_oa.is_a? Hash)
              @action = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @action =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @action = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @action.push String.from_json(_item)
                 else
                   @action.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @action = _oa
            end
          end
        if !_o['requestData'].nil?
          _oa = _o['requestData']
            if(_oa.is_a? Hash)
              @requestData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestData =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestData.push String.from_json(_item)
                 else
                   @requestData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestData = _oa
            end
          end
        if !_o['resourcePath'].nil?
          _oa = _o['resourcePath']
            if(_oa.is_a? Hash)
              @resourcePath = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourcePath =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourcePath = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourcePath.push String.from_json(_item)
                 else
                   @resourcePath.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourcePath = _oa
            end
          end
        if !_o['resourceType'].nil?
          _oa = _o['resourceType']
            if(_oa.is_a? Hash)
              @resourceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceType.push String.from_json(_item)
                 else
                   @resourceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceType = _oa
            end
          end
        if !_o['sequenceNumber'].nil?
          _oa = _o['sequenceNumber']
            if(_oa.is_a? Hash)
              @sequenceNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sequenceNumber =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sequenceNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sequenceNumber.push Bignum.from_json(_item)
                 else
                   @sequenceNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sequenceNumber = _oa
            end
          end
        if !_o['eventCount'].nil?
          _oa = _o['eventCount']
            if(_oa.is_a? Hash)
              @eventCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventCount =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventCount.push Bignum.from_json(_item)
                 else
                   @eventCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventCount = _oa
            end
          end
        if !_o['eventDuration'].nil?
          _oa = _o['eventDuration']
            if(_oa.is_a? Hash)
              @eventDuration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventDuration =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventDuration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventDuration.push Bignum.from_json(_item)
                 else
                   @eventDuration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventDuration = _oa
            end
          end
        if !_o['tags'].nil?
          _oa = _o['tags']
            if(_oa.is_a? Hash)
              @tags = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tags =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tags = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tags.push String.from_json(_item)
                 else
                   @tags.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tags = _oa
            end
          end
        if !_o['clusterName'].nil?
          _oa = _o['clusterName']
            if(_oa.is_a? Hash)
              @clusterName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clusterName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clusterName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clusterName.push String.from_json(_item)
                 else
                   @clusterName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clusterName = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
    end

    # constructs a VXAccessAudit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXModuleDef < Org::Apache::Ranger::View::VXDataObject 

    # the userPermList
    attr_accessor :userPermList
    # the groupPermList
    attr_accessor :groupPermList
    # the id
    attr_accessor :id
    # the createTime
    attr_accessor :createTime
    # the updateTime
    attr_accessor :updateTime
    # the addedById
    attr_accessor :addedById
    # the updatedById
    attr_accessor :updatedById
    # the module
    attr_accessor :module
    # the url
    attr_accessor :url

    # the json hash for this VXModuleDef
    def to_jaxb_json_hash
      _h = super
      if !userPermList.nil?
        _ha = Array.new
        userPermList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userPermList'] = _ha
      end
      if !groupPermList.nil?
        _ha = Array.new
        groupPermList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupPermList'] = _ha
      end
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['addedById'] = addedById.to_jaxb_json_hash unless addedById.nil?
      _h['updatedById'] = updatedById.to_jaxb_json_hash unless updatedById.nil?
      _h['module'] = module.to_jaxb_json_hash unless module.nil?
      _h['url'] = url.to_jaxb_json_hash unless url.nil?
      return _h
    end

    #initializes this VXModuleDef with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['userPermList'].nil?
          _oa = _o['userPermList']
            if(_oa.is_a? Hash)
              @userPermList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userPermList =  Org::Apache::Ranger::View::VXUserPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userPermList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userPermList.push Org::Apache::Ranger::View::VXUserPermission.from_json(_item)
                 else
                   @userPermList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userPermList = _oa
            end
          end
        if !_o['groupPermList'].nil?
          _oa = _o['groupPermList']
            if(_oa.is_a? Hash)
              @groupPermList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupPermList =  Org::Apache::Ranger::View::VXGroupPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupPermList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupPermList.push Org::Apache::Ranger::View::VXGroupPermission.from_json(_item)
                 else
                   @groupPermList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupPermList = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['addedById'].nil?
          _oa = _o['addedById']
            if(_oa.is_a? Hash)
              @addedById = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @addedById =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @addedById = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @addedById.push Bignum.from_json(_item)
                 else
                   @addedById.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @addedById = _oa
            end
          end
        if !_o['updatedById'].nil?
          _oa = _o['updatedById']
            if(_oa.is_a? Hash)
              @updatedById = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedById =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedById = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedById.push Bignum.from_json(_item)
                 else
                   @updatedById.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedById = _oa
            end
          end
        if !_o['module'].nil?
          _oa = _o['module']
            if(_oa.is_a? Hash)
              @module = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @module =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @module = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @module.push String.from_json(_item)
                 else
                   @module.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @module = _oa
            end
          end
        if !_o['url'].nil?
          _oa = _o['url']
            if(_oa.is_a? Hash)
              @url = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @url =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @url = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @url.push String.from_json(_item)
                 else
                   @url.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @url = _oa
            end
          end
    end

    # constructs a VXModuleDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAccessAuditList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAccessAudits

    # the json hash for this VXAccessAuditList
    def to_jaxb_json_hash
      _h = super
      if !vXAccessAudits.nil?
        _ha = Array.new
        vXAccessAudits.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAccessAudits'] = _ha
      end
      return _h
    end

    #initializes this VXAccessAuditList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAccessAudits'].nil?
          _oa = _o['vXAccessAudits']
            if(_oa.is_a? Hash)
              @vXAccessAudits = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAccessAudits =  Org::Apache::Ranger::View::VXAccessAudit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAccessAudits = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAccessAudits.push Org::Apache::Ranger::View::VXAccessAudit.from_json(_item)
                 else
                   @vXAccessAudits.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAccessAudits = _oa
            end
          end
    end

    # constructs a VXAccessAuditList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupGroup < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # Long - value of member attribute &lt;b&gt;parentGroupId&lt;/b&gt;.
    attr_accessor :parentGroupId
    # Long - value of member attribute &lt;b&gt;groupId&lt;/b&gt;.
    attr_accessor :groupId
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXGroupGroup
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['parentGroupId'] = parentGroupId.to_jaxb_json_hash unless parentGroupId.nil?
      _h['groupId'] = groupId.to_jaxb_json_hash unless groupId.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXGroupGroup with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['parentGroupId'].nil?
          _oa = _o['parentGroupId']
            if(_oa.is_a? Hash)
              @parentGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentGroupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentGroupId.push Bignum.from_json(_item)
                 else
                   @parentGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentGroupId = _oa
            end
          end
        if !_o['groupId'].nil?
          _oa = _o['groupId']
            if(_oa.is_a? Hash)
              @groupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupId.push Bignum.from_json(_item)
                 else
                   @groupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupId = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXGroupGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUserGroupInfo < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :xuserInfo
    # (no documentation provided)
    attr_accessor :xgroupInfo

    # the json hash for this VXUserGroupInfo
    def to_jaxb_json_hash
      _h = super
      _h['xuserInfo'] = xuserInfo.to_jaxb_json_hash unless xuserInfo.nil?
      if !xgroupInfo.nil?
        _ha = Array.new
        xgroupInfo.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['xgroupInfo'] = _ha
      end
      return _h
    end

    #initializes this VXUserGroupInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['xuserInfo'].nil?
          _oa = _o['xuserInfo']
            if(_oa.is_a? Hash)
              @xuserInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xuserInfo =  Org::Apache::Ranger::View::VXUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xuserInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xuserInfo.push Org::Apache::Ranger::View::VXUser.from_json(_item)
                 else
                   @xuserInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xuserInfo = _oa
            end
          end
        if !_o['xgroupInfo'].nil?
          _oa = _o['xgroupInfo']
            if(_oa.is_a? Hash)
              @xgroupInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xgroupInfo =  Org::Apache::Ranger::View::VXGroup.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xgroupInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xgroupInfo.push Org::Apache::Ranger::View::VXGroup.from_json(_item)
                 else
                   @xgroupInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xgroupInfo = _oa
            end
          end
    end

    # constructs a VXUserGroupInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroup < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # String - value of member attribute &lt;b&gt;description&lt;/b&gt;.
    attr_accessor :description
    # int - value of member attribute &lt;b&gt;groupType&lt;/b&gt;.
    attr_accessor :groupType
    # Long - value of member attribute &lt;b&gt;credStoreId&lt;/b&gt;.
    attr_accessor :credStoreId
    # the isVisible
    attr_accessor :isVisible
    # (no documentation provided)
    attr_accessor :myClassType
    # (no documentation provided)
    attr_accessor :groupSource

    # the json hash for this VXGroup
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['groupType'] = groupType.to_jaxb_json_hash unless groupType.nil?
      _h['credStoreId'] = credStoreId.to_jaxb_json_hash unless credStoreId.nil?
      _h['isVisible'] = isVisible.to_jaxb_json_hash unless isVisible.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      _h['groupSource'] = groupSource.to_jaxb_json_hash unless groupSource.nil?
      return _h
    end

    #initializes this VXGroup with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['groupType'].nil?
          _oa = _o['groupType']
            if(_oa.is_a? Hash)
              @groupType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupType.push Fixnum.from_json(_item)
                 else
                   @groupType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupType = _oa
            end
          end
        if !_o['credStoreId'].nil?
          _oa = _o['credStoreId']
            if(_oa.is_a? Hash)
              @credStoreId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @credStoreId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @credStoreId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @credStoreId.push Bignum.from_json(_item)
                 else
                   @credStoreId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @credStoreId = _oa
            end
          end
        if !_o['isVisible'].nil?
          _oa = _o['isVisible']
            if(_oa.is_a? Hash)
              @isVisible = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isVisible =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isVisible = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isVisible.push Fixnum.from_json(_item)
                 else
                   @isVisible.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isVisible = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
        if !_o['groupSource'].nil?
          _oa = _o['groupSource']
            if(_oa.is_a? Hash)
              @groupSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupSource =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupSource.push Fixnum.from_json(_item)
                 else
                   @groupSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupSource = _oa
            end
          end
    end

    # constructs a VXGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUgsyncAuditInfoList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vxUgsyncAuditInfoList

    # the json hash for this VXUgsyncAuditInfoList
    def to_jaxb_json_hash
      _h = super
      if !vxUgsyncAuditInfoList.nil?
        _ha = Array.new
        vxUgsyncAuditInfoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vxUgsyncAuditInfoList'] = _ha
      end
      return _h
    end

    #initializes this VXUgsyncAuditInfoList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vxUgsyncAuditInfoList'].nil?
          _oa = _o['vxUgsyncAuditInfoList']
            if(_oa.is_a? Hash)
              @vxUgsyncAuditInfoList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vxUgsyncAuditInfoList =  Org::Apache::Ranger::View::VXUgsyncAuditInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vxUgsyncAuditInfoList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vxUgsyncAuditInfoList.push Org::Apache::Ranger::View::VXUgsyncAuditInfo.from_json(_item)
                 else
                   @vxUgsyncAuditInfoList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vxUgsyncAuditInfoList = _oa
            end
          end
    end

    # constructs a VXUgsyncAuditInfoList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXRepository < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # String - value of member attribute &lt;b&gt;description&lt;/b&gt;.
    attr_accessor :description
    # String - value of member attribute &lt;b&gt;repositoryType&lt;/b&gt;.
    attr_accessor :repositoryType
    # String - value of member attribute &lt;b&gt;config&lt;/b&gt;.
    attr_accessor :config
    # boolean - value of member attribute &lt;b&gt;isActive&lt;/b&gt;.
    attr_accessor :isActive
    # String - value of member attribute &lt;b&gt;version&lt;/b&gt;.
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXRepository
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['repositoryType'] = repositoryType.to_jaxb_json_hash unless repositoryType.nil?
      _h['config'] = config.to_jaxb_json_hash unless config.nil?
      _h['isActive'] = isActive.to_jaxb_json_hash unless isActive.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXRepository with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['repositoryType'].nil?
          _oa = _o['repositoryType']
            if(_oa.is_a? Hash)
              @repositoryType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repositoryType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repositoryType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repositoryType.push String.from_json(_item)
                 else
                   @repositoryType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repositoryType = _oa
            end
          end
        if !_o['config'].nil?
          _oa = _o['config']
            if(_oa.is_a? Hash)
              @config = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @config =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @config = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @config.push String.from_json(_item)
                 else
                   @config.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @config = _oa
            end
          end
        if !_o['isActive'].nil?
          _oa = _o['isActive']
            if(_oa.is_a? Hash)
              @isActive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isActive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isActive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isActive.push Boolean.from_json(_item)
                 else
                   @isActive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isActive = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push String.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXRepository from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUserPermissionList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXUserPermission

    # the json hash for this VXUserPermissionList
    def to_jaxb_json_hash
      _h = super
      if !vXUserPermission.nil?
        _ha = Array.new
        vXUserPermission.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXUserPermission'] = _ha
      end
      return _h
    end

    #initializes this VXUserPermissionList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXUserPermission'].nil?
          _oa = _o['vXUserPermission']
            if(_oa.is_a? Hash)
              @vXUserPermission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXUserPermission =  Org::Apache::Ranger::View::VXUserPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXUserPermission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXUserPermission.push Org::Apache::Ranger::View::VXUserPermission.from_json(_item)
                 else
                   @vXUserPermission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXUserPermission = _oa
            end
          end
    end

    # constructs a VXUserPermissionList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyLabel < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :policyLabel

    # the json hash for this VXPolicyLabel
    def to_jaxb_json_hash
      _h = super
      _h['policyLabel'] = policyLabel.to_jaxb_json_hash unless policyLabel.nil?
      return _h
    end

    #initializes this VXPolicyLabel with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['policyLabel'].nil?
          _oa = _o['policyLabel']
            if(_oa.is_a? Hash)
              @policyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyLabel.push String.from_json(_item)
                 else
                   @policyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyLabel = _oa
            end
          end
    end

    # constructs a VXPolicyLabel from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuditMapList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAuditMaps

    # the json hash for this VXAuditMapList
    def to_jaxb_json_hash
      _h = super
      if !vXAuditMaps.nil?
        _ha = Array.new
        vXAuditMaps.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAuditMaps'] = _ha
      end
      return _h
    end

    #initializes this VXAuditMapList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAuditMaps'].nil?
          _oa = _o['vXAuditMaps']
            if(_oa.is_a? Hash)
              @vXAuditMaps = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAuditMaps =  Org::Apache::Ranger::View::VXAuditMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAuditMaps = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAuditMaps.push Org::Apache::Ranger::View::VXAuditMap.from_json(_item)
                 else
                   @vXAuditMaps.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAuditMaps = _oa
            end
          end
    end

    # constructs a VXAuditMapList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXStringList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXStrings

    # the json hash for this VXStringList
    def to_jaxb_json_hash
      _h = super
      if !vXStrings.nil?
        _ha = Array.new
        vXStrings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXStrings'] = _ha
      end
      return _h
    end

    #initializes this VXStringList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXStrings'].nil?
          _oa = _o['vXStrings']
            if(_oa.is_a? Hash)
              @vXStrings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXStrings =  Org::Apache::Ranger::View::VXString.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXStrings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXStrings.push Org::Apache::Ranger::View::VXString.from_json(_item)
                 else
                   @vXStrings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXStrings = _oa
            end
          end
    end

    # constructs a VXStringList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUserPermission < Org::Apache::Ranger::View::VXDataObject 

    # the id
    attr_accessor :id
    # the userId
    attr_accessor :userId
    # the moduleId
    attr_accessor :moduleId
    # the isAllowed
    attr_accessor :isAllowed
    # the userName
    attr_accessor :userName
    # (no documentation provided)
    attr_accessor :moduleName
    # (no documentation provided)
    attr_accessor :loginId
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXUserPermission
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['moduleId'] = moduleId.to_jaxb_json_hash unless moduleId.nil?
      _h['isAllowed'] = isAllowed.to_jaxb_json_hash unless isAllowed.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['moduleName'] = moduleName.to_jaxb_json_hash unless moduleName.nil?
      _h['loginId'] = loginId.to_jaxb_json_hash unless loginId.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXUserPermission with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['moduleId'].nil?
          _oa = _o['moduleId']
            if(_oa.is_a? Hash)
              @moduleId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleId.push Bignum.from_json(_item)
                 else
                   @moduleId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleId = _oa
            end
          end
        if !_o['isAllowed'].nil?
          _oa = _o['isAllowed']
            if(_oa.is_a? Hash)
              @isAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAllowed =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAllowed.push Fixnum.from_json(_item)
                 else
                   @isAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAllowed = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['moduleName'].nil?
          _oa = _o['moduleName']
            if(_oa.is_a? Hash)
              @moduleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleName.push String.from_json(_item)
                 else
                   @moduleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleName = _oa
            end
          end
        if !_o['loginId'].nil?
          _oa = _o['loginId']
            if(_oa.is_a? Hash)
              @loginId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginId.push String.from_json(_item)
                 else
                   @loginId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginId = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXUserPermission from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerServiceDefList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :serviceDefs

    # the json hash for this RangerServiceDefList
    def to_jaxb_json_hash
      _h = super
      if !serviceDefs.nil?
        _ha = Array.new
        serviceDefs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['serviceDefs'] = _ha
      end
      return _h
    end

    #initializes this RangerServiceDefList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['serviceDefs'].nil?
          _oa = _o['serviceDefs']
            if(_oa.is_a? Hash)
              @serviceDefs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceDefs =  Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceDefs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceDefs.push Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_item)
                 else
                   @serviceDefs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceDefs = _oa
            end
          end
    end

    # constructs a RangerServiceDefList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerPolicyList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :policies

    # the json hash for this RangerPolicyList
    def to_jaxb_json_hash
      _h = super
      if !policies.nil?
        _ha = Array.new
        policies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policies'] = _ha
      end
      return _h
    end

    #initializes this RangerPolicyList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['policies'].nil?
          _oa = _o['policies']
            if(_oa.is_a? Hash)
              @policies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policies =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policies.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policies = _oa
            end
          end
    end

    # constructs a RangerPolicyList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXCredentialStore < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # String - value of member attribute &lt;b&gt;description&lt;/b&gt;.
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXCredentialStore
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXCredentialStore with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXCredentialStore from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPermObjList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPermObjs

    # the json hash for this VXPermObjList
    def to_jaxb_json_hash
      _h = super
      if !vXPermObjs.nil?
        _ha = Array.new
        vXPermObjs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPermObjs'] = _ha
      end
      return _h
    end

    #initializes this VXPermObjList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPermObjs'].nil?
          _oa = _o['vXPermObjs']
            if(_oa.is_a? Hash)
              @vXPermObjs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPermObjs =  Org::Apache::Ranger::View::VXPermObj.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPermObjs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPermObjs.push Org::Apache::Ranger::View::VXPermObj.from_json(_item)
                 else
                   @vXPermObjs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPermObjs = _oa
            end
          end
    end

    # constructs a VXPermObjList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyExportAuditList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPolicyExportAudits

    # the json hash for this VXPolicyExportAuditList
    def to_jaxb_json_hash
      _h = super
      if !vXPolicyExportAudits.nil?
        _ha = Array.new
        vXPolicyExportAudits.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPolicyExportAudits'] = _ha
      end
      return _h
    end

    #initializes this VXPolicyExportAuditList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPolicyExportAudits'].nil?
          _oa = _o['vXPolicyExportAudits']
            if(_oa.is_a? Hash)
              @vXPolicyExportAudits = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPolicyExportAudits =  Org::Apache::Ranger::View::VXPolicyExportAudit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPolicyExportAudits = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPolicyExportAudits.push Org::Apache::Ranger::View::VXPolicyExportAudit.from_json(_item)
                 else
                   @vXPolicyExportAudits.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPolicyExportAudits = _oa
            end
          end
    end

    # constructs a VXPolicyExportAuditList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPortalUser < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;loginId&lt;/b&gt;.
    attr_accessor :loginId
    # String - value of member attribute &lt;b&gt;password&lt;/b&gt;.
    attr_accessor :password
    # int - value of member attribute &lt;b&gt;status&lt;/b&gt;.
    attr_accessor :status
    # String - value of member attribute &lt;b&gt;emailAddress&lt;/b&gt;.
    attr_accessor :emailAddress
    # String - value of member attribute &lt;b&gt;firstName&lt;/b&gt;.
    attr_accessor :firstName
    # String - value of member attribute &lt;b&gt;lastName&lt;/b&gt;.
    attr_accessor :lastName
    # String - value of member attribute &lt;b&gt;publicScreenName&lt;/b&gt;.
    attr_accessor :publicScreenName
    # int - value of member attribute &lt;b&gt;userSource&lt;/b&gt;.
    attr_accessor :userSource
    # String - value of member attribute &lt;b&gt;notes&lt;/b&gt;.
    attr_accessor :notes
    # Collection&lt;String&gt; - value of member attribute &lt;b&gt;userRoleList&lt;/b&gt;.
    attr_accessor :userRoleList
    # (no documentation provided)
    attr_accessor :myClassType
    # (no documentation provided)
    attr_accessor :groupIdList
    # (no documentation provided)
    attr_accessor :userPermList
    # (no documentation provided)
    attr_accessor :groupPermissions

    # the json hash for this VXPortalUser
    def to_jaxb_json_hash
      _h = super
      _h['loginId'] = loginId.to_jaxb_json_hash unless loginId.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['publicScreenName'] = publicScreenName.to_jaxb_json_hash unless publicScreenName.nil?
      _h['userSource'] = userSource.to_jaxb_json_hash unless userSource.nil?
      _h['notes'] = notes.to_jaxb_json_hash unless notes.nil?
      if !userRoleList.nil?
        _ha = Array.new
        userRoleList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userRoleList'] = _ha
      end
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      if !groupIdList.nil?
        _ha = Array.new
        groupIdList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupIdList'] = _ha
      end
      if !userPermList.nil?
        _ha = Array.new
        userPermList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userPermList'] = _ha
      end
      if !groupPermissions.nil?
        _ha = Array.new
        groupPermissions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupPermissions'] = _ha
      end
      return _h
    end

    #initializes this VXPortalUser with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['loginId'].nil?
          _oa = _o['loginId']
            if(_oa.is_a? Hash)
              @loginId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginId.push String.from_json(_item)
                 else
                   @loginId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginId = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push Fixnum.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['publicScreenName'].nil?
          _oa = _o['publicScreenName']
            if(_oa.is_a? Hash)
              @publicScreenName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicScreenName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicScreenName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicScreenName.push String.from_json(_item)
                 else
                   @publicScreenName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicScreenName = _oa
            end
          end
        if !_o['userSource'].nil?
          _oa = _o['userSource']
            if(_oa.is_a? Hash)
              @userSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSource =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSource.push Fixnum.from_json(_item)
                 else
                   @userSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSource = _oa
            end
          end
        if !_o['notes'].nil?
          _oa = _o['notes']
            if(_oa.is_a? Hash)
              @notes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @notes =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @notes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @notes.push String.from_json(_item)
                 else
                   @notes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @notes = _oa
            end
          end
        if !_o['userRoleList'].nil?
          _oa = _o['userRoleList']
            if(_oa.is_a? Hash)
              @userRoleList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userRoleList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userRoleList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userRoleList.push String.from_json(_item)
                 else
                   @userRoleList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userRoleList = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
        if !_o['groupIdList'].nil?
          _oa = _o['groupIdList']
            if(_oa.is_a? Hash)
              @groupIdList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupIdList =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupIdList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupIdList.push Bignum.from_json(_item)
                 else
                   @groupIdList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupIdList = _oa
            end
          end
        if !_o['userPermList'].nil?
          _oa = _o['userPermList']
            if(_oa.is_a? Hash)
              @userPermList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userPermList =  Org::Apache::Ranger::View::VXUserPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userPermList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userPermList.push Org::Apache::Ranger::View::VXUserPermission.from_json(_item)
                 else
                   @userPermList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userPermList = _oa
            end
          end
        if !_o['groupPermissions'].nil?
          _oa = _o['groupPermissions']
            if(_oa.is_a? Hash)
              @groupPermissions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupPermissions =  Org::Apache::Ranger::View::VXGroupPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupPermissions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupPermissions.push Org::Apache::Ranger::View::VXGroupPermission.from_json(_item)
                 else
                   @groupPermissions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupPermissions = _oa
            end
          end
    end

    # constructs a VXPortalUser from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXModuleDefList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXModuleDef

    # the json hash for this VXModuleDefList
    def to_jaxb_json_hash
      _h = super
      if !vXModuleDef.nil?
        _ha = Array.new
        vXModuleDef.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXModuleDef'] = _ha
      end
      return _h
    end

    #initializes this VXModuleDefList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXModuleDef'].nil?
          _oa = _o['vXModuleDef']
            if(_oa.is_a? Hash)
              @vXModuleDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXModuleDef =  Org::Apache::Ranger::View::VXModuleDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXModuleDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXModuleDef.push Org::Apache::Ranger::View::VXModuleDef.from_json(_item)
                 else
                   @vXModuleDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXModuleDef = _oa
            end
          end
    end

    # constructs a VXModuleDefList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupGroupList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXGroupGroups

    # the json hash for this VXGroupGroupList
    def to_jaxb_json_hash
      _h = super
      if !vXGroupGroups.nil?
        _ha = Array.new
        vXGroupGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXGroupGroups'] = _ha
      end
      return _h
    end

    #initializes this VXGroupGroupList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXGroupGroups'].nil?
          _oa = _o['vXGroupGroups']
            if(_oa.is_a? Hash)
              @vXGroupGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXGroupGroups =  Org::Apache::Ranger::View::VXGroupGroup.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXGroupGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXGroupGroups.push Org::Apache::Ranger::View::VXGroupGroup.from_json(_item)
                 else
                   @vXGroupGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXGroupGroups = _oa
            end
          end
    end

    # constructs a VXGroupGroupList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXKmsKeyList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXKeys

    # the json hash for this VXKmsKeyList
    def to_jaxb_json_hash
      _h = super
      if !vXKeys.nil?
        _ha = Array.new
        vXKeys.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXKeys'] = _ha
      end
      return _h
    end

    #initializes this VXKmsKeyList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXKeys'].nil?
          _oa = _o['vXKeys']
            if(_oa.is_a? Hash)
              @vXKeys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXKeys =  Org::Apache::Ranger::View::VXKmsKey.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXKeys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXKeys.push Org::Apache::Ranger::View::VXKmsKey.from_json(_item)
                 else
                   @vXKeys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXKeys = _oa
            end
          end
    end

    # constructs a VXKmsKeyList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyLabelList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vxPolicyLabels

    # the json hash for this VXPolicyLabelList
    def to_jaxb_json_hash
      _h = super
      if !vxPolicyLabels.nil?
        _ha = Array.new
        vxPolicyLabels.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vxPolicyLabels'] = _ha
      end
      return _h
    end

    #initializes this VXPolicyLabelList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vxPolicyLabels'].nil?
          _oa = _o['vxPolicyLabels']
            if(_oa.is_a? Hash)
              @vxPolicyLabels = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vxPolicyLabels =  Org::Apache::Ranger::View::VXPolicyLabel.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vxPolicyLabels = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vxPolicyLabels.push Org::Apache::Ranger::View::VXPolicyLabel.from_json(_item)
                 else
                   @vxPolicyLabels.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vxPolicyLabels = _oa
            end
          end
    end

    # constructs a VXPolicyLabelList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAssetList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAssets

    # the json hash for this VXAssetList
    def to_jaxb_json_hash
      _h = super
      if !vXAssets.nil?
        _ha = Array.new
        vXAssets.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAssets'] = _ha
      end
      return _h
    end

    #initializes this VXAssetList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAssets'].nil?
          _oa = _o['vXAssets']
            if(_oa.is_a? Hash)
              @vXAssets = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAssets =  Org::Apache::Ranger::View::VXAsset.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAssets = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAssets.push Org::Apache::Ranger::View::VXAsset.from_json(_item)
                 else
                   @vXAssets.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAssets = _oa
            end
          end
    end

    # constructs a VXAssetList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUserList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXUsers

    # the json hash for this VXUserList
    def to_jaxb_json_hash
      _h = super
      if !vXUsers.nil?
        _ha = Array.new
        vXUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXUsers'] = _ha
      end
      return _h
    end

    #initializes this VXUserList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXUsers'].nil?
          _oa = _o['vXUsers']
            if(_oa.is_a? Hash)
              @vXUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXUsers =  Org::Apache::Ranger::View::VXUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXUsers.push Org::Apache::Ranger::View::VXUser.from_json(_item)
                 else
                   @vXUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXUsers = _oa
            end
          end
    end

    # constructs a VXUserList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuditRecordList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAuditRecords

    # the json hash for this VXAuditRecordList
    def to_jaxb_json_hash
      _h = super
      if !vXAuditRecords.nil?
        _ha = Array.new
        vXAuditRecords.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAuditRecords'] = _ha
      end
      return _h
    end

    #initializes this VXAuditRecordList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAuditRecords'].nil?
          _oa = _o['vXAuditRecords']
            if(_oa.is_a? Hash)
              @vXAuditRecords = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAuditRecords =  Org::Apache::Ranger::View::VXAuditRecord.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAuditRecords = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAuditRecords.push Org::Apache::Ranger::View::VXAuditRecord.from_json(_item)
                 else
                   @vXAuditRecords.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAuditRecords = _oa
            end
          end
    end

    # constructs a VXAuditRecordList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupUserList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXGroupUsers

    # the json hash for this VXGroupUserList
    def to_jaxb_json_hash
      _h = super
      if !vXGroupUsers.nil?
        _ha = Array.new
        vXGroupUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXGroupUsers'] = _ha
      end
      return _h
    end

    #initializes this VXGroupUserList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXGroupUsers'].nil?
          _oa = _o['vXGroupUsers']
            if(_oa.is_a? Hash)
              @vXGroupUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXGroupUsers =  Org::Apache::Ranger::View::VXGroupUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXGroupUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXGroupUsers.push Org::Apache::Ranger::View::VXGroupUser.from_json(_item)
                 else
                   @vXGroupUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXGroupUsers = _oa
            end
          end
    end

    # constructs a VXGroupUserList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXGroups

    # the json hash for this VXGroupList
    def to_jaxb_json_hash
      _h = super
      if !vXGroups.nil?
        _ha = Array.new
        vXGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXGroups'] = _ha
      end
      return _h
    end

    #initializes this VXGroupList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXGroups'].nil?
          _oa = _o['vXGroups']
            if(_oa.is_a? Hash)
              @vXGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXGroups =  Org::Apache::Ranger::View::VXGroup.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXGroups.push Org::Apache::Ranger::View::VXGroup.from_json(_item)
                 else
                   @vXGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXGroups = _oa
            end
          end
    end

    # constructs a VXGroupList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXResource < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :policyName
    # String - value of member attribute &lt;b&gt;description&lt;/b&gt;.
    attr_accessor :description
    # int - value of member attribute &lt;b&gt;resourceType&lt;/b&gt;.
    attr_accessor :resourceType
    # Long - value of member attribute &lt;b&gt;assetId&lt;/b&gt;.
    attr_accessor :assetId
    # Long - value of member attribute &lt;b&gt;parentId&lt;/b&gt;.
    attr_accessor :parentId
    # String - value of member attribute &lt;b&gt;parentPath&lt;/b&gt;.
    attr_accessor :parentPath
    # int - value of member attribute &lt;b&gt;isEncrypt&lt;/b&gt;.
    attr_accessor :isEncrypt
    # List&lt;VXPermMap&gt; - value of member attribute &lt;b&gt;permMapList&lt;/b&gt;.
    attr_accessor :permMapList
    # List&lt;VXAuditMap&gt; - value of member attribute &lt;b&gt;auditList&lt;/b&gt;.
    attr_accessor :auditList
    # int - value of member attribute &lt;b&gt;isRecursive&lt;/b&gt;.
    attr_accessor :isRecursive
    # String - value of member attribute &lt;b&gt;resourceGroup&lt;/b&gt;.
    attr_accessor :resourceGroup
    # String - value of member attribute &lt;b&gt;databases&lt;/b&gt;.
    attr_accessor :databases
    # String - value of member attribute &lt;b&gt;tables&lt;/b&gt;.
    attr_accessor :tables
    # String - value of member attribute &lt;b&gt;columnFamilies&lt;/b&gt;.
    attr_accessor :columnFamilies
    # String - value of member attribute &lt;b&gt;columns&lt;/b&gt;.
    attr_accessor :columns
    # String - value of member attribute &lt;b&gt;udfs&lt;/b&gt;.
    attr_accessor :udfs
    # String - value of member attribute &lt;b&gt;assetName&lt;/b&gt;.
    attr_accessor :assetName
    # int - value of member attribute &lt;b&gt;assetType&lt;/b&gt;.
    attr_accessor :assetType
    # int - value of member attribute &lt;b&gt;resourceStatus&lt;/b&gt;.
    attr_accessor :resourceStatus
    # int - value of member attribute &lt;b&gt;tableType&lt;/b&gt;.
    attr_accessor :tableType
    # int - value of member attribute &lt;b&gt;columnType&lt;/b&gt;.
    attr_accessor :columnType
    # String - value of member attribute &lt;b&gt;topologies&lt;/b&gt;.
    attr_accessor :topologies
    # String - value of member attribute &lt;b&gt;services&lt;/b&gt;.
    attr_accessor :services
    # int - value of member attribute &lt;b&gt;checkParentPermission&lt;/b&gt;.
    attr_accessor :checkParentPermission
    # (no documentation provided)
    attr_accessor :myClassType
    # String - value of member attribute &lt;b&gt;guid&lt;/b&gt;.
    attr_accessor :guid

    # the json hash for this VXResource
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['policyName'] = policyName.to_jaxb_json_hash unless policyName.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['resourceType'] = resourceType.to_jaxb_json_hash unless resourceType.nil?
      _h['assetId'] = assetId.to_jaxb_json_hash unless assetId.nil?
      _h['parentId'] = parentId.to_jaxb_json_hash unless parentId.nil?
      _h['parentPath'] = parentPath.to_jaxb_json_hash unless parentPath.nil?
      _h['isEncrypt'] = isEncrypt.to_jaxb_json_hash unless isEncrypt.nil?
      if !permMapList.nil?
        _ha = Array.new
        permMapList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permMapList'] = _ha
      end
      if !auditList.nil?
        _ha = Array.new
        auditList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['auditList'] = _ha
      end
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['resourceGroup'] = resourceGroup.to_jaxb_json_hash unless resourceGroup.nil?
      _h['databases'] = databases.to_jaxb_json_hash unless databases.nil?
      _h['tables'] = tables.to_jaxb_json_hash unless tables.nil?
      _h['columnFamilies'] = columnFamilies.to_jaxb_json_hash unless columnFamilies.nil?
      _h['columns'] = columns.to_jaxb_json_hash unless columns.nil?
      _h['udfs'] = udfs.to_jaxb_json_hash unless udfs.nil?
      _h['assetName'] = assetName.to_jaxb_json_hash unless assetName.nil?
      _h['assetType'] = assetType.to_jaxb_json_hash unless assetType.nil?
      _h['resourceStatus'] = resourceStatus.to_jaxb_json_hash unless resourceStatus.nil?
      _h['tableType'] = tableType.to_jaxb_json_hash unless tableType.nil?
      _h['columnType'] = columnType.to_jaxb_json_hash unless columnType.nil?
      _h['topologies'] = topologies.to_jaxb_json_hash unless topologies.nil?
      _h['services'] = services.to_jaxb_json_hash unless services.nil?
      _h['checkParentPermission'] = checkParentPermission.to_jaxb_json_hash unless checkParentPermission.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      return _h
    end

    #initializes this VXResource with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['policyName'].nil?
          _oa = _o['policyName']
            if(_oa.is_a? Hash)
              @policyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyName.push String.from_json(_item)
                 else
                   @policyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyName = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['resourceType'].nil?
          _oa = _o['resourceType']
            if(_oa.is_a? Hash)
              @resourceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceType.push Fixnum.from_json(_item)
                 else
                   @resourceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceType = _oa
            end
          end
        if !_o['assetId'].nil?
          _oa = _o['assetId']
            if(_oa.is_a? Hash)
              @assetId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetId.push Bignum.from_json(_item)
                 else
                   @assetId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetId = _oa
            end
          end
        if !_o['parentId'].nil?
          _oa = _o['parentId']
            if(_oa.is_a? Hash)
              @parentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentId.push Bignum.from_json(_item)
                 else
                   @parentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentId = _oa
            end
          end
        if !_o['parentPath'].nil?
          _oa = _o['parentPath']
            if(_oa.is_a? Hash)
              @parentPath = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentPath =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentPath = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentPath.push String.from_json(_item)
                 else
                   @parentPath.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentPath = _oa
            end
          end
        if !_o['isEncrypt'].nil?
          _oa = _o['isEncrypt']
            if(_oa.is_a? Hash)
              @isEncrypt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isEncrypt =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isEncrypt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isEncrypt.push Fixnum.from_json(_item)
                 else
                   @isEncrypt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isEncrypt = _oa
            end
          end
        if !_o['permMapList'].nil?
          _oa = _o['permMapList']
            if(_oa.is_a? Hash)
              @permMapList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permMapList =  Org::Apache::Ranger::View::VXPermMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permMapList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permMapList.push Org::Apache::Ranger::View::VXPermMap.from_json(_item)
                 else
                   @permMapList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permMapList = _oa
            end
          end
        if !_o['auditList'].nil?
          _oa = _o['auditList']
            if(_oa.is_a? Hash)
              @auditList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditList =  Org::Apache::Ranger::View::VXAuditMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditList.push Org::Apache::Ranger::View::VXAuditMap.from_json(_item)
                 else
                   @auditList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditList = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Fixnum.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['resourceGroup'].nil?
          _oa = _o['resourceGroup']
            if(_oa.is_a? Hash)
              @resourceGroup = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceGroup =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceGroup = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceGroup.push String.from_json(_item)
                 else
                   @resourceGroup.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceGroup = _oa
            end
          end
        if !_o['databases'].nil?
          _oa = _o['databases']
            if(_oa.is_a? Hash)
              @databases = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @databases =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @databases = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @databases.push String.from_json(_item)
                 else
                   @databases.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @databases = _oa
            end
          end
        if !_o['tables'].nil?
          _oa = _o['tables']
            if(_oa.is_a? Hash)
              @tables = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tables =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tables = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tables.push String.from_json(_item)
                 else
                   @tables.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tables = _oa
            end
          end
        if !_o['columnFamilies'].nil?
          _oa = _o['columnFamilies']
            if(_oa.is_a? Hash)
              @columnFamilies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columnFamilies =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columnFamilies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columnFamilies.push String.from_json(_item)
                 else
                   @columnFamilies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columnFamilies = _oa
            end
          end
        if !_o['columns'].nil?
          _oa = _o['columns']
            if(_oa.is_a? Hash)
              @columns = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columns =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columns = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columns.push String.from_json(_item)
                 else
                   @columns.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columns = _oa
            end
          end
        if !_o['udfs'].nil?
          _oa = _o['udfs']
            if(_oa.is_a? Hash)
              @udfs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @udfs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @udfs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @udfs.push String.from_json(_item)
                 else
                   @udfs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @udfs = _oa
            end
          end
        if !_o['assetName'].nil?
          _oa = _o['assetName']
            if(_oa.is_a? Hash)
              @assetName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetName.push String.from_json(_item)
                 else
                   @assetName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetName = _oa
            end
          end
        if !_o['assetType'].nil?
          _oa = _o['assetType']
            if(_oa.is_a? Hash)
              @assetType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetType.push Fixnum.from_json(_item)
                 else
                   @assetType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetType = _oa
            end
          end
        if !_o['resourceStatus'].nil?
          _oa = _o['resourceStatus']
            if(_oa.is_a? Hash)
              @resourceStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceStatus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceStatus.push Fixnum.from_json(_item)
                 else
                   @resourceStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceStatus = _oa
            end
          end
        if !_o['tableType'].nil?
          _oa = _o['tableType']
            if(_oa.is_a? Hash)
              @tableType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tableType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tableType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tableType.push Fixnum.from_json(_item)
                 else
                   @tableType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tableType = _oa
            end
          end
        if !_o['columnType'].nil?
          _oa = _o['columnType']
            if(_oa.is_a? Hash)
              @columnType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columnType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columnType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columnType.push Fixnum.from_json(_item)
                 else
                   @columnType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columnType = _oa
            end
          end
        if !_o['topologies'].nil?
          _oa = _o['topologies']
            if(_oa.is_a? Hash)
              @topologies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @topologies =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @topologies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @topologies.push String.from_json(_item)
                 else
                   @topologies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @topologies = _oa
            end
          end
        if !_o['services'].nil?
          _oa = _o['services']
            if(_oa.is_a? Hash)
              @services = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @services =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @services = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @services.push String.from_json(_item)
                 else
                   @services.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @services = _oa
            end
          end
        if !_o['checkParentPermission'].nil?
          _oa = _o['checkParentPermission']
            if(_oa.is_a? Hash)
              @checkParentPermission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @checkParentPermission =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @checkParentPermission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @checkParentPermission.push Fixnum.from_json(_item)
                 else
                   @checkParentPermission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @checkParentPermission = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
    end

    # constructs a VXResource from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerPluginInfoList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :pluginInfoList

    # the json hash for this RangerPluginInfoList
    def to_jaxb_json_hash
      _h = super
      if !pluginInfoList.nil?
        _ha = Array.new
        pluginInfoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['pluginInfoList'] = _ha
      end
      return _h
    end

    #initializes this RangerPluginInfoList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['pluginInfoList'].nil?
          _oa = _o['pluginInfoList']
            if(_oa.is_a? Hash)
              @pluginInfoList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pluginInfoList =  Org::Apache::Ranger::Plugin::Model::RangerPluginInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pluginInfoList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pluginInfoList.push Org::Apache::Ranger::Plugin::Model::RangerPluginInfo.from_json(_item)
                 else
                   @pluginInfoList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pluginInfoList = _oa
            end
          end
    end

    # constructs a RangerPluginInfoList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAsset < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;name&lt;/b&gt;.
    attr_accessor :name
    # String - value of member attribute &lt;b&gt;description&lt;/b&gt;.
    attr_accessor :description
    # int - value of member attribute &lt;b&gt;activeStatus&lt;/b&gt;.
    attr_accessor :activeStatus
    # int - value of member attribute &lt;b&gt;assetType&lt;/b&gt;.
    attr_accessor :assetType
    # String - value of member attribute &lt;b&gt;config&lt;/b&gt;.
    attr_accessor :config
    # boolean - value of member attribute &lt;b&gt;supportNative&lt;/b&gt;.
    attr_accessor :supportNative
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXAsset
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['activeStatus'] = activeStatus.to_jaxb_json_hash unless activeStatus.nil?
      _h['assetType'] = assetType.to_jaxb_json_hash unless assetType.nil?
      _h['config'] = config.to_jaxb_json_hash unless config.nil?
      _h['supportNative'] = supportNative.to_jaxb_json_hash unless supportNative.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXAsset with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['activeStatus'].nil?
          _oa = _o['activeStatus']
            if(_oa.is_a? Hash)
              @activeStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @activeStatus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @activeStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @activeStatus.push Fixnum.from_json(_item)
                 else
                   @activeStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @activeStatus = _oa
            end
          end
        if !_o['assetType'].nil?
          _oa = _o['assetType']
            if(_oa.is_a? Hash)
              @assetType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetType.push Fixnum.from_json(_item)
                 else
                   @assetType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetType = _oa
            end
          end
        if !_o['config'].nil?
          _oa = _o['config']
            if(_oa.is_a? Hash)
              @config = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @config =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @config = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @config.push String.from_json(_item)
                 else
                   @config.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @config = _oa
            end
          end
        if !_o['supportNative'].nil?
          _oa = _o['supportNative']
            if(_oa.is_a? Hash)
              @supportNative = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @supportNative =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @supportNative = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @supportNative.push Boolean.from_json(_item)
                 else
                   @supportNative.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @supportNative = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXAsset from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXTrxLog < Org::Apache::Ranger::View::VXDataObject 

    # int - value of member attribute &lt;b&gt;objectClassType&lt;/b&gt;.
    attr_accessor :objectClassType
    # Long - value of member attribute &lt;b&gt;objectId&lt;/b&gt;.
    attr_accessor :objectId
    # Long - value of member attribute &lt;b&gt;parentObjectId&lt;/b&gt;.
    attr_accessor :parentObjectId
    # int - value of member attribute &lt;b&gt;parentObjectClassType&lt;/b&gt;.
    attr_accessor :parentObjectClassType
    # String - value of member attribute &lt;b&gt;parentObjectName&lt;/b&gt;.
    attr_accessor :parentObjectName
    # String - value of member attribute &lt;b&gt;objectName&lt;/b&gt;.
    attr_accessor :objectName
    # String - value of member attribute &lt;b&gt;attributeName&lt;/b&gt;.
    attr_accessor :attributeName
    # String - value of member attribute &lt;b&gt;previousValue&lt;/b&gt;.
    attr_accessor :previousValue
    # String - value of member attribute &lt;b&gt;newValue&lt;/b&gt;.
    attr_accessor :newValue
    # String - value of member attribute &lt;b&gt;transactionId&lt;/b&gt;.
    attr_accessor :transactionId
    # String - value of member attribute &lt;b&gt;action&lt;/b&gt;.
    attr_accessor :action
    # String - value of member attribute &lt;b&gt;sessionId&lt;/b&gt;.
    attr_accessor :sessionId
    # String - value of member attribute &lt;b&gt;requestId&lt;/b&gt;.
    attr_accessor :requestId
    # String - value of member attribute &lt;b&gt;sessionType&lt;/b&gt;.
    attr_accessor :sessionType

    # the json hash for this VXTrxLog
    def to_jaxb_json_hash
      _h = super
      _h['objectClassType'] = objectClassType.to_jaxb_json_hash unless objectClassType.nil?
      _h['objectId'] = objectId.to_jaxb_json_hash unless objectId.nil?
      _h['parentObjectId'] = parentObjectId.to_jaxb_json_hash unless parentObjectId.nil?
      _h['parentObjectClassType'] = parentObjectClassType.to_jaxb_json_hash unless parentObjectClassType.nil?
      _h['parentObjectName'] = parentObjectName.to_jaxb_json_hash unless parentObjectName.nil?
      _h['objectName'] = objectName.to_jaxb_json_hash unless objectName.nil?
      _h['attributeName'] = attributeName.to_jaxb_json_hash unless attributeName.nil?
      _h['previousValue'] = previousValue.to_jaxb_json_hash unless previousValue.nil?
      _h['newValue'] = newValue.to_jaxb_json_hash unless newValue.nil?
      _h['transactionId'] = transactionId.to_jaxb_json_hash unless transactionId.nil?
      _h['action'] = action.to_jaxb_json_hash unless action.nil?
      _h['sessionId'] = sessionId.to_jaxb_json_hash unless sessionId.nil?
      _h['requestId'] = requestId.to_jaxb_json_hash unless requestId.nil?
      _h['sessionType'] = sessionType.to_jaxb_json_hash unless sessionType.nil?
      return _h
    end

    #initializes this VXTrxLog with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['objectClassType'].nil?
          _oa = _o['objectClassType']
            if(_oa.is_a? Hash)
              @objectClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectClassType.push Fixnum.from_json(_item)
                 else
                   @objectClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectClassType = _oa
            end
          end
        if !_o['objectId'].nil?
          _oa = _o['objectId']
            if(_oa.is_a? Hash)
              @objectId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectId.push Bignum.from_json(_item)
                 else
                   @objectId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectId = _oa
            end
          end
        if !_o['parentObjectId'].nil?
          _oa = _o['parentObjectId']
            if(_oa.is_a? Hash)
              @parentObjectId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentObjectId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentObjectId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentObjectId.push Bignum.from_json(_item)
                 else
                   @parentObjectId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentObjectId = _oa
            end
          end
        if !_o['parentObjectClassType'].nil?
          _oa = _o['parentObjectClassType']
            if(_oa.is_a? Hash)
              @parentObjectClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentObjectClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentObjectClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentObjectClassType.push Fixnum.from_json(_item)
                 else
                   @parentObjectClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentObjectClassType = _oa
            end
          end
        if !_o['parentObjectName'].nil?
          _oa = _o['parentObjectName']
            if(_oa.is_a? Hash)
              @parentObjectName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentObjectName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentObjectName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentObjectName.push String.from_json(_item)
                 else
                   @parentObjectName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentObjectName = _oa
            end
          end
        if !_o['objectName'].nil?
          _oa = _o['objectName']
            if(_oa.is_a? Hash)
              @objectName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectName.push String.from_json(_item)
                 else
                   @objectName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectName = _oa
            end
          end
        if !_o['attributeName'].nil?
          _oa = _o['attributeName']
            if(_oa.is_a? Hash)
              @attributeName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributeName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributeName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributeName.push String.from_json(_item)
                 else
                   @attributeName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributeName = _oa
            end
          end
        if !_o['previousValue'].nil?
          _oa = _o['previousValue']
            if(_oa.is_a? Hash)
              @previousValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @previousValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @previousValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @previousValue.push String.from_json(_item)
                 else
                   @previousValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @previousValue = _oa
            end
          end
        if !_o['newValue'].nil?
          _oa = _o['newValue']
            if(_oa.is_a? Hash)
              @newValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @newValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @newValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @newValue.push String.from_json(_item)
                 else
                   @newValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @newValue = _oa
            end
          end
        if !_o['transactionId'].nil?
          _oa = _o['transactionId']
            if(_oa.is_a? Hash)
              @transactionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transactionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transactionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transactionId.push String.from_json(_item)
                 else
                   @transactionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transactionId = _oa
            end
          end
        if !_o['action'].nil?
          _oa = _o['action']
            if(_oa.is_a? Hash)
              @action = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @action =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @action = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @action.push String.from_json(_item)
                 else
                   @action.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @action = _oa
            end
          end
        if !_o['sessionId'].nil?
          _oa = _o['sessionId']
            if(_oa.is_a? Hash)
              @sessionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionId.push String.from_json(_item)
                 else
                   @sessionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionId = _oa
            end
          end
        if !_o['requestId'].nil?
          _oa = _o['requestId']
            if(_oa.is_a? Hash)
              @requestId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestId.push String.from_json(_item)
                 else
                   @requestId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestId = _oa
            end
          end
        if !_o['sessionType'].nil?
          _oa = _o['sessionType']
            if(_oa.is_a? Hash)
              @sessionType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionType.push String.from_json(_item)
                 else
                   @sessionType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionType = _oa
            end
          end
    end

    # constructs a VXTrxLog from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPolicies

    # the json hash for this VXPolicyList
    def to_jaxb_json_hash
      _h = super
      if !vXPolicies.nil?
        _ha = Array.new
        vXPolicies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPolicies'] = _ha
      end
      return _h
    end

    #initializes this VXPolicyList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPolicies'].nil?
          _oa = _o['vXPolicies']
            if(_oa.is_a? Hash)
              @vXPolicies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPolicies =  Org::Apache::Ranger::View::VXPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPolicies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPolicies.push Org::Apache::Ranger::View::VXPolicy.from_json(_item)
                 else
                   @vXPolicies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPolicies = _oa
            end
          end
    end

    # constructs a VXPolicyList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPermMapList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPermMaps

    # the json hash for this VXPermMapList
    def to_jaxb_json_hash
      _h = super
      if !vXPermMaps.nil?
        _ha = Array.new
        vXPermMaps.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPermMaps'] = _ha
      end
      return _h
    end

    #initializes this VXPermMapList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPermMaps'].nil?
          _oa = _o['vXPermMaps']
            if(_oa.is_a? Hash)
              @vXPermMaps = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPermMaps =  Org::Apache::Ranger::View::VXPermMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPermMaps = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPermMaps.push Org::Apache::Ranger::View::VXPermMap.from_json(_item)
                 else
                   @vXPermMaps.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPermMaps = _oa
            end
          end
    end

    # constructs a VXPermMapList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUgsyncAuditInfo < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :eventTime
    # (no documentation provided)
    attr_accessor :userName
    # (no documentation provided)
    attr_accessor :noOfNewUsers
    # (no documentation provided)
    attr_accessor :noOfModifiedUsers
    # (no documentation provided)
    attr_accessor :noOfNewGroups
    # (no documentation provided)
    attr_accessor :noOfModifiedGroups
    # (no documentation provided)
    attr_accessor :syncSource
    # (no documentation provided)
    attr_accessor :ldapSyncSourceInfo
    # (no documentation provided)
    attr_accessor :fileSyncSourceInfo
    # (no documentation provided)
    attr_accessor :unixSyncSourceInfo
    # (no documentation provided)
    attr_accessor :sessionId
    # (no documentation provided)
    attr_accessor :syncSourceInfo

    # the json hash for this VXUgsyncAuditInfo
    def to_jaxb_json_hash
      _h = super
      _h['eventTime'] = eventTime.to_jaxb_json_hash unless eventTime.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['noOfNewUsers'] = noOfNewUsers.to_jaxb_json_hash unless noOfNewUsers.nil?
      _h['noOfModifiedUsers'] = noOfModifiedUsers.to_jaxb_json_hash unless noOfModifiedUsers.nil?
      _h['noOfNewGroups'] = noOfNewGroups.to_jaxb_json_hash unless noOfNewGroups.nil?
      _h['noOfModifiedGroups'] = noOfModifiedGroups.to_jaxb_json_hash unless noOfModifiedGroups.nil?
      _h['syncSource'] = syncSource.to_jaxb_json_hash unless syncSource.nil?
      _h['ldapSyncSourceInfo'] = ldapSyncSourceInfo.to_jaxb_json_hash unless ldapSyncSourceInfo.nil?
      _h['fileSyncSourceInfo'] = fileSyncSourceInfo.to_jaxb_json_hash unless fileSyncSourceInfo.nil?
      _h['unixSyncSourceInfo'] = unixSyncSourceInfo.to_jaxb_json_hash unless unixSyncSourceInfo.nil?
      _h['sessionId'] = sessionId.to_jaxb_json_hash unless sessionId.nil?
      _h['syncSourceInfo'] = syncSourceInfo.to_jaxb_json_hash unless syncSourceInfo.nil?
      return _h
    end

    #initializes this VXUgsyncAuditInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['eventTime'].nil?
          _oa = _o['eventTime']
            if(_oa.is_a? Hash)
              @eventTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventTime.push Time.from_json(_item)
                 else
                   @eventTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventTime = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['noOfNewUsers'].nil?
          _oa = _o['noOfNewUsers']
            if(_oa.is_a? Hash)
              @noOfNewUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @noOfNewUsers =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @noOfNewUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @noOfNewUsers.push Bignum.from_json(_item)
                 else
                   @noOfNewUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @noOfNewUsers = _oa
            end
          end
        if !_o['noOfModifiedUsers'].nil?
          _oa = _o['noOfModifiedUsers']
            if(_oa.is_a? Hash)
              @noOfModifiedUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @noOfModifiedUsers =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @noOfModifiedUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @noOfModifiedUsers.push Bignum.from_json(_item)
                 else
                   @noOfModifiedUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @noOfModifiedUsers = _oa
            end
          end
        if !_o['noOfNewGroups'].nil?
          _oa = _o['noOfNewGroups']
            if(_oa.is_a? Hash)
              @noOfNewGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @noOfNewGroups =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @noOfNewGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @noOfNewGroups.push Bignum.from_json(_item)
                 else
                   @noOfNewGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @noOfNewGroups = _oa
            end
          end
        if !_o['noOfModifiedGroups'].nil?
          _oa = _o['noOfModifiedGroups']
            if(_oa.is_a? Hash)
              @noOfModifiedGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @noOfModifiedGroups =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @noOfModifiedGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @noOfModifiedGroups.push Bignum.from_json(_item)
                 else
                   @noOfModifiedGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @noOfModifiedGroups = _oa
            end
          end
        if !_o['syncSource'].nil?
          _oa = _o['syncSource']
            if(_oa.is_a? Hash)
              @syncSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncSource =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncSource.push String.from_json(_item)
                 else
                   @syncSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncSource = _oa
            end
          end
        if !_o['ldapSyncSourceInfo'].nil?
          _oa = _o['ldapSyncSourceInfo']
            if(_oa.is_a? Hash)
              @ldapSyncSourceInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ldapSyncSourceInfo =  Org::Apache::Ranger::View::VXLdapSyncSourceInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ldapSyncSourceInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ldapSyncSourceInfo.push Org::Apache::Ranger::View::VXLdapSyncSourceInfo.from_json(_item)
                 else
                   @ldapSyncSourceInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ldapSyncSourceInfo = _oa
            end
          end
        if !_o['fileSyncSourceInfo'].nil?
          _oa = _o['fileSyncSourceInfo']
            if(_oa.is_a? Hash)
              @fileSyncSourceInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fileSyncSourceInfo =  Org::Apache::Ranger::View::VXFileSyncSourceInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fileSyncSourceInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fileSyncSourceInfo.push Org::Apache::Ranger::View::VXFileSyncSourceInfo.from_json(_item)
                 else
                   @fileSyncSourceInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fileSyncSourceInfo = _oa
            end
          end
        if !_o['unixSyncSourceInfo'].nil?
          _oa = _o['unixSyncSourceInfo']
            if(_oa.is_a? Hash)
              @unixSyncSourceInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unixSyncSourceInfo =  Org::Apache::Ranger::View::VXUnixSyncSourceInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unixSyncSourceInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unixSyncSourceInfo.push Org::Apache::Ranger::View::VXUnixSyncSourceInfo.from_json(_item)
                 else
                   @unixSyncSourceInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unixSyncSourceInfo = _oa
            end
          end
        if !_o['sessionId'].nil?
          _oa = _o['sessionId']
            if(_oa.is_a? Hash)
              @sessionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionId.push String.from_json(_item)
                 else
                   @sessionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionId = _oa
            end
          end
        if !_o['syncSourceInfo'].nil?
          _oa = _o['syncSourceInfo']
            if(_oa.is_a? Hash)
              @syncSourceInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncSourceInfo =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncSourceInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncSourceInfo.push Hash.from_json(_item)
                 else
                   @syncSourceInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncSourceInfo = _oa
            end
          end
    end

    # constructs a VXUgsyncAuditInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPortalUserList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPortalUsers

    # the json hash for this VXPortalUserList
    def to_jaxb_json_hash
      _h = super
      if !vXPortalUsers.nil?
        _ha = Array.new
        vXPortalUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPortalUsers'] = _ha
      end
      return _h
    end

    #initializes this VXPortalUserList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPortalUsers'].nil?
          _oa = _o['vXPortalUsers']
            if(_oa.is_a? Hash)
              @vXPortalUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPortalUsers =  Org::Apache::Ranger::View::VXPortalUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPortalUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPortalUsers.push Org::Apache::Ranger::View::VXPortalUser.from_json(_item)
                 else
                   @vXPortalUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPortalUsers = _oa
            end
          end
    end

    # constructs a VXPortalUserList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicy < Org::Apache::Ranger::View::VXDataObject 

    # String - value of member attribute &lt;b&gt;policyName&lt;/b&gt;.
    attr_accessor :policyName
    # String - value of member attribute &lt;b&gt;resourceName&lt;/b&gt;.
    attr_accessor :resourceName
    # String - value of member attribute &lt;b&gt;description&lt;/b&gt;.
    attr_accessor :description
    # String - value of member attribute &lt;b&gt;repositoryName&lt;/b&gt;.
    attr_accessor :repositoryName
    # String - value of member attribute &lt;b&gt;repositoryType&lt;/b&gt;.
    attr_accessor :repositoryType
    # List&lt;VXPermObj&gt; - value of member attribute &lt;b&gt;permMapList&lt;/b&gt;.
    attr_accessor :permMapList
    # String - value of member attribute &lt;b&gt;tables&lt;/b&gt;.
    attr_accessor :tables
    # String - value of member attribute &lt;b&gt;columnFamilies&lt;/b&gt;.
    attr_accessor :columnFamilies
    # String - value of member attribute &lt;b&gt;columns&lt;/b&gt;.
    attr_accessor :columns
    # String - value of member attribute &lt;b&gt;databases&lt;/b&gt;.
    attr_accessor :databases
    # String - value of member attribute &lt;b&gt;udfs&lt;/b&gt;.
    attr_accessor :udfs
    # String - value of member attribute &lt;b&gt;tableType&lt;/b&gt;.
    attr_accessor :tableType
    # String - value of member attribute &lt;b&gt;columnType&lt;/b&gt;.
    attr_accessor :columnType
    # String - value of member attribute &lt;b&gt;topologies&lt;/b&gt;.
    attr_accessor :topologies
    # String - value of member attribute &lt;b&gt;services&lt;/b&gt;.
    attr_accessor :services
    # boolean - value of member attribute &lt;b&gt;isEnable&lt;/b&gt;.
    attr_accessor :isEnabled
    # boolean - value of member attribute &lt;b&gt;isRecursive&lt;/b&gt;.
    attr_accessor :isRecursive
    # boolean - value of member attribute &lt;b&gt;isAuditEnabled&lt;/b&gt;.
    attr_accessor :isAuditEnabled
    # String - value of member attribute &lt;b&gt;version&lt;/b&gt;.
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :grantor
    # (no documentation provided)
    attr_accessor :replacePerm
    # (no documentation provided)
    attr_accessor :policyLabel
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VXPolicy
    def to_jaxb_json_hash
      _h = super
      _h['policyName'] = policyName.to_jaxb_json_hash unless policyName.nil?
      _h['resourceName'] = resourceName.to_jaxb_json_hash unless resourceName.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['repositoryName'] = repositoryName.to_jaxb_json_hash unless repositoryName.nil?
      _h['repositoryType'] = repositoryType.to_jaxb_json_hash unless repositoryType.nil?
      if !permMapList.nil?
        _ha = Array.new
        permMapList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permMapList'] = _ha
      end
      _h['tables'] = tables.to_jaxb_json_hash unless tables.nil?
      _h['columnFamilies'] = columnFamilies.to_jaxb_json_hash unless columnFamilies.nil?
      _h['columns'] = columns.to_jaxb_json_hash unless columns.nil?
      _h['databases'] = databases.to_jaxb_json_hash unless databases.nil?
      _h['udfs'] = udfs.to_jaxb_json_hash unless udfs.nil?
      _h['tableType'] = tableType.to_jaxb_json_hash unless tableType.nil?
      _h['columnType'] = columnType.to_jaxb_json_hash unless columnType.nil?
      _h['topologies'] = topologies.to_jaxb_json_hash unless topologies.nil?
      _h['services'] = services.to_jaxb_json_hash unless services.nil?
      _h['isEnabled'] = isEnabled.to_jaxb_json_hash unless isEnabled.nil?
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['isAuditEnabled'] = isAuditEnabled.to_jaxb_json_hash unless isAuditEnabled.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['grantor'] = grantor.to_jaxb_json_hash unless grantor.nil?
      _h['replacePerm'] = replacePerm.to_jaxb_json_hash unless replacePerm.nil?
      _h['policyLabel'] = policyLabel.to_jaxb_json_hash unless policyLabel.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VXPolicy with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['policyName'].nil?
          _oa = _o['policyName']
            if(_oa.is_a? Hash)
              @policyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyName.push String.from_json(_item)
                 else
                   @policyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyName = _oa
            end
          end
        if !_o['resourceName'].nil?
          _oa = _o['resourceName']
            if(_oa.is_a? Hash)
              @resourceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceName.push String.from_json(_item)
                 else
                   @resourceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceName = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['repositoryName'].nil?
          _oa = _o['repositoryName']
            if(_oa.is_a? Hash)
              @repositoryName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repositoryName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repositoryName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repositoryName.push String.from_json(_item)
                 else
                   @repositoryName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repositoryName = _oa
            end
          end
        if !_o['repositoryType'].nil?
          _oa = _o['repositoryType']
            if(_oa.is_a? Hash)
              @repositoryType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repositoryType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repositoryType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repositoryType.push String.from_json(_item)
                 else
                   @repositoryType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repositoryType = _oa
            end
          end
        if !_o['permMapList'].nil?
          _oa = _o['permMapList']
            if(_oa.is_a? Hash)
              @permMapList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permMapList =  Org::Apache::Ranger::View::VXPermObj.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permMapList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permMapList.push Org::Apache::Ranger::View::VXPermObj.from_json(_item)
                 else
                   @permMapList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permMapList = _oa
            end
          end
        if !_o['tables'].nil?
          _oa = _o['tables']
            if(_oa.is_a? Hash)
              @tables = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tables =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tables = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tables.push String.from_json(_item)
                 else
                   @tables.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tables = _oa
            end
          end
        if !_o['columnFamilies'].nil?
          _oa = _o['columnFamilies']
            if(_oa.is_a? Hash)
              @columnFamilies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columnFamilies =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columnFamilies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columnFamilies.push String.from_json(_item)
                 else
                   @columnFamilies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columnFamilies = _oa
            end
          end
        if !_o['columns'].nil?
          _oa = _o['columns']
            if(_oa.is_a? Hash)
              @columns = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columns =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columns = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columns.push String.from_json(_item)
                 else
                   @columns.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columns = _oa
            end
          end
        if !_o['databases'].nil?
          _oa = _o['databases']
            if(_oa.is_a? Hash)
              @databases = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @databases =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @databases = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @databases.push String.from_json(_item)
                 else
                   @databases.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @databases = _oa
            end
          end
        if !_o['udfs'].nil?
          _oa = _o['udfs']
            if(_oa.is_a? Hash)
              @udfs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @udfs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @udfs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @udfs.push String.from_json(_item)
                 else
                   @udfs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @udfs = _oa
            end
          end
        if !_o['tableType'].nil?
          _oa = _o['tableType']
            if(_oa.is_a? Hash)
              @tableType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tableType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tableType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tableType.push String.from_json(_item)
                 else
                   @tableType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tableType = _oa
            end
          end
        if !_o['columnType'].nil?
          _oa = _o['columnType']
            if(_oa.is_a? Hash)
              @columnType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columnType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columnType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columnType.push String.from_json(_item)
                 else
                   @columnType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columnType = _oa
            end
          end
        if !_o['topologies'].nil?
          _oa = _o['topologies']
            if(_oa.is_a? Hash)
              @topologies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @topologies =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @topologies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @topologies.push String.from_json(_item)
                 else
                   @topologies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @topologies = _oa
            end
          end
        if !_o['services'].nil?
          _oa = _o['services']
            if(_oa.is_a? Hash)
              @services = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @services =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @services = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @services.push String.from_json(_item)
                 else
                   @services.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @services = _oa
            end
          end
        if !_o['isEnabled'].nil?
          _oa = _o['isEnabled']
            if(_oa.is_a? Hash)
              @isEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isEnabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isEnabled.push Boolean.from_json(_item)
                 else
                   @isEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isEnabled = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Boolean.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['isAuditEnabled'].nil?
          _oa = _o['isAuditEnabled']
            if(_oa.is_a? Hash)
              @isAuditEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAuditEnabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAuditEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAuditEnabled.push Boolean.from_json(_item)
                 else
                   @isAuditEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAuditEnabled = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push String.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['grantor'].nil?
          _oa = _o['grantor']
            if(_oa.is_a? Hash)
              @grantor = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grantor =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grantor = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grantor.push String.from_json(_item)
                 else
                   @grantor.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grantor = _oa
            end
          end
        if !_o['replacePerm'].nil?
          _oa = _o['replacePerm']
            if(_oa.is_a? Hash)
              @replacePerm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @replacePerm =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @replacePerm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @replacePerm.push Boolean.from_json(_item)
                 else
                   @replacePerm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @replacePerm = _oa
            end
          end
        if !_o['policyLabel'].nil?
          _oa = _o['policyLabel']
            if(_oa.is_a? Hash)
              @policyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyLabel.push String.from_json(_item)
                 else
                   @policyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyLabel = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VXPolicy from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuthSessionList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAuthSessions

    # the json hash for this VXAuthSessionList
    def to_jaxb_json_hash
      _h = super
      if !vXAuthSessions.nil?
        _ha = Array.new
        vXAuthSessions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAuthSessions'] = _ha
      end
      return _h
    end

    #initializes this VXAuthSessionList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAuthSessions'].nil?
          _oa = _o['vXAuthSessions']
            if(_oa.is_a? Hash)
              @vXAuthSessions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAuthSessions =  Org::Apache::Ranger::View::VXAuthSession.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAuthSessions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAuthSessions.push Org::Apache::Ranger::View::VXAuthSession.from_json(_item)
                 else
                   @vXAuthSessions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAuthSessions = _oa
            end
          end
    end

    # constructs a VXAuthSessionList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerExportPolicyList < Org::Apache::Ranger::View::RangerPolicyList 

    # (no documentation provided)
    attr_accessor :metaDataInfo

    # the json hash for this RangerExportPolicyList
    def to_jaxb_json_hash
      _h = super
      _h['metaDataInfo'] = metaDataInfo.to_jaxb_json_hash unless metaDataInfo.nil?
      return _h
    end

    #initializes this RangerExportPolicyList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['metaDataInfo'].nil?
          _oa = _o['metaDataInfo']
            if(_oa.is_a? Hash)
              @metaDataInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @metaDataInfo =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @metaDataInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @metaDataInfo.push Hash.from_json(_item)
                 else
                   @metaDataInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @metaDataInfo = _oa
            end
          end
    end

    # constructs a RangerExportPolicyList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerEnumElementDef 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :itemId

    # the json hash for this RangerEnumElementDef
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      return _h
    end

    # the json (string form) for this RangerEnumElementDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerEnumElementDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
    end

    # constructs a RangerEnumElementDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuthSessionList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAuthSessions

    # the json hash for this VXAuthSessionList
    def to_jaxb_json_hash
      _h = super
      if !vXAuthSessions.nil?
        _ha = Array.new
        vXAuthSessions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAuthSessions'] = _ha
      end
      return _h
    end

    #initializes this VXAuthSessionList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAuthSessions'].nil?
          _oa = _o['vXAuthSessions']
            if(_oa.is_a? Hash)
              @vXAuthSessions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAuthSessions =  Org::Apache::Ranger::View::VXAuthSession.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAuthSessions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAuthSessions.push Org::Apache::Ranger::View::VXAuthSession.from_json(_item)
                 else
                   @vXAuthSessions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAuthSessions = _oa
            end
          end
    end

    # constructs a VXAuthSessionList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RecurrenceSchedule 

    # (no documentation provided)
    attr_accessor :dayOfMonth
    # (no documentation provided)
    attr_accessor :minute
    # (no documentation provided)
    attr_accessor :hour
    # (no documentation provided)
    attr_accessor :dayOfWeek
    # (no documentation provided)
    attr_accessor :month
    # (no documentation provided)
    attr_accessor :year

    # the json hash for this RecurrenceSchedule
    def to_jaxb_json_hash
      _h = {}
      _h['dayOfMonth'] = dayOfMonth.to_jaxb_json_hash unless dayOfMonth.nil?
      _h['minute'] = minute.to_jaxb_json_hash unless minute.nil?
      _h['hour'] = hour.to_jaxb_json_hash unless hour.nil?
      _h['dayOfWeek'] = dayOfWeek.to_jaxb_json_hash unless dayOfWeek.nil?
      _h['month'] = month.to_jaxb_json_hash unless month.nil?
      _h['year'] = year.to_jaxb_json_hash unless year.nil?
      return _h
    end

    # the json (string form) for this RecurrenceSchedule
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RecurrenceSchedule with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['dayOfMonth'].nil?
          _oa = _o['dayOfMonth']
            if(_oa.is_a? Hash)
              @dayOfMonth = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dayOfMonth =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dayOfMonth = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dayOfMonth.push String.from_json(_item)
                 else
                   @dayOfMonth.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dayOfMonth = _oa
            end
          end
        if !_o['minute'].nil?
          _oa = _o['minute']
            if(_oa.is_a? Hash)
              @minute = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minute =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minute = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minute.push String.from_json(_item)
                 else
                   @minute.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minute = _oa
            end
          end
        if !_o['hour'].nil?
          _oa = _o['hour']
            if(_oa.is_a? Hash)
              @hour = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hour =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hour = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hour.push String.from_json(_item)
                 else
                   @hour.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hour = _oa
            end
          end
        if !_o['dayOfWeek'].nil?
          _oa = _o['dayOfWeek']
            if(_oa.is_a? Hash)
              @dayOfWeek = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dayOfWeek =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dayOfWeek = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dayOfWeek.push String.from_json(_item)
                 else
                   @dayOfWeek.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dayOfWeek = _oa
            end
          end
        if !_o['month'].nil?
          _oa = _o['month']
            if(_oa.is_a? Hash)
              @month = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @month =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @month = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @month.push String.from_json(_item)
                 else
                   @month.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @month = _oa
            end
          end
        if !_o['year'].nil?
          _oa = _o['year']
            if(_oa.is_a? Hash)
              @year = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @year =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @year = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @year.push String.from_json(_item)
                 else
                   @year.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @year = _oa
            end
          end
    end

    # constructs a RecurrenceSchedule from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :updatedBy
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :createdBy
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :isEnabled

    # the json hash for this RangerBaseModelObject
    def to_jaxb_json_hash
      _h = {}
      _h['updatedBy'] = updatedBy.to_jaxb_json_hash unless updatedBy.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['createdBy'] = createdBy.to_jaxb_json_hash unless createdBy.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['isEnabled'] = isEnabled.to_jaxb_json_hash unless isEnabled.nil?
      return _h
    end

    # the json (string form) for this RangerBaseModelObject
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerBaseModelObject with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['updatedBy'].nil?
          _oa = _o['updatedBy']
            if(_oa.is_a? Hash)
              @updatedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedBy.push String.from_json(_item)
                 else
                   @updatedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedBy = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['createdBy'].nil?
          _oa = _o['createdBy']
            if(_oa.is_a? Hash)
              @createdBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createdBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createdBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createdBy.push String.from_json(_item)
                 else
                   @createdBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createdBy = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push Bignum.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['isEnabled'].nil?
          _oa = _o['isEnabled']
            if(_oa.is_a? Hash)
              @isEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isEnabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isEnabled.push Boolean.from_json(_item)
                 else
                   @isEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isEnabled = _oa
            end
          end
    end

    # constructs a RangerBaseModelObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicy < Org::Apache::Ranger::View::VXDataObject 

    # PolicyName
    attr_accessor :policyName
    # resourceName
    attr_accessor :resourceName
    # Description
    attr_accessor :description
    # Repository Name
    attr_accessor :repositoryName
    # Repository Type
    attr_accessor :repositoryType
    # List of permissions maps
    attr_accessor :permMapList
    # Tables
    attr_accessor :tables
    # Column families
    attr_accessor :columnFamilies
    # Columns
    attr_accessor :columns
    # Databases
    attr_accessor :databases
    # UDFs
    attr_accessor :udfs
    # Table Type
    attr_accessor :tableType
    # Resource ColumnType
    attr_accessor :columnType
    # Topologoies
    attr_accessor :topologies
    # Services
    attr_accessor :services
    # Resource/Policy Status, boolean values : true/false
    attr_accessor :isEnabled
    # Is recursive This attribute is of type enum CommonEnums::BooleanValue
    attr_accessor :isRecursive
    # Audit is enable or not.
    attr_accessor :isAuditEnabled
    # Version No of Project
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :grantor
    # (no documentation provided)
    attr_accessor :replacePerm
    # (no documentation provided)
    attr_accessor :policyLabel

    # the json hash for this VXPolicy
    def to_jaxb_json_hash
      _h = super
      _h['policyName'] = policyName.to_jaxb_json_hash unless policyName.nil?
      _h['resourceName'] = resourceName.to_jaxb_json_hash unless resourceName.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['repositoryName'] = repositoryName.to_jaxb_json_hash unless repositoryName.nil?
      _h['repositoryType'] = repositoryType.to_jaxb_json_hash unless repositoryType.nil?
      if !permMapList.nil?
        _ha = Array.new
        permMapList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permMapList'] = _ha
      end
      _h['tables'] = tables.to_jaxb_json_hash unless tables.nil?
      _h['columnFamilies'] = columnFamilies.to_jaxb_json_hash unless columnFamilies.nil?
      _h['columns'] = columns.to_jaxb_json_hash unless columns.nil?
      _h['databases'] = databases.to_jaxb_json_hash unless databases.nil?
      _h['udfs'] = udfs.to_jaxb_json_hash unless udfs.nil?
      _h['tableType'] = tableType.to_jaxb_json_hash unless tableType.nil?
      _h['columnType'] = columnType.to_jaxb_json_hash unless columnType.nil?
      _h['topologies'] = topologies.to_jaxb_json_hash unless topologies.nil?
      _h['services'] = services.to_jaxb_json_hash unless services.nil?
      _h['isEnabled'] = isEnabled.to_jaxb_json_hash unless isEnabled.nil?
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['isAuditEnabled'] = isAuditEnabled.to_jaxb_json_hash unless isAuditEnabled.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['grantor'] = grantor.to_jaxb_json_hash unless grantor.nil?
      _h['replacePerm'] = replacePerm.to_jaxb_json_hash unless replacePerm.nil?
      _h['policyLabel'] = policyLabel.to_jaxb_json_hash unless policyLabel.nil?
      return _h
    end

    #initializes this VXPolicy with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['policyName'].nil?
          _oa = _o['policyName']
            if(_oa.is_a? Hash)
              @policyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyName.push String.from_json(_item)
                 else
                   @policyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyName = _oa
            end
          end
        if !_o['resourceName'].nil?
          _oa = _o['resourceName']
            if(_oa.is_a? Hash)
              @resourceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceName.push String.from_json(_item)
                 else
                   @resourceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceName = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['repositoryName'].nil?
          _oa = _o['repositoryName']
            if(_oa.is_a? Hash)
              @repositoryName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repositoryName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repositoryName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repositoryName.push String.from_json(_item)
                 else
                   @repositoryName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repositoryName = _oa
            end
          end
        if !_o['repositoryType'].nil?
          _oa = _o['repositoryType']
            if(_oa.is_a? Hash)
              @repositoryType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repositoryType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repositoryType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repositoryType.push String.from_json(_item)
                 else
                   @repositoryType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repositoryType = _oa
            end
          end
        if !_o['permMapList'].nil?
          _oa = _o['permMapList']
            if(_oa.is_a? Hash)
              @permMapList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permMapList =  Org::Apache::Ranger::View::VXPermObj.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permMapList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permMapList.push Org::Apache::Ranger::View::VXPermObj.from_json(_item)
                 else
                   @permMapList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permMapList = _oa
            end
          end
        if !_o['tables'].nil?
          _oa = _o['tables']
            if(_oa.is_a? Hash)
              @tables = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tables =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tables = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tables.push String.from_json(_item)
                 else
                   @tables.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tables = _oa
            end
          end
        if !_o['columnFamilies'].nil?
          _oa = _o['columnFamilies']
            if(_oa.is_a? Hash)
              @columnFamilies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columnFamilies =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columnFamilies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columnFamilies.push String.from_json(_item)
                 else
                   @columnFamilies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columnFamilies = _oa
            end
          end
        if !_o['columns'].nil?
          _oa = _o['columns']
            if(_oa.is_a? Hash)
              @columns = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columns =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columns = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columns.push String.from_json(_item)
                 else
                   @columns.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columns = _oa
            end
          end
        if !_o['databases'].nil?
          _oa = _o['databases']
            if(_oa.is_a? Hash)
              @databases = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @databases =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @databases = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @databases.push String.from_json(_item)
                 else
                   @databases.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @databases = _oa
            end
          end
        if !_o['udfs'].nil?
          _oa = _o['udfs']
            if(_oa.is_a? Hash)
              @udfs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @udfs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @udfs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @udfs.push String.from_json(_item)
                 else
                   @udfs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @udfs = _oa
            end
          end
        if !_o['tableType'].nil?
          _oa = _o['tableType']
            if(_oa.is_a? Hash)
              @tableType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tableType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tableType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tableType.push String.from_json(_item)
                 else
                   @tableType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tableType = _oa
            end
          end
        if !_o['columnType'].nil?
          _oa = _o['columnType']
            if(_oa.is_a? Hash)
              @columnType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columnType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columnType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columnType.push String.from_json(_item)
                 else
                   @columnType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columnType = _oa
            end
          end
        if !_o['topologies'].nil?
          _oa = _o['topologies']
            if(_oa.is_a? Hash)
              @topologies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @topologies =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @topologies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @topologies.push String.from_json(_item)
                 else
                   @topologies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @topologies = _oa
            end
          end
        if !_o['services'].nil?
          _oa = _o['services']
            if(_oa.is_a? Hash)
              @services = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @services =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @services = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @services.push String.from_json(_item)
                 else
                   @services.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @services = _oa
            end
          end
        if !_o['isEnabled'].nil?
          _oa = _o['isEnabled']
            if(_oa.is_a? Hash)
              @isEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isEnabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isEnabled.push Boolean.from_json(_item)
                 else
                   @isEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isEnabled = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Boolean.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['isAuditEnabled'].nil?
          _oa = _o['isAuditEnabled']
            if(_oa.is_a? Hash)
              @isAuditEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAuditEnabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAuditEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAuditEnabled.push Boolean.from_json(_item)
                 else
                   @isAuditEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAuditEnabled = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push String.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
        if !_o['grantor'].nil?
          _oa = _o['grantor']
            if(_oa.is_a? Hash)
              @grantor = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grantor =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grantor = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grantor.push String.from_json(_item)
                 else
                   @grantor.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grantor = _oa
            end
          end
        if !_o['replacePerm'].nil?
          _oa = _o['replacePerm']
            if(_oa.is_a? Hash)
              @replacePerm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @replacePerm =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @replacePerm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @replacePerm.push Boolean.from_json(_item)
                 else
                   @replacePerm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @replacePerm = _oa
            end
          end
        if !_o['policyLabel'].nil?
          _oa = _o['policyLabel']
            if(_oa.is_a? Hash)
              @policyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyLabel.push String.from_json(_item)
                 else
                   @policyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyLabel = _oa
            end
          end
    end

    # constructs a VXPolicy from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXMessage < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # Message key
    attr_accessor :name
    # Resource bundle key
    attr_accessor :rbKey
    # Message description. Use rbKey for doing localized lookup
    attr_accessor :message
    # Id of the object to which this message is related to
    attr_accessor :objectId
    # Name of the field or attribute to which this message is related to
    attr_accessor :fieldName

    # the json hash for this VXMessage
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['rbKey'] = rbKey.to_jaxb_json_hash unless rbKey.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      _h['objectId'] = objectId.to_jaxb_json_hash unless objectId.nil?
      _h['fieldName'] = fieldName.to_jaxb_json_hash unless fieldName.nil?
      return _h
    end

    #initializes this VXMessage with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['rbKey'].nil?
          _oa = _o['rbKey']
            if(_oa.is_a? Hash)
              @rbKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKey.push String.from_json(_item)
                 else
                   @rbKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKey = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
        if !_o['objectId'].nil?
          _oa = _o['objectId']
            if(_oa.is_a? Hash)
              @objectId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectId.push Bignum.from_json(_item)
                 else
                   @objectId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectId = _oa
            end
          end
        if !_o['fieldName'].nil?
          _oa = _o['fieldName']
            if(_oa.is_a? Hash)
              @fieldName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fieldName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fieldName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fieldName.push String.from_json(_item)
                 else
                   @fieldName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fieldName = _oa
            end
          end
    end

    # constructs a VXMessage from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPortalUserList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPortalUsers

    # the json hash for this VXPortalUserList
    def to_jaxb_json_hash
      _h = super
      if !vXPortalUsers.nil?
        _ha = Array.new
        vXPortalUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPortalUsers'] = _ha
      end
      return _h
    end

    #initializes this VXPortalUserList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPortalUsers'].nil?
          _oa = _o['vXPortalUsers']
            if(_oa.is_a? Hash)
              @vXPortalUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPortalUsers =  Org::Apache::Ranger::View::VXPortalUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPortalUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPortalUsers.push Org::Apache::Ranger::View::VXPortalUser.from_json(_item)
                 else
                   @vXPortalUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPortalUsers = _oa
            end
          end
    end

    # constructs a VXPortalUserList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyConditionDef 

    # (no documentation provided)
    attr_accessor :evaluator
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :validationMessage
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :uiHint
    # (no documentation provided)
    attr_accessor :validationRegEx
    # (no documentation provided)
    attr_accessor :rbKeyValidationMessage
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :evaluatorOptions

    # the json hash for this RangerPolicyConditionDef
    def to_jaxb_json_hash
      _h = {}
      _h['evaluator'] = evaluator.to_jaxb_json_hash unless evaluator.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['validationMessage'] = validationMessage.to_jaxb_json_hash unless validationMessage.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['uiHint'] = uiHint.to_jaxb_json_hash unless uiHint.nil?
      _h['validationRegEx'] = validationRegEx.to_jaxb_json_hash unless validationRegEx.nil?
      _h['rbKeyValidationMessage'] = rbKeyValidationMessage.to_jaxb_json_hash unless rbKeyValidationMessage.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['evaluatorOptions'] = evaluatorOptions.to_jaxb_json_hash unless evaluatorOptions.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyConditionDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyConditionDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['evaluator'].nil?
          _oa = _o['evaluator']
            if(_oa.is_a? Hash)
              @evaluator = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @evaluator =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @evaluator = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @evaluator.push String.from_json(_item)
                 else
                   @evaluator.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @evaluator = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['validationMessage'].nil?
          _oa = _o['validationMessage']
            if(_oa.is_a? Hash)
              @validationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationMessage.push String.from_json(_item)
                 else
                   @validationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationMessage = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['uiHint'].nil?
          _oa = _o['uiHint']
            if(_oa.is_a? Hash)
              @uiHint = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uiHint =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uiHint = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uiHint.push String.from_json(_item)
                 else
                   @uiHint.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uiHint = _oa
            end
          end
        if !_o['validationRegEx'].nil?
          _oa = _o['validationRegEx']
            if(_oa.is_a? Hash)
              @validationRegEx = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationRegEx =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationRegEx = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationRegEx.push String.from_json(_item)
                 else
                   @validationRegEx.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationRegEx = _oa
            end
          end
        if !_o['rbKeyValidationMessage'].nil?
          _oa = _o['rbKeyValidationMessage']
            if(_oa.is_a? Hash)
              @rbKeyValidationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyValidationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyValidationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyValidationMessage.push String.from_json(_item)
                 else
                   @rbKeyValidationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyValidationMessage = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['evaluatorOptions'].nil?
          _oa = _o['evaluatorOptions']
            if(_oa.is_a? Hash)
              @evaluatorOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @evaluatorOptions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @evaluatorOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @evaluatorOptions.push Hash.from_json(_item)
                 else
                   @evaluatorOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @evaluatorOptions = _oa
            end
          end
    end

    # constructs a RangerPolicyConditionDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXTrxLog < Org::Apache::Ranger::View::VXDataObject 

    # Name of the class to which the object id belongs to
    # This attribute is of type enum CommonEnums::ClassTypes
    attr_accessor :objectClassType
    # Id of the object to which this notes refers to
    attr_accessor :objectId
    # Object Id of the parent object
    attr_accessor :parentObjectId
    # Object Class Type of the parent object
    attr_accessor :parentObjectClassType
    # Name of the parent object name that was changed
    attr_accessor :parentObjectName
    # Name of the object name that was changed
    attr_accessor :objectName
    # Name of the attribute that was changed
    attr_accessor :attributeName
    # Previous value
    attr_accessor :previousValue
    # New value
    attr_accessor :newValue
    # Transaction id
    attr_accessor :transactionId
    # Action of the transaction
    attr_accessor :action
    # Session Id
    attr_accessor :sessionId
    # Request Id
    attr_accessor :requestId
    # Session Type
    attr_accessor :sessionType

    # the json hash for this VXTrxLog
    def to_jaxb_json_hash
      _h = super
      _h['objectClassType'] = objectClassType.to_jaxb_json_hash unless objectClassType.nil?
      _h['objectId'] = objectId.to_jaxb_json_hash unless objectId.nil?
      _h['parentObjectId'] = parentObjectId.to_jaxb_json_hash unless parentObjectId.nil?
      _h['parentObjectClassType'] = parentObjectClassType.to_jaxb_json_hash unless parentObjectClassType.nil?
      _h['parentObjectName'] = parentObjectName.to_jaxb_json_hash unless parentObjectName.nil?
      _h['objectName'] = objectName.to_jaxb_json_hash unless objectName.nil?
      _h['attributeName'] = attributeName.to_jaxb_json_hash unless attributeName.nil?
      _h['previousValue'] = previousValue.to_jaxb_json_hash unless previousValue.nil?
      _h['newValue'] = newValue.to_jaxb_json_hash unless newValue.nil?
      _h['transactionId'] = transactionId.to_jaxb_json_hash unless transactionId.nil?
      _h['action'] = action.to_jaxb_json_hash unless action.nil?
      _h['sessionId'] = sessionId.to_jaxb_json_hash unless sessionId.nil?
      _h['requestId'] = requestId.to_jaxb_json_hash unless requestId.nil?
      _h['sessionType'] = sessionType.to_jaxb_json_hash unless sessionType.nil?
      return _h
    end

    #initializes this VXTrxLog with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['objectClassType'].nil?
          _oa = _o['objectClassType']
            if(_oa.is_a? Hash)
              @objectClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectClassType.push Fixnum.from_json(_item)
                 else
                   @objectClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectClassType = _oa
            end
          end
        if !_o['objectId'].nil?
          _oa = _o['objectId']
            if(_oa.is_a? Hash)
              @objectId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectId.push Bignum.from_json(_item)
                 else
                   @objectId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectId = _oa
            end
          end
        if !_o['parentObjectId'].nil?
          _oa = _o['parentObjectId']
            if(_oa.is_a? Hash)
              @parentObjectId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentObjectId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentObjectId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentObjectId.push Bignum.from_json(_item)
                 else
                   @parentObjectId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentObjectId = _oa
            end
          end
        if !_o['parentObjectClassType'].nil?
          _oa = _o['parentObjectClassType']
            if(_oa.is_a? Hash)
              @parentObjectClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentObjectClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentObjectClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentObjectClassType.push Fixnum.from_json(_item)
                 else
                   @parentObjectClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentObjectClassType = _oa
            end
          end
        if !_o['parentObjectName'].nil?
          _oa = _o['parentObjectName']
            if(_oa.is_a? Hash)
              @parentObjectName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentObjectName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentObjectName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentObjectName.push String.from_json(_item)
                 else
                   @parentObjectName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentObjectName = _oa
            end
          end
        if !_o['objectName'].nil?
          _oa = _o['objectName']
            if(_oa.is_a? Hash)
              @objectName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectName.push String.from_json(_item)
                 else
                   @objectName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectName = _oa
            end
          end
        if !_o['attributeName'].nil?
          _oa = _o['attributeName']
            if(_oa.is_a? Hash)
              @attributeName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributeName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributeName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributeName.push String.from_json(_item)
                 else
                   @attributeName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributeName = _oa
            end
          end
        if !_o['previousValue'].nil?
          _oa = _o['previousValue']
            if(_oa.is_a? Hash)
              @previousValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @previousValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @previousValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @previousValue.push String.from_json(_item)
                 else
                   @previousValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @previousValue = _oa
            end
          end
        if !_o['newValue'].nil?
          _oa = _o['newValue']
            if(_oa.is_a? Hash)
              @newValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @newValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @newValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @newValue.push String.from_json(_item)
                 else
                   @newValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @newValue = _oa
            end
          end
        if !_o['transactionId'].nil?
          _oa = _o['transactionId']
            if(_oa.is_a? Hash)
              @transactionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transactionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transactionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transactionId.push String.from_json(_item)
                 else
                   @transactionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transactionId = _oa
            end
          end
        if !_o['action'].nil?
          _oa = _o['action']
            if(_oa.is_a? Hash)
              @action = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @action =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @action = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @action.push String.from_json(_item)
                 else
                   @action.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @action = _oa
            end
          end
        if !_o['sessionId'].nil?
          _oa = _o['sessionId']
            if(_oa.is_a? Hash)
              @sessionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionId.push String.from_json(_item)
                 else
                   @sessionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionId = _oa
            end
          end
        if !_o['requestId'].nil?
          _oa = _o['requestId']
            if(_oa.is_a? Hash)
              @requestId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestId.push String.from_json(_item)
                 else
                   @requestId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestId = _oa
            end
          end
        if !_o['sessionType'].nil?
          _oa = _o['sessionType']
            if(_oa.is_a? Hash)
              @sessionType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionType.push String.from_json(_item)
                 else
                   @sessionType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionType = _oa
            end
          end
    end

    # constructs a VXTrxLog from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPolicies

    # the json hash for this VXPolicyList
    def to_jaxb_json_hash
      _h = super
      if !vXPolicies.nil?
        _ha = Array.new
        vXPolicies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPolicies'] = _ha
      end
      return _h
    end

    #initializes this VXPolicyList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPolicies'].nil?
          _oa = _o['vXPolicies']
            if(_oa.is_a? Hash)
              @vXPolicies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPolicies =  Org::Apache::Ranger::View::VXPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPolicies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPolicies.push Org::Apache::Ranger::View::VXPolicy.from_json(_item)
                 else
                   @vXPolicies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPolicies = _oa
            end
          end
    end

    # constructs a VXPolicyList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerTagDef < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :attributeDefs
    # (no documentation provided)
    attr_accessor :source

    # the json hash for this RangerTagDef
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !attributeDefs.nil?
        _ha = Array.new
        attributeDefs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['attributeDefs'] = _ha
      end
      _h['source'] = source.to_jaxb_json_hash unless source.nil?
      return _h
    end

    #initializes this RangerTagDef with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['attributeDefs'].nil?
          _oa = _o['attributeDefs']
            if(_oa.is_a? Hash)
              @attributeDefs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributeDefs =  Org::Apache::Ranger::Plugin::Model::RangerTagAttributeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributeDefs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributeDefs.push Org::Apache::Ranger::Plugin::Model::RangerTagAttributeDef.from_json(_item)
                 else
                   @attributeDefs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributeDefs = _oa
            end
          end
        if !_o['source'].nil?
          _oa = _o['source']
            if(_oa.is_a? Hash)
              @source = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @source =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @source = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @source.push String.from_json(_item)
                 else
                   @source.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @source = _oa
            end
          end
    end

    # constructs a RangerTagDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUgsyncAuditInfo < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :eventTime
    # (no documentation provided)
    attr_accessor :userName
    # (no documentation provided)
    attr_accessor :noOfNewUsers
    # (no documentation provided)
    attr_accessor :noOfNewGroups
    # (no documentation provided)
    attr_accessor :noOfModifiedUsers
    # (no documentation provided)
    attr_accessor :noOfModifiedGroups
    # (no documentation provided)
    attr_accessor :syncSource
    # (no documentation provided)
    attr_accessor :sessionId
    # (no documentation provided)
    attr_accessor :syncSourceInfo
    # (no documentation provided)
    attr_accessor :ldapSyncSourceInfo
    # (no documentation provided)
    attr_accessor :fileSyncSourceInfo
    # (no documentation provided)
    attr_accessor :unixSyncSourceInfo

    # the json hash for this VXUgsyncAuditInfo
    def to_jaxb_json_hash
      _h = super
      _h['eventTime'] = eventTime.to_jaxb_json_hash unless eventTime.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['noOfNewUsers'] = noOfNewUsers.to_jaxb_json_hash unless noOfNewUsers.nil?
      _h['noOfNewGroups'] = noOfNewGroups.to_jaxb_json_hash unless noOfNewGroups.nil?
      _h['noOfModifiedUsers'] = noOfModifiedUsers.to_jaxb_json_hash unless noOfModifiedUsers.nil?
      _h['noOfModifiedGroups'] = noOfModifiedGroups.to_jaxb_json_hash unless noOfModifiedGroups.nil?
      _h['syncSource'] = syncSource.to_jaxb_json_hash unless syncSource.nil?
      _h['sessionId'] = sessionId.to_jaxb_json_hash unless sessionId.nil?
      _h['syncSourceInfo'] = syncSourceInfo.to_jaxb_json_hash unless syncSourceInfo.nil?
      _h['ldapSyncSourceInfo'] = ldapSyncSourceInfo.to_jaxb_json_hash unless ldapSyncSourceInfo.nil?
      _h['fileSyncSourceInfo'] = fileSyncSourceInfo.to_jaxb_json_hash unless fileSyncSourceInfo.nil?
      _h['unixSyncSourceInfo'] = unixSyncSourceInfo.to_jaxb_json_hash unless unixSyncSourceInfo.nil?
      return _h
    end

    #initializes this VXUgsyncAuditInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['eventTime'].nil?
          _oa = _o['eventTime']
            if(_oa.is_a? Hash)
              @eventTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventTime.push Time.from_json(_item)
                 else
                   @eventTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventTime = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['noOfNewUsers'].nil?
          _oa = _o['noOfNewUsers']
            if(_oa.is_a? Hash)
              @noOfNewUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @noOfNewUsers =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @noOfNewUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @noOfNewUsers.push Bignum.from_json(_item)
                 else
                   @noOfNewUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @noOfNewUsers = _oa
            end
          end
        if !_o['noOfNewGroups'].nil?
          _oa = _o['noOfNewGroups']
            if(_oa.is_a? Hash)
              @noOfNewGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @noOfNewGroups =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @noOfNewGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @noOfNewGroups.push Bignum.from_json(_item)
                 else
                   @noOfNewGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @noOfNewGroups = _oa
            end
          end
        if !_o['noOfModifiedUsers'].nil?
          _oa = _o['noOfModifiedUsers']
            if(_oa.is_a? Hash)
              @noOfModifiedUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @noOfModifiedUsers =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @noOfModifiedUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @noOfModifiedUsers.push Bignum.from_json(_item)
                 else
                   @noOfModifiedUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @noOfModifiedUsers = _oa
            end
          end
        if !_o['noOfModifiedGroups'].nil?
          _oa = _o['noOfModifiedGroups']
            if(_oa.is_a? Hash)
              @noOfModifiedGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @noOfModifiedGroups =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @noOfModifiedGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @noOfModifiedGroups.push Bignum.from_json(_item)
                 else
                   @noOfModifiedGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @noOfModifiedGroups = _oa
            end
          end
        if !_o['syncSource'].nil?
          _oa = _o['syncSource']
            if(_oa.is_a? Hash)
              @syncSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncSource =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncSource.push String.from_json(_item)
                 else
                   @syncSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncSource = _oa
            end
          end
        if !_o['sessionId'].nil?
          _oa = _o['sessionId']
            if(_oa.is_a? Hash)
              @sessionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionId.push String.from_json(_item)
                 else
                   @sessionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionId = _oa
            end
          end
        if !_o['syncSourceInfo'].nil?
          _oa = _o['syncSourceInfo']
            if(_oa.is_a? Hash)
              @syncSourceInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncSourceInfo =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncSourceInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncSourceInfo.push Hash.from_json(_item)
                 else
                   @syncSourceInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncSourceInfo = _oa
            end
          end
        if !_o['ldapSyncSourceInfo'].nil?
          _oa = _o['ldapSyncSourceInfo']
            if(_oa.is_a? Hash)
              @ldapSyncSourceInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ldapSyncSourceInfo =  Org::Apache::Ranger::View::VXLdapSyncSourceInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ldapSyncSourceInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ldapSyncSourceInfo.push Org::Apache::Ranger::View::VXLdapSyncSourceInfo.from_json(_item)
                 else
                   @ldapSyncSourceInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ldapSyncSourceInfo = _oa
            end
          end
        if !_o['fileSyncSourceInfo'].nil?
          _oa = _o['fileSyncSourceInfo']
            if(_oa.is_a? Hash)
              @fileSyncSourceInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fileSyncSourceInfo =  Org::Apache::Ranger::View::VXFileSyncSourceInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fileSyncSourceInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fileSyncSourceInfo.push Org::Apache::Ranger::View::VXFileSyncSourceInfo.from_json(_item)
                 else
                   @fileSyncSourceInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fileSyncSourceInfo = _oa
            end
          end
        if !_o['unixSyncSourceInfo'].nil?
          _oa = _o['unixSyncSourceInfo']
            if(_oa.is_a? Hash)
              @unixSyncSourceInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unixSyncSourceInfo =  Org::Apache::Ranger::View::VXUnixSyncSourceInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unixSyncSourceInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unixSyncSourceInfo.push Org::Apache::Ranger::View::VXUnixSyncSourceInfo.from_json(_item)
                 else
                   @unixSyncSourceInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unixSyncSourceInfo = _oa
            end
          end
    end

    # constructs a VXUgsyncAuditInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPermMapList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPermMaps

    # the json hash for this VXPermMapList
    def to_jaxb_json_hash
      _h = super
      if !vXPermMaps.nil?
        _ha = Array.new
        vXPermMaps.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPermMaps'] = _ha
      end
      return _h
    end

    #initializes this VXPermMapList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPermMaps'].nil?
          _oa = _o['vXPermMaps']
            if(_oa.is_a? Hash)
              @vXPermMaps = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPermMaps =  Org::Apache::Ranger::View::VXPermMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPermMaps = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPermMaps.push Org::Apache::Ranger::View::VXPermMap.from_json(_item)
                 else
                   @vXPermMaps.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPermMaps = _oa
            end
          end
    end

    # constructs a VXPermMapList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAsset < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # Description
    attr_accessor :description
    # Status
    # This attribute is of type enum CommonEnums::ActiveStatus
    attr_accessor :activeStatus
    # Type of asset
    # This attribute is of type enum CommonEnums::AssetType
    attr_accessor :assetType
    # Config in json format
    attr_accessor :config
    # Support native authorization
    attr_accessor :supportNative

    # the json hash for this VXAsset
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['activeStatus'] = activeStatus.to_jaxb_json_hash unless activeStatus.nil?
      _h['assetType'] = assetType.to_jaxb_json_hash unless assetType.nil?
      _h['config'] = config.to_jaxb_json_hash unless config.nil?
      _h['supportNative'] = supportNative.to_jaxb_json_hash unless supportNative.nil?
      return _h
    end

    #initializes this VXAsset with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['activeStatus'].nil?
          _oa = _o['activeStatus']
            if(_oa.is_a? Hash)
              @activeStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @activeStatus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @activeStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @activeStatus.push Fixnum.from_json(_item)
                 else
                   @activeStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @activeStatus = _oa
            end
          end
        if !_o['assetType'].nil?
          _oa = _o['assetType']
            if(_oa.is_a? Hash)
              @assetType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetType.push Fixnum.from_json(_item)
                 else
                   @assetType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetType = _oa
            end
          end
        if !_o['config'].nil?
          _oa = _o['config']
            if(_oa.is_a? Hash)
              @config = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @config =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @config = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @config.push String.from_json(_item)
                 else
                   @config.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @config = _oa
            end
          end
        if !_o['supportNative'].nil?
          _oa = _o['supportNative']
            if(_oa.is_a? Hash)
              @supportNative = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @supportNative =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @supportNative = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @supportNative.push Boolean.from_json(_item)
                 else
                   @supportNative.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @supportNative = _oa
            end
          end
    end

    # constructs a VXAsset from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerPluginInfoList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :pluginInfoList

    # the json hash for this RangerPluginInfoList
    def to_jaxb_json_hash
      _h = super
      if !pluginInfoList.nil?
        _ha = Array.new
        pluginInfoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['pluginInfoList'] = _ha
      end
      return _h
    end

    #initializes this RangerPluginInfoList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['pluginInfoList'].nil?
          _oa = _o['pluginInfoList']
            if(_oa.is_a? Hash)
              @pluginInfoList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pluginInfoList =  Org::Apache::Ranger::Plugin::Model::RangerPluginInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pluginInfoList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pluginInfoList.push Org::Apache::Ranger::Plugin::Model::RangerPluginInfo.from_json(_item)
                 else
                   @pluginInfoList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pluginInfoList = _oa
            end
          end
    end

    # constructs a RangerPluginInfoList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerTagAttributeDef 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this RangerTagAttributeDef
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this RangerTagAttributeDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerTagAttributeDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a RangerTagAttributeDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class ViewBaseBean 


    # the json hash for this ViewBaseBean
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this ViewBaseBean
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ViewBaseBean with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a ViewBaseBean from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUserList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXUsers

    # the json hash for this VXUserList
    def to_jaxb_json_hash
      _h = super
      if !vXUsers.nil?
        _ha = Array.new
        vXUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXUsers'] = _ha
      end
      return _h
    end

    #initializes this VXUserList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXUsers'].nil?
          _oa = _o['vXUsers']
            if(_oa.is_a? Hash)
              @vXUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXUsers =  Org::Apache::Ranger::View::VXUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXUsers.push Org::Apache::Ranger::View::VXUser.from_json(_item)
                 else
                   @vXUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXUsers = _oa
            end
          end
    end

    # constructs a VXUserList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuthSession < Org::Apache::Ranger::View::VXDataObject 

    # Login ID of the user
    attr_accessor :loginId
    # Id of the user
    attr_accessor :userId
    # Email address of the user
    attr_accessor :emailAddress
    # Is this user a test user?
    attr_accessor :isTestUser
    # First name of the user
    attr_accessor :firstName
    # Last name of the user
    attr_accessor :lastName
    # Public name of the user
    attr_accessor :publicScreenName
    # Family name of the user
    attr_accessor :familyScreenName
    # Date and time of authentication
    attr_accessor :authTime
    # Authentication status
    # This attribute is of type enum XXAuthSession::AuthStatus
    attr_accessor :authStatus
    # Authentication type
    # This attribute is of type enum XXAuthSession::AuthType
    attr_accessor :authType
    # Authentication provider
    # This attribute is of type enum XXAuthSession::AuthType
    attr_accessor :authProvider
    # Type of the device
    # This attribute is of type enum CommonEnums::DeviceType
    attr_accessor :deviceType
    # IP where the request came from
    attr_accessor :requestIP
    # City name
    attr_accessor :cityName
    # State name
    attr_accessor :stateName
    # Country name
    attr_accessor :countryName
    # UserAgent of the requesting device
    attr_accessor :requestUserAgent

    # the json hash for this VXAuthSession
    def to_jaxb_json_hash
      _h = super
      _h['loginId'] = loginId.to_jaxb_json_hash unless loginId.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['isTestUser'] = isTestUser.to_jaxb_json_hash unless isTestUser.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['publicScreenName'] = publicScreenName.to_jaxb_json_hash unless publicScreenName.nil?
      _h['familyScreenName'] = familyScreenName.to_jaxb_json_hash unless familyScreenName.nil?
      _h['authTime'] = authTime.to_jaxb_json_hash unless authTime.nil?
      _h['authStatus'] = authStatus.to_jaxb_json_hash unless authStatus.nil?
      _h['authType'] = authType.to_jaxb_json_hash unless authType.nil?
      _h['authProvider'] = authProvider.to_jaxb_json_hash unless authProvider.nil?
      _h['deviceType'] = deviceType.to_jaxb_json_hash unless deviceType.nil?
      _h['requestIP'] = requestIP.to_jaxb_json_hash unless requestIP.nil?
      _h['cityName'] = cityName.to_jaxb_json_hash unless cityName.nil?
      _h['stateName'] = stateName.to_jaxb_json_hash unless stateName.nil?
      _h['countryName'] = countryName.to_jaxb_json_hash unless countryName.nil?
      _h['requestUserAgent'] = requestUserAgent.to_jaxb_json_hash unless requestUserAgent.nil?
      return _h
    end

    #initializes this VXAuthSession with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['loginId'].nil?
          _oa = _o['loginId']
            if(_oa.is_a? Hash)
              @loginId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginId.push String.from_json(_item)
                 else
                   @loginId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginId = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['isTestUser'].nil?
          _oa = _o['isTestUser']
            if(_oa.is_a? Hash)
              @isTestUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isTestUser =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isTestUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isTestUser.push Boolean.from_json(_item)
                 else
                   @isTestUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isTestUser = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['publicScreenName'].nil?
          _oa = _o['publicScreenName']
            if(_oa.is_a? Hash)
              @publicScreenName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicScreenName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicScreenName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicScreenName.push String.from_json(_item)
                 else
                   @publicScreenName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicScreenName = _oa
            end
          end
        if !_o['familyScreenName'].nil?
          _oa = _o['familyScreenName']
            if(_oa.is_a? Hash)
              @familyScreenName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @familyScreenName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @familyScreenName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @familyScreenName.push String.from_json(_item)
                 else
                   @familyScreenName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @familyScreenName = _oa
            end
          end
        if !_o['authTime'].nil?
          _oa = _o['authTime']
            if(_oa.is_a? Hash)
              @authTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authTime.push Time.from_json(_item)
                 else
                   @authTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authTime = _oa
            end
          end
        if !_o['authStatus'].nil?
          _oa = _o['authStatus']
            if(_oa.is_a? Hash)
              @authStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authStatus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authStatus.push Fixnum.from_json(_item)
                 else
                   @authStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authStatus = _oa
            end
          end
        if !_o['authType'].nil?
          _oa = _o['authType']
            if(_oa.is_a? Hash)
              @authType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authType.push Fixnum.from_json(_item)
                 else
                   @authType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authType = _oa
            end
          end
        if !_o['authProvider'].nil?
          _oa = _o['authProvider']
            if(_oa.is_a? Hash)
              @authProvider = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authProvider =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authProvider = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authProvider.push Fixnum.from_json(_item)
                 else
                   @authProvider.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authProvider = _oa
            end
          end
        if !_o['deviceType'].nil?
          _oa = _o['deviceType']
            if(_oa.is_a? Hash)
              @deviceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @deviceType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @deviceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @deviceType.push Fixnum.from_json(_item)
                 else
                   @deviceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @deviceType = _oa
            end
          end
        if !_o['requestIP'].nil?
          _oa = _o['requestIP']
            if(_oa.is_a? Hash)
              @requestIP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestIP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestIP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestIP.push String.from_json(_item)
                 else
                   @requestIP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestIP = _oa
            end
          end
        if !_o['cityName'].nil?
          _oa = _o['cityName']
            if(_oa.is_a? Hash)
              @cityName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cityName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cityName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cityName.push String.from_json(_item)
                 else
                   @cityName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cityName = _oa
            end
          end
        if !_o['stateName'].nil?
          _oa = _o['stateName']
            if(_oa.is_a? Hash)
              @stateName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stateName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stateName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stateName.push String.from_json(_item)
                 else
                   @stateName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stateName = _oa
            end
          end
        if !_o['countryName'].nil?
          _oa = _o['countryName']
            if(_oa.is_a? Hash)
              @countryName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @countryName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @countryName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @countryName.push String.from_json(_item)
                 else
                   @countryName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @countryName = _oa
            end
          end
        if !_o['requestUserAgent'].nil?
          _oa = _o['requestUserAgent']
            if(_oa.is_a? Hash)
              @requestUserAgent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestUserAgent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestUserAgent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestUserAgent.push String.from_json(_item)
                 else
                   @requestUserAgent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestUserAgent = _oa
            end
          end
    end

    # constructs a VXAuthSession from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerValidityRecurrence 

    # (no documentation provided)
    attr_accessor :interval
    # (no documentation provided)
    attr_accessor :schedule

    # the json hash for this RangerValidityRecurrence
    def to_jaxb_json_hash
      _h = {}
      _h['interval'] = interval.to_jaxb_json_hash unless interval.nil?
      _h['schedule'] = schedule.to_jaxb_json_hash unless schedule.nil?
      return _h
    end

    # the json (string form) for this RangerValidityRecurrence
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerValidityRecurrence with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['interval'].nil?
          _oa = _o['interval']
            if(_oa.is_a? Hash)
              @interval = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @interval =  Org::Apache::Ranger::Plugin::Model::ValidityInterval.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @interval = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @interval.push Org::Apache::Ranger::Plugin::Model::ValidityInterval.from_json(_item)
                 else
                   @interval.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @interval = _oa
            end
          end
        if !_o['schedule'].nil?
          _oa = _o['schedule']
            if(_oa.is_a? Hash)
              @schedule = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @schedule =  Org::Apache::Ranger::Plugin::Model::RecurrenceSchedule.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @schedule = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @schedule.push Org::Apache::Ranger::Plugin::Model::RecurrenceSchedule.from_json(_item)
                 else
                   @schedule.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @schedule = _oa
            end
          end
    end

    # constructs a RangerValidityRecurrence from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXTrxLogList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXTrxLogs

    # the json hash for this VXTrxLogList
    def to_jaxb_json_hash
      _h = super
      if !vXTrxLogs.nil?
        _ha = Array.new
        vXTrxLogs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXTrxLogs'] = _ha
      end
      return _h
    end

    #initializes this VXTrxLogList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXTrxLogs'].nil?
          _oa = _o['vXTrxLogs']
            if(_oa.is_a? Hash)
              @vXTrxLogs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXTrxLogs =  Org::Apache::Ranger::View::VXTrxLog.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXTrxLogs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXTrxLogs.push Org::Apache::Ranger::View::VXTrxLog.from_json(_item)
                 else
                   @vXTrxLogs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXTrxLogs = _oa
            end
          end
    end

    # constructs a VXTrxLogList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class VList < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # (no documentation provided)
    attr_accessor :listSize
    # (no documentation provided)
    attr_accessor :list
    # (no documentation provided)
    attr_accessor :startIndex
    # (no documentation provided)
    attr_accessor :pageSize
    # (no documentation provided)
    attr_accessor :totalCount
    # int - value of member attribute &lt;b&gt;resultSize&lt;/b&gt;.
    attr_accessor :resultSize
    # (no documentation provided)
    attr_accessor :sortType
    # (no documentation provided)
    attr_accessor :sortBy

    # the json hash for this VList
    def to_jaxb_json_hash
      _h = super
      _h['listSize'] = listSize.to_jaxb_json_hash unless listSize.nil?
      if !list.nil?
        _ha = Array.new
        list.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['list'] = _ha
      end
      _h['startIndex'] = startIndex.to_jaxb_json_hash unless startIndex.nil?
      _h['pageSize'] = pageSize.to_jaxb_json_hash unless pageSize.nil?
      _h['totalCount'] = totalCount.to_jaxb_json_hash unless totalCount.nil?
      _h['resultSize'] = resultSize.to_jaxb_json_hash unless resultSize.nil?
      _h['sortType'] = sortType.to_jaxb_json_hash unless sortType.nil?
      _h['sortBy'] = sortBy.to_jaxb_json_hash unless sortBy.nil?
      return _h
    end

    #initializes this VList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['listSize'].nil?
          _oa = _o['listSize']
            if(_oa.is_a? Hash)
              @listSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listSize.push Fixnum.from_json(_item)
                 else
                   @listSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listSize = _oa
            end
          end
        if !_o['list'].nil?
          _oa = _o['list']
            if(_oa.is_a? Hash)
              @list = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @list =  ?.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @list = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @list.push ?.from_json(_item)
                 else
                   @list.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @list = _oa
            end
          end
        if !_o['startIndex'].nil?
          _oa = _o['startIndex']
            if(_oa.is_a? Hash)
              @startIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startIndex.push Fixnum.from_json(_item)
                 else
                   @startIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startIndex = _oa
            end
          end
        if !_o['pageSize'].nil?
          _oa = _o['pageSize']
            if(_oa.is_a? Hash)
              @pageSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pageSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pageSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pageSize.push Fixnum.from_json(_item)
                 else
                   @pageSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pageSize = _oa
            end
          end
        if !_o['totalCount'].nil?
          _oa = _o['totalCount']
            if(_oa.is_a? Hash)
              @totalCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalCount =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalCount.push Bignum.from_json(_item)
                 else
                   @totalCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalCount = _oa
            end
          end
        if !_o['resultSize'].nil?
          _oa = _o['resultSize']
            if(_oa.is_a? Hash)
              @resultSize = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resultSize =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resultSize = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resultSize.push Fixnum.from_json(_item)
                 else
                   @resultSize.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resultSize = _oa
            end
          end
        if !_o['sortType'].nil?
          _oa = _o['sortType']
            if(_oa.is_a? Hash)
              @sortType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sortType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sortType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sortType.push String.from_json(_item)
                 else
                   @sortType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sortType = _oa
            end
          end
        if !_o['sortBy'].nil?
          _oa = _o['sortBy']
            if(_oa.is_a? Hash)
              @sortBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sortBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sortBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sortBy.push String.from_json(_item)
                 else
                   @sortBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sortBy = _oa
            end
          end
    end

    # constructs a VList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuditMap < Org::Apache::Ranger::View::VXDataObject 

    # Id of the resource
    attr_accessor :resourceId
    # Id of the group
    attr_accessor :groupId
    # Id of the user
    attr_accessor :userId
    # Type of audit
    # This attribute is of type enum CommonEnums::XAAuditType
    attr_accessor :auditType

    # the json hash for this VXAuditMap
    def to_jaxb_json_hash
      _h = super
      _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
      _h['groupId'] = groupId.to_jaxb_json_hash unless groupId.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['auditType'] = auditType.to_jaxb_json_hash unless auditType.nil?
      return _h
    end

    #initializes this VXAuditMap with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['resourceId'].nil?
          _oa = _o['resourceId']
            if(_oa.is_a? Hash)
              @resourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceId.push Bignum.from_json(_item)
                 else
                   @resourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceId = _oa
            end
          end
        if !_o['groupId'].nil?
          _oa = _o['groupId']
            if(_oa.is_a? Hash)
              @groupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupId.push Bignum.from_json(_item)
                 else
                   @groupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupId = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['auditType'].nil?
          _oa = _o['auditType']
            if(_oa.is_a? Hash)
              @auditType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditType.push Fixnum.from_json(_item)
                 else
                   @auditType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditType = _oa
            end
          end
    end

    # constructs a VXAuditMap from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXLdapSyncSourceInfo 

    # (no documentation provided)
    attr_accessor :ldapUrl
    # (no documentation provided)
    attr_accessor :incrementalSycn
    # (no documentation provided)
    attr_accessor :groupSearchFirstEnabled
    # (no documentation provided)
    attr_accessor :groupSearchEnabled
    # (no documentation provided)
    attr_accessor :userSearchEnabled
    # (no documentation provided)
    attr_accessor :userSearchFilter
    # (no documentation provided)
    attr_accessor :groupSearchFilter
    # (no documentation provided)
    attr_accessor :groupHierarchyLevel
    # (no documentation provided)
    attr_accessor :totalUsersSynced
    # (no documentation provided)
    attr_accessor :totalGroupsSynced

    # the json hash for this VXLdapSyncSourceInfo
    def to_jaxb_json_hash
      _h = {}
      _h['ldapUrl'] = ldapUrl.to_jaxb_json_hash unless ldapUrl.nil?
      _h['incrementalSycn'] = incrementalSycn.to_jaxb_json_hash unless incrementalSycn.nil?
      _h['groupSearchFirstEnabled'] = groupSearchFirstEnabled.to_jaxb_json_hash unless groupSearchFirstEnabled.nil?
      _h['groupSearchEnabled'] = groupSearchEnabled.to_jaxb_json_hash unless groupSearchEnabled.nil?
      _h['userSearchEnabled'] = userSearchEnabled.to_jaxb_json_hash unless userSearchEnabled.nil?
      _h['userSearchFilter'] = userSearchFilter.to_jaxb_json_hash unless userSearchFilter.nil?
      _h['groupSearchFilter'] = groupSearchFilter.to_jaxb_json_hash unless groupSearchFilter.nil?
      _h['groupHierarchyLevel'] = groupHierarchyLevel.to_jaxb_json_hash unless groupHierarchyLevel.nil?
      _h['totalUsersSynced'] = totalUsersSynced.to_jaxb_json_hash unless totalUsersSynced.nil?
      _h['totalGroupsSynced'] = totalGroupsSynced.to_jaxb_json_hash unless totalGroupsSynced.nil?
      return _h
    end

    # the json (string form) for this VXLdapSyncSourceInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXLdapSyncSourceInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['ldapUrl'].nil?
          _oa = _o['ldapUrl']
            if(_oa.is_a? Hash)
              @ldapUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ldapUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ldapUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ldapUrl.push String.from_json(_item)
                 else
                   @ldapUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ldapUrl = _oa
            end
          end
        if !_o['incrementalSycn'].nil?
          _oa = _o['incrementalSycn']
            if(_oa.is_a? Hash)
              @incrementalSycn = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @incrementalSycn =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @incrementalSycn = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @incrementalSycn.push String.from_json(_item)
                 else
                   @incrementalSycn.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @incrementalSycn = _oa
            end
          end
        if !_o['groupSearchFirstEnabled'].nil?
          _oa = _o['groupSearchFirstEnabled']
            if(_oa.is_a? Hash)
              @groupSearchFirstEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupSearchFirstEnabled =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupSearchFirstEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupSearchFirstEnabled.push String.from_json(_item)
                 else
                   @groupSearchFirstEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupSearchFirstEnabled = _oa
            end
          end
        if !_o['groupSearchEnabled'].nil?
          _oa = _o['groupSearchEnabled']
            if(_oa.is_a? Hash)
              @groupSearchEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupSearchEnabled =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupSearchEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupSearchEnabled.push String.from_json(_item)
                 else
                   @groupSearchEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupSearchEnabled = _oa
            end
          end
        if !_o['userSearchEnabled'].nil?
          _oa = _o['userSearchEnabled']
            if(_oa.is_a? Hash)
              @userSearchEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSearchEnabled =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSearchEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSearchEnabled.push String.from_json(_item)
                 else
                   @userSearchEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSearchEnabled = _oa
            end
          end
        if !_o['userSearchFilter'].nil?
          _oa = _o['userSearchFilter']
            if(_oa.is_a? Hash)
              @userSearchFilter = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSearchFilter =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSearchFilter = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSearchFilter.push String.from_json(_item)
                 else
                   @userSearchFilter.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSearchFilter = _oa
            end
          end
        if !_o['groupSearchFilter'].nil?
          _oa = _o['groupSearchFilter']
            if(_oa.is_a? Hash)
              @groupSearchFilter = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupSearchFilter =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupSearchFilter = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupSearchFilter.push String.from_json(_item)
                 else
                   @groupSearchFilter.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupSearchFilter = _oa
            end
          end
        if !_o['groupHierarchyLevel'].nil?
          _oa = _o['groupHierarchyLevel']
            if(_oa.is_a? Hash)
              @groupHierarchyLevel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupHierarchyLevel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupHierarchyLevel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupHierarchyLevel.push String.from_json(_item)
                 else
                   @groupHierarchyLevel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupHierarchyLevel = _oa
            end
          end
        if !_o['totalUsersSynced'].nil?
          _oa = _o['totalUsersSynced']
            if(_oa.is_a? Hash)
              @totalUsersSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalUsersSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalUsersSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalUsersSynced.push Bignum.from_json(_item)
                 else
                   @totalUsersSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalUsersSynced = _oa
            end
          end
        if !_o['totalGroupsSynced'].nil?
          _oa = _o['totalGroupsSynced']
            if(_oa.is_a? Hash)
              @totalGroupsSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalGroupsSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalGroupsSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalGroupsSynced.push Bignum.from_json(_item)
                 else
                   @totalGroupsSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalGroupsSynced = _oa
            end
          end
    end

    # constructs a VXLdapSyncSourceInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPermMap < Org::Apache::Ranger::View::VXDataObject 

    # Group to which the permission belongs to
    attr_accessor :permGroup
    # Id of the resource
    attr_accessor :resourceId
    # Id of the group
    attr_accessor :groupId
    # Id of the user
    attr_accessor :userId
    # Permission for user or group
    # This attribute is of type enum CommonEnums::XAPermForType
    attr_accessor :permFor
    # Type of permission
    # This attribute is of type enum CommonEnums::XAPermType
    attr_accessor :permType
    # Grant is true and revoke is false
    attr_accessor :grantOrRevoke
    # Name of the group
    attr_accessor :groupName
    # Name of the user
    attr_accessor :userName
    # Is recursive
    # This attribute is of type enum CommonEnums::BooleanValue
    attr_accessor :isRecursive
    # Is wild card
    attr_accessor :isWildCard
    # IP address for groups
    attr_accessor :ipAddress

    # the json hash for this VXPermMap
    def to_jaxb_json_hash
      _h = super
      _h['permGroup'] = permGroup.to_jaxb_json_hash unless permGroup.nil?
      _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
      _h['groupId'] = groupId.to_jaxb_json_hash unless groupId.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['permFor'] = permFor.to_jaxb_json_hash unless permFor.nil?
      _h['permType'] = permType.to_jaxb_json_hash unless permType.nil?
      _h['grantOrRevoke'] = grantOrRevoke.to_jaxb_json_hash unless grantOrRevoke.nil?
      _h['groupName'] = groupName.to_jaxb_json_hash unless groupName.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['isWildCard'] = isWildCard.to_jaxb_json_hash unless isWildCard.nil?
      _h['ipAddress'] = ipAddress.to_jaxb_json_hash unless ipAddress.nil?
      return _h
    end

    #initializes this VXPermMap with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['permGroup'].nil?
          _oa = _o['permGroup']
            if(_oa.is_a? Hash)
              @permGroup = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permGroup =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permGroup = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permGroup.push String.from_json(_item)
                 else
                   @permGroup.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permGroup = _oa
            end
          end
        if !_o['resourceId'].nil?
          _oa = _o['resourceId']
            if(_oa.is_a? Hash)
              @resourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceId.push Bignum.from_json(_item)
                 else
                   @resourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceId = _oa
            end
          end
        if !_o['groupId'].nil?
          _oa = _o['groupId']
            if(_oa.is_a? Hash)
              @groupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupId.push Bignum.from_json(_item)
                 else
                   @groupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupId = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['permFor'].nil?
          _oa = _o['permFor']
            if(_oa.is_a? Hash)
              @permFor = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permFor =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permFor = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permFor.push Fixnum.from_json(_item)
                 else
                   @permFor.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permFor = _oa
            end
          end
        if !_o['permType'].nil?
          _oa = _o['permType']
            if(_oa.is_a? Hash)
              @permType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permType.push Fixnum.from_json(_item)
                 else
                   @permType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permType = _oa
            end
          end
        if !_o['grantOrRevoke'].nil?
          _oa = _o['grantOrRevoke']
            if(_oa.is_a? Hash)
              @grantOrRevoke = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grantOrRevoke =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grantOrRevoke = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grantOrRevoke.push Boolean.from_json(_item)
                 else
                   @grantOrRevoke.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grantOrRevoke = _oa
            end
          end
        if !_o['groupName'].nil?
          _oa = _o['groupName']
            if(_oa.is_a? Hash)
              @groupName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupName.push String.from_json(_item)
                 else
                   @groupName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupName = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Fixnum.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['isWildCard'].nil?
          _oa = _o['isWildCard']
            if(_oa.is_a? Hash)
              @isWildCard = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isWildCard =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isWildCard = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isWildCard.push Boolean.from_json(_item)
                 else
                   @isWildCard.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isWildCard = _oa
            end
          end
        if !_o['ipAddress'].nil?
          _oa = _o['ipAddress']
            if(_oa.is_a? Hash)
              @ipAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipAddress.push String.from_json(_item)
                 else
                   @ipAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipAddress = _oa
            end
          end
    end

    # constructs a VXPermMap from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class ValidityInterval 

    # (no documentation provided)
    attr_accessor :minutes
    # (no documentation provided)
    attr_accessor :days
    # (no documentation provided)
    attr_accessor :hours

    # the json hash for this ValidityInterval
    def to_jaxb_json_hash
      _h = {}
      _h['minutes'] = minutes.to_jaxb_json_hash unless minutes.nil?
      _h['days'] = days.to_jaxb_json_hash unless days.nil?
      _h['hours'] = hours.to_jaxb_json_hash unless hours.nil?
      return _h
    end

    # the json (string form) for this ValidityInterval
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ValidityInterval with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['minutes'].nil?
          _oa = _o['minutes']
            if(_oa.is_a? Hash)
              @minutes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minutes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minutes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minutes.push Fixnum.from_json(_item)
                 else
                   @minutes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minutes = _oa
            end
          end
        if !_o['days'].nil?
          _oa = _o['days']
            if(_oa.is_a? Hash)
              @days = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @days =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @days = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @days.push Fixnum.from_json(_item)
                 else
                   @days.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @days = _oa
            end
          end
        if !_o['hours'].nil?
          _oa = _o['hours']
            if(_oa.is_a? Hash)
              @hours = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hours =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hours = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hours.push Fixnum.from_json(_item)
                 else
                   @hours.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hours = _oa
            end
          end
    end

    # constructs a ValidityInterval from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerRowFilterPolicyItem < Org::Apache::Ranger::Plugin::Model::RangerPolicyItem 

    # (no documentation provided)
    attr_accessor :rowFilterInfo

    # the json hash for this RangerRowFilterPolicyItem
    def to_jaxb_json_hash
      _h = super
      _h['rowFilterInfo'] = rowFilterInfo.to_jaxb_json_hash unless rowFilterInfo.nil?
      return _h
    end

    #initializes this RangerRowFilterPolicyItem with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['rowFilterInfo'].nil?
          _oa = _o['rowFilterInfo']
            if(_oa.is_a? Hash)
              @rowFilterInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rowFilterInfo =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItemRowFilterInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rowFilterInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rowFilterInfo.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItemRowFilterInfo.from_json(_item)
                 else
                   @rowFilterInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rowFilterInfo = _oa
            end
          end
    end

    # constructs a RangerRowFilterPolicyItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerServiceList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :services

    # the json hash for this RangerServiceList
    def to_jaxb_json_hash
      _h = super
      if !services.nil?
        _ha = Array.new
        services.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['services'] = _ha
      end
      return _h
    end

    #initializes this RangerServiceList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['services'].nil?
          _oa = _o['services']
            if(_oa.is_a? Hash)
              @services = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @services =  Org::Apache::Ranger::Plugin::Model::RangerService.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @services = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @services.push Org::Apache::Ranger::Plugin::Model::RangerService.from_json(_item)
                 else
                   @services.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @services = _oa
            end
          end
    end

    # constructs a RangerServiceList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPluginInfo 

    # (no documentation provided)
    attr_accessor :hostName
    # (no documentation provided)
    attr_accessor :ipAddress
    # (no documentation provided)
    attr_accessor :info
    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :serviceName
    # (no documentation provided)
    attr_accessor :appType
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this RangerPluginInfo
    def to_jaxb_json_hash
      _h = {}
      _h['hostName'] = hostName.to_jaxb_json_hash unless hostName.nil?
      _h['ipAddress'] = ipAddress.to_jaxb_json_hash unless ipAddress.nil?
      _h['info'] = info.to_jaxb_json_hash unless info.nil?
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      _h['appType'] = appType.to_jaxb_json_hash unless appType.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this RangerPluginInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPluginInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['hostName'].nil?
          _oa = _o['hostName']
            if(_oa.is_a? Hash)
              @hostName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hostName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hostName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hostName.push String.from_json(_item)
                 else
                   @hostName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hostName = _oa
            end
          end
        if !_o['ipAddress'].nil?
          _oa = _o['ipAddress']
            if(_oa.is_a? Hash)
              @ipAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipAddress.push String.from_json(_item)
                 else
                   @ipAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipAddress = _oa
            end
          end
        if !_o['info'].nil?
          _oa = _o['info']
            if(_oa.is_a? Hash)
              @info = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @info =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @info = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @info.push Hash.from_json(_item)
                 else
                   @info.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @info = _oa
            end
          end
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
        if !_o['appType'].nil?
          _oa = _o['appType']
            if(_oa.is_a? Hash)
              @appType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @appType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @appType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @appType.push String.from_json(_item)
                 else
                   @appType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @appType = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a RangerPluginInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXResourceList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXResources

    # the json hash for this VXResourceList
    def to_jaxb_json_hash
      _h = super
      if !vXResources.nil?
        _ha = Array.new
        vXResources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXResources'] = _ha
      end
      return _h
    end

    #initializes this VXResourceList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXResources'].nil?
          _oa = _o['vXResources']
            if(_oa.is_a? Hash)
              @vXResources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXResources =  Org::Apache::Ranger::View::VXResource.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXResources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXResources.push Org::Apache::Ranger::View::VXResource.from_json(_item)
                 else
                   @vXResources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXResources = _oa
            end
          end
    end

    # constructs a VXResourceList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerServiceResource < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :resourceElements
    # (no documentation provided)
    attr_accessor :serviceName
    # (no documentation provided)
    attr_accessor :resourceSignature

    # the json hash for this RangerServiceResource
    def to_jaxb_json_hash
      _h = super
      _h['resourceElements'] = resourceElements.to_jaxb_json_hash unless resourceElements.nil?
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      _h['resourceSignature'] = resourceSignature.to_jaxb_json_hash unless resourceSignature.nil?
      return _h
    end

    #initializes this RangerServiceResource with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['resourceElements'].nil?
          _oa = _o['resourceElements']
            if(_oa.is_a? Hash)
              @resourceElements = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceElements =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceElements = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceElements.push Hash.from_json(_item)
                 else
                   @resourceElements.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceElements = _oa
            end
          end
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
        if !_o['resourceSignature'].nil?
          _oa = _o['resourceSignature']
            if(_oa.is_a? Hash)
              @resourceSignature = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceSignature =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceSignature = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceSignature.push String.from_json(_item)
                 else
                   @resourceSignature.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceSignature = _oa
            end
          end
    end

    # constructs a RangerServiceResource from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerServiceConfigDef 

    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :validationMessage
    # (no documentation provided)
    attr_accessor :uiHint
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :rbKeyValidationMessage
    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :defaultValue
    # (no documentation provided)
    attr_accessor :subType
    # (no documentation provided)
    attr_accessor :mandatory
    # (no documentation provided)
    attr_accessor :validationRegEx
    # (no documentation provided)
    attr_accessor :rbKeyLabel

    # the json hash for this RangerServiceConfigDef
    def to_jaxb_json_hash
      _h = {}
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['validationMessage'] = validationMessage.to_jaxb_json_hash unless validationMessage.nil?
      _h['uiHint'] = uiHint.to_jaxb_json_hash unless uiHint.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['rbKeyValidationMessage'] = rbKeyValidationMessage.to_jaxb_json_hash unless rbKeyValidationMessage.nil?
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['defaultValue'] = defaultValue.to_jaxb_json_hash unless defaultValue.nil?
      _h['subType'] = subType.to_jaxb_json_hash unless subType.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      _h['validationRegEx'] = validationRegEx.to_jaxb_json_hash unless validationRegEx.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      return _h
    end

    # the json (string form) for this RangerServiceConfigDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerServiceConfigDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['validationMessage'].nil?
          _oa = _o['validationMessage']
            if(_oa.is_a? Hash)
              @validationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationMessage.push String.from_json(_item)
                 else
                   @validationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationMessage = _oa
            end
          end
        if !_o['uiHint'].nil?
          _oa = _o['uiHint']
            if(_oa.is_a? Hash)
              @uiHint = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uiHint =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uiHint = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uiHint.push String.from_json(_item)
                 else
                   @uiHint.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uiHint = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['rbKeyValidationMessage'].nil?
          _oa = _o['rbKeyValidationMessage']
            if(_oa.is_a? Hash)
              @rbKeyValidationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyValidationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyValidationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyValidationMessage.push String.from_json(_item)
                 else
                   @rbKeyValidationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyValidationMessage = _oa
            end
          end
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['defaultValue'].nil?
          _oa = _o['defaultValue']
            if(_oa.is_a? Hash)
              @defaultValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultValue.push String.from_json(_item)
                 else
                   @defaultValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultValue = _oa
            end
          end
        if !_o['subType'].nil?
          _oa = _o['subType']
            if(_oa.is_a? Hash)
              @subType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subType.push String.from_json(_item)
                 else
                   @subType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subType = _oa
            end
          end
        if !_o['mandatory'].nil?
          _oa = _o['mandatory']
            if(_oa.is_a? Hash)
              @mandatory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mandatory =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mandatory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mandatory.push Boolean.from_json(_item)
                 else
                   @mandatory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mandatory = _oa
            end
          end
        if !_o['validationRegEx'].nil?
          _oa = _o['validationRegEx']
            if(_oa.is_a? Hash)
              @validationRegEx = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationRegEx =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationRegEx = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationRegEx.push String.from_json(_item)
                 else
                   @validationRegEx.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationRegEx = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
    end

    # constructs a RangerServiceConfigDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXResource < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :policyName
    # Description
    attr_accessor :description
    # Status
    # This attribute is of type enum CommonEnums::ResourceType
    attr_accessor :resourceType
    # Id of the asset
    attr_accessor :assetId
    # Id of the parent
    attr_accessor :parentId
    # Path for the parent
    attr_accessor :parentPath
    # Whether to encrypt this resource
    # This attribute is of type enum CommonEnums::BooleanValue
    attr_accessor :isEncrypt
    # List of permissions maps
    attr_accessor :permMapList
    # List of audits
    attr_accessor :auditList
    # Is recursive
    # This attribute is of type enum CommonEnums::BooleanValue
    attr_accessor :isRecursive
    # Group to which this resource belongs to
    attr_accessor :resourceGroup
    # Databases
    attr_accessor :databases
    # Tables
    attr_accessor :tables
    # Column families
    attr_accessor :columnFamilies
    # Columns
    attr_accessor :columns
    # UDFs
    attr_accessor :udfs
    # Asset Name
    attr_accessor :assetName
    # Asset Type
    attr_accessor :assetType
    # Resource Status
    attr_accessor :resourceStatus
    # Table Type
    attr_accessor :tableType
    # Resource Status
    attr_accessor :columnType
    # Check parent permission
    # This attribute is of type enum CommonEnums::BooleanValue
    attr_accessor :checkParentPermission
    # Topologoies
    attr_accessor :topologies
    # Services
    attr_accessor :services
    # guid
    attr_accessor :guid

    # the json hash for this VXResource
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['policyName'] = policyName.to_jaxb_json_hash unless policyName.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['resourceType'] = resourceType.to_jaxb_json_hash unless resourceType.nil?
      _h['assetId'] = assetId.to_jaxb_json_hash unless assetId.nil?
      _h['parentId'] = parentId.to_jaxb_json_hash unless parentId.nil?
      _h['parentPath'] = parentPath.to_jaxb_json_hash unless parentPath.nil?
      _h['isEncrypt'] = isEncrypt.to_jaxb_json_hash unless isEncrypt.nil?
      if !permMapList.nil?
        _ha = Array.new
        permMapList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permMapList'] = _ha
      end
      if !auditList.nil?
        _ha = Array.new
        auditList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['auditList'] = _ha
      end
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['resourceGroup'] = resourceGroup.to_jaxb_json_hash unless resourceGroup.nil?
      _h['databases'] = databases.to_jaxb_json_hash unless databases.nil?
      _h['tables'] = tables.to_jaxb_json_hash unless tables.nil?
      _h['columnFamilies'] = columnFamilies.to_jaxb_json_hash unless columnFamilies.nil?
      _h['columns'] = columns.to_jaxb_json_hash unless columns.nil?
      _h['udfs'] = udfs.to_jaxb_json_hash unless udfs.nil?
      _h['assetName'] = assetName.to_jaxb_json_hash unless assetName.nil?
      _h['assetType'] = assetType.to_jaxb_json_hash unless assetType.nil?
      _h['resourceStatus'] = resourceStatus.to_jaxb_json_hash unless resourceStatus.nil?
      _h['tableType'] = tableType.to_jaxb_json_hash unless tableType.nil?
      _h['columnType'] = columnType.to_jaxb_json_hash unless columnType.nil?
      _h['checkParentPermission'] = checkParentPermission.to_jaxb_json_hash unless checkParentPermission.nil?
      _h['topologies'] = topologies.to_jaxb_json_hash unless topologies.nil?
      _h['services'] = services.to_jaxb_json_hash unless services.nil?
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      return _h
    end

    #initializes this VXResource with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['policyName'].nil?
          _oa = _o['policyName']
            if(_oa.is_a? Hash)
              @policyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyName.push String.from_json(_item)
                 else
                   @policyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyName = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['resourceType'].nil?
          _oa = _o['resourceType']
            if(_oa.is_a? Hash)
              @resourceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceType.push Fixnum.from_json(_item)
                 else
                   @resourceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceType = _oa
            end
          end
        if !_o['assetId'].nil?
          _oa = _o['assetId']
            if(_oa.is_a? Hash)
              @assetId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetId.push Bignum.from_json(_item)
                 else
                   @assetId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetId = _oa
            end
          end
        if !_o['parentId'].nil?
          _oa = _o['parentId']
            if(_oa.is_a? Hash)
              @parentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentId.push Bignum.from_json(_item)
                 else
                   @parentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentId = _oa
            end
          end
        if !_o['parentPath'].nil?
          _oa = _o['parentPath']
            if(_oa.is_a? Hash)
              @parentPath = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentPath =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentPath = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentPath.push String.from_json(_item)
                 else
                   @parentPath.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentPath = _oa
            end
          end
        if !_o['isEncrypt'].nil?
          _oa = _o['isEncrypt']
            if(_oa.is_a? Hash)
              @isEncrypt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isEncrypt =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isEncrypt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isEncrypt.push Fixnum.from_json(_item)
                 else
                   @isEncrypt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isEncrypt = _oa
            end
          end
        if !_o['permMapList'].nil?
          _oa = _o['permMapList']
            if(_oa.is_a? Hash)
              @permMapList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permMapList =  Org::Apache::Ranger::View::VXPermMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permMapList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permMapList.push Org::Apache::Ranger::View::VXPermMap.from_json(_item)
                 else
                   @permMapList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permMapList = _oa
            end
          end
        if !_o['auditList'].nil?
          _oa = _o['auditList']
            if(_oa.is_a? Hash)
              @auditList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditList =  Org::Apache::Ranger::View::VXAuditMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditList.push Org::Apache::Ranger::View::VXAuditMap.from_json(_item)
                 else
                   @auditList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditList = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Fixnum.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['resourceGroup'].nil?
          _oa = _o['resourceGroup']
            if(_oa.is_a? Hash)
              @resourceGroup = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceGroup =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceGroup = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceGroup.push String.from_json(_item)
                 else
                   @resourceGroup.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceGroup = _oa
            end
          end
        if !_o['databases'].nil?
          _oa = _o['databases']
            if(_oa.is_a? Hash)
              @databases = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @databases =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @databases = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @databases.push String.from_json(_item)
                 else
                   @databases.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @databases = _oa
            end
          end
        if !_o['tables'].nil?
          _oa = _o['tables']
            if(_oa.is_a? Hash)
              @tables = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tables =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tables = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tables.push String.from_json(_item)
                 else
                   @tables.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tables = _oa
            end
          end
        if !_o['columnFamilies'].nil?
          _oa = _o['columnFamilies']
            if(_oa.is_a? Hash)
              @columnFamilies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columnFamilies =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columnFamilies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columnFamilies.push String.from_json(_item)
                 else
                   @columnFamilies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columnFamilies = _oa
            end
          end
        if !_o['columns'].nil?
          _oa = _o['columns']
            if(_oa.is_a? Hash)
              @columns = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columns =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columns = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columns.push String.from_json(_item)
                 else
                   @columns.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columns = _oa
            end
          end
        if !_o['udfs'].nil?
          _oa = _o['udfs']
            if(_oa.is_a? Hash)
              @udfs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @udfs =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @udfs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @udfs.push String.from_json(_item)
                 else
                   @udfs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @udfs = _oa
            end
          end
        if !_o['assetName'].nil?
          _oa = _o['assetName']
            if(_oa.is_a? Hash)
              @assetName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetName.push String.from_json(_item)
                 else
                   @assetName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetName = _oa
            end
          end
        if !_o['assetType'].nil?
          _oa = _o['assetType']
            if(_oa.is_a? Hash)
              @assetType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetType.push Fixnum.from_json(_item)
                 else
                   @assetType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetType = _oa
            end
          end
        if !_o['resourceStatus'].nil?
          _oa = _o['resourceStatus']
            if(_oa.is_a? Hash)
              @resourceStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceStatus =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceStatus.push Fixnum.from_json(_item)
                 else
                   @resourceStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceStatus = _oa
            end
          end
        if !_o['tableType'].nil?
          _oa = _o['tableType']
            if(_oa.is_a? Hash)
              @tableType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tableType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tableType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tableType.push Fixnum.from_json(_item)
                 else
                   @tableType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tableType = _oa
            end
          end
        if !_o['columnType'].nil?
          _oa = _o['columnType']
            if(_oa.is_a? Hash)
              @columnType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @columnType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @columnType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @columnType.push Fixnum.from_json(_item)
                 else
                   @columnType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @columnType = _oa
            end
          end
        if !_o['checkParentPermission'].nil?
          _oa = _o['checkParentPermission']
            if(_oa.is_a? Hash)
              @checkParentPermission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @checkParentPermission =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @checkParentPermission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @checkParentPermission.push Fixnum.from_json(_item)
                 else
                   @checkParentPermission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @checkParentPermission = _oa
            end
          end
        if !_o['topologies'].nil?
          _oa = _o['topologies']
            if(_oa.is_a? Hash)
              @topologies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @topologies =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @topologies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @topologies.push String.from_json(_item)
                 else
                   @topologies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @topologies = _oa
            end
          end
        if !_o['services'].nil?
          _oa = _o['services']
            if(_oa.is_a? Hash)
              @services = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @services =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @services = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @services.push String.from_json(_item)
                 else
                   @services.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @services = _oa
            end
          end
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
    end

    # constructs a VXResource from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupPermission < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :groupId
    # (no documentation provided)
    attr_accessor :moduleId
    # (no documentation provided)
    attr_accessor :isAllowed
    # (no documentation provided)
    attr_accessor :moduleName
    # (no documentation provided)
    attr_accessor :groupName

    # the json hash for this VXGroupPermission
    def to_jaxb_json_hash
      _h = super
      _h['groupId'] = groupId.to_jaxb_json_hash unless groupId.nil?
      _h['moduleId'] = moduleId.to_jaxb_json_hash unless moduleId.nil?
      _h['isAllowed'] = isAllowed.to_jaxb_json_hash unless isAllowed.nil?
      _h['moduleName'] = moduleName.to_jaxb_json_hash unless moduleName.nil?
      _h['groupName'] = groupName.to_jaxb_json_hash unless groupName.nil?
      return _h
    end

    #initializes this VXGroupPermission with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['groupId'].nil?
          _oa = _o['groupId']
            if(_oa.is_a? Hash)
              @groupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupId.push Bignum.from_json(_item)
                 else
                   @groupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupId = _oa
            end
          end
        if !_o['moduleId'].nil?
          _oa = _o['moduleId']
            if(_oa.is_a? Hash)
              @moduleId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleId.push Bignum.from_json(_item)
                 else
                   @moduleId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleId = _oa
            end
          end
        if !_o['isAllowed'].nil?
          _oa = _o['isAllowed']
            if(_oa.is_a? Hash)
              @isAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAllowed =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAllowed.push Fixnum.from_json(_item)
                 else
                   @isAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAllowed = _oa
            end
          end
        if !_o['moduleName'].nil?
          _oa = _o['moduleName']
            if(_oa.is_a? Hash)
              @moduleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleName.push String.from_json(_item)
                 else
                   @moduleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleName = _oa
            end
          end
        if !_o['groupName'].nil?
          _oa = _o['groupName']
            if(_oa.is_a? Hash)
              @groupName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupName.push String.from_json(_item)
                 else
                   @groupName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupName = _oa
            end
          end
    end

    # constructs a VXGroupPermission from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class VEnumElement < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # the elementName
    attr_accessor :elementName
    # the enumName
    attr_accessor :enumName
    # the rbKey
    attr_accessor :rbKey
    # int - value of member attribute &lt;b&gt;elementValue&lt;/b&gt;.
    attr_accessor :elementValue
    # String - value of member attribute &lt;b&gt;elementLabel&lt;/b&gt;.
    attr_accessor :elementLabel
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VEnumElement
    def to_jaxb_json_hash
      _h = super
      _h['elementName'] = elementName.to_jaxb_json_hash unless elementName.nil?
      _h['enumName'] = enumName.to_jaxb_json_hash unless enumName.nil?
      _h['rbKey'] = rbKey.to_jaxb_json_hash unless rbKey.nil?
      _h['elementValue'] = elementValue.to_jaxb_json_hash unless elementValue.nil?
      _h['elementLabel'] = elementLabel.to_jaxb_json_hash unless elementLabel.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VEnumElement with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['elementName'].nil?
          _oa = _o['elementName']
            if(_oa.is_a? Hash)
              @elementName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elementName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elementName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elementName.push String.from_json(_item)
                 else
                   @elementName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elementName = _oa
            end
          end
        if !_o['enumName'].nil?
          _oa = _o['enumName']
            if(_oa.is_a? Hash)
              @enumName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enumName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enumName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enumName.push String.from_json(_item)
                 else
                   @enumName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enumName = _oa
            end
          end
        if !_o['rbKey'].nil?
          _oa = _o['rbKey']
            if(_oa.is_a? Hash)
              @rbKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKey.push String.from_json(_item)
                 else
                   @rbKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKey = _oa
            end
          end
        if !_o['elementValue'].nil?
          _oa = _o['elementValue']
            if(_oa.is_a? Hash)
              @elementValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elementValue =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elementValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elementValue.push Fixnum.from_json(_item)
                 else
                   @elementValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elementValue = _oa
            end
          end
        if !_o['elementLabel'].nil?
          _oa = _o['elementLabel']
            if(_oa.is_a? Hash)
              @elementLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elementLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elementLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elementLabel.push String.from_json(_item)
                 else
                   @elementLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elementLabel = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VEnumElement from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXKmsKey < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # Cipher
    attr_accessor :cipher
    # Length
    attr_accessor :length
    # Description
    attr_accessor :description
    # Version
    attr_accessor :versions
    # Material
    attr_accessor :material
    # Version Name
    attr_accessor :versionName
    # Key Created Date
    attr_accessor :created
    # Attributes
    attr_accessor :attributes

    # the json hash for this VXKmsKey
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['cipher'] = cipher.to_jaxb_json_hash unless cipher.nil?
      _h['length'] = length.to_jaxb_json_hash unless length.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['versions'] = versions.to_jaxb_json_hash unless versions.nil?
      _h['material'] = material.to_jaxb_json_hash unless material.nil?
      _h['versionName'] = versionName.to_jaxb_json_hash unless versionName.nil?
      _h['created'] = created.to_jaxb_json_hash unless created.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      return _h
    end

    #initializes this VXKmsKey with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['cipher'].nil?
          _oa = _o['cipher']
            if(_oa.is_a? Hash)
              @cipher = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cipher =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cipher = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cipher.push String.from_json(_item)
                 else
                   @cipher.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cipher = _oa
            end
          end
        if !_o['length'].nil?
          _oa = _o['length']
            if(_oa.is_a? Hash)
              @length = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @length =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @length = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @length.push Fixnum.from_json(_item)
                 else
                   @length.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @length = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['versions'].nil?
          _oa = _o['versions']
            if(_oa.is_a? Hash)
              @versions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versions =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versions.push Fixnum.from_json(_item)
                 else
                   @versions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versions = _oa
            end
          end
        if !_o['material'].nil?
          _oa = _o['material']
            if(_oa.is_a? Hash)
              @material = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @material =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @material = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @material.push String.from_json(_item)
                 else
                   @material.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @material = _oa
            end
          end
        if !_o['versionName'].nil?
          _oa = _o['versionName']
            if(_oa.is_a? Hash)
              @versionName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @versionName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @versionName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @versionName.push String.from_json(_item)
                 else
                   @versionName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @versionName = _oa
            end
          end
        if !_o['created'].nil?
          _oa = _o['created']
            if(_oa.is_a? Hash)
              @created = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @created =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @created = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @created.push Bignum.from_json(_item)
                 else
                   @created.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @created = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
    end

    # constructs a VXKmsKey from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Admin

module Client

module Datatype

  # (no documentation provided)
  class RESTResponse 

    # (no documentation provided)
    attr_accessor :messageList
    # (no documentation provided)
    attr_accessor :httpStatusCode
    # (no documentation provided)
    attr_accessor :msgDesc
    # (no documentation provided)
    attr_accessor :statusCode

    # the json hash for this RESTResponse
    def to_jaxb_json_hash
      _h = {}
      if !messageList.nil?
        _ha = Array.new
        messageList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['messageList'] = _ha
      end
      _h['httpStatusCode'] = httpStatusCode.to_jaxb_json_hash unless httpStatusCode.nil?
      _h['msgDesc'] = msgDesc.to_jaxb_json_hash unless msgDesc.nil?
      _h['statusCode'] = statusCode.to_jaxb_json_hash unless statusCode.nil?
      return _h
    end

    # the json (string form) for this RESTResponse
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RESTResponse with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['messageList'].nil?
          _oa = _o['messageList']
            if(_oa.is_a? Hash)
              @messageList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @messageList =  Org::Apache::Ranger::Admin::Client::Datatype::Message.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @messageList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @messageList.push Org::Apache::Ranger::Admin::Client::Datatype::Message.from_json(_item)
                 else
                   @messageList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @messageList = _oa
            end
          end
        if !_o['httpStatusCode'].nil?
          _oa = _o['httpStatusCode']
            if(_oa.is_a? Hash)
              @httpStatusCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @httpStatusCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @httpStatusCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @httpStatusCode.push Fixnum.from_json(_item)
                 else
                   @httpStatusCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @httpStatusCode = _oa
            end
          end
        if !_o['msgDesc'].nil?
          _oa = _o['msgDesc']
            if(_oa.is_a? Hash)
              @msgDesc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @msgDesc =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @msgDesc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @msgDesc.push String.from_json(_item)
                 else
                   @msgDesc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @msgDesc = _oa
            end
          end
        if !_o['statusCode'].nil?
          _oa = _o['statusCode']
            if(_oa.is_a? Hash)
              @statusCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @statusCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @statusCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @statusCode.push Fixnum.from_json(_item)
                 else
                   @statusCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @statusCode = _oa
            end
          end
    end

    # constructs a RESTResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerTagResourceMap < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :resourceId
    # (no documentation provided)
    attr_accessor :tagId

    # the json hash for this RangerTagResourceMap
    def to_jaxb_json_hash
      _h = super
      _h['resourceId'] = resourceId.to_jaxb_json_hash unless resourceId.nil?
      _h['tagId'] = tagId.to_jaxb_json_hash unless tagId.nil?
      return _h
    end

    #initializes this RangerTagResourceMap with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['resourceId'].nil?
          _oa = _o['resourceId']
            if(_oa.is_a? Hash)
              @resourceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceId.push Bignum.from_json(_item)
                 else
                   @resourceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceId = _oa
            end
          end
        if !_o['tagId'].nil?
          _oa = _o['tagId']
            if(_oa.is_a? Hash)
              @tagId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagId.push Bignum.from_json(_item)
                 else
                   @tagId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagId = _oa
            end
          end
    end

    # constructs a RangerTagResourceMap from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerService < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :configs
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :tagUpdateTime
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :policyUpdateTime
    # (no documentation provided)
    attr_accessor :policyVersion
    # (no documentation provided)
    attr_accessor :tagVersion
    # (no documentation provided)
    attr_accessor :tagService
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this RangerService
    def to_jaxb_json_hash
      _h = super
      _h['configs'] = configs.to_jaxb_json_hash unless configs.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['tagUpdateTime'] = tagUpdateTime.to_jaxb_json_hash unless tagUpdateTime.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['policyUpdateTime'] = policyUpdateTime.to_jaxb_json_hash unless policyUpdateTime.nil?
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      _h['tagVersion'] = tagVersion.to_jaxb_json_hash unless tagVersion.nil?
      _h['tagService'] = tagService.to_jaxb_json_hash unless tagService.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this RangerService with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['configs'].nil?
          _oa = _o['configs']
            if(_oa.is_a? Hash)
              @configs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configs =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configs.push Hash.from_json(_item)
                 else
                   @configs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configs = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['tagUpdateTime'].nil?
          _oa = _o['tagUpdateTime']
            if(_oa.is_a? Hash)
              @tagUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagUpdateTime.push Time.from_json(_item)
                 else
                   @tagUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagUpdateTime = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['policyUpdateTime'].nil?
          _oa = _o['policyUpdateTime']
            if(_oa.is_a? Hash)
              @policyUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyUpdateTime.push Time.from_json(_item)
                 else
                   @policyUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyUpdateTime = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
        if !_o['tagVersion'].nil?
          _oa = _o['tagVersion']
            if(_oa.is_a? Hash)
              @tagVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagVersion.push Bignum.from_json(_item)
                 else
                   @tagVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagVersion = _oa
            end
          end
        if !_o['tagService'].nil?
          _oa = _o['tagService']
            if(_oa.is_a? Hash)
              @tagService = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagService =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagService = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagService.push String.from_json(_item)
                 else
                   @tagService.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagService = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a RangerService from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXGroups

    # the json hash for this VXGroupList
    def to_jaxb_json_hash
      _h = super
      if !vXGroups.nil?
        _ha = Array.new
        vXGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXGroups'] = _ha
      end
      return _h
    end

    #initializes this VXGroupList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXGroups'].nil?
          _oa = _o['vXGroups']
            if(_oa.is_a? Hash)
              @vXGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXGroups =  Org::Apache::Ranger::View::VXGroup.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXGroups.push Org::Apache::Ranger::View::VXGroup.from_json(_item)
                 else
                   @vXGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXGroups = _oa
            end
          end
    end

    # constructs a VXGroupList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupUserList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXGroupUsers

    # the json hash for this VXGroupUserList
    def to_jaxb_json_hash
      _h = super
      if !vXGroupUsers.nil?
        _ha = Array.new
        vXGroupUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXGroupUsers'] = _ha
      end
      return _h
    end

    #initializes this VXGroupUserList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXGroupUsers'].nil?
          _oa = _o['vXGroupUsers']
            if(_oa.is_a? Hash)
              @vXGroupUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXGroupUsers =  Org::Apache::Ranger::View::VXGroupUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXGroupUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXGroupUsers.push Org::Apache::Ranger::View::VXGroupUser.from_json(_item)
                 else
                   @vXGroupUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXGroupUsers = _oa
            end
          end
    end

    # constructs a VXGroupUserList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyExportAudit < Org::Apache::Ranger::View::VXDataObject 

    # XA Agent IP Address
    attr_accessor :clientIP
    # XA Agent Id
    attr_accessor :agentId
    # Last update timestamp in request
    attr_accessor :requestedEpoch
    # Date and time of the last policy update
    attr_accessor :lastUpdated
    # Id of the Asset
    attr_accessor :repositoryName
    # JSON of the policies exported
    attr_accessor :exportedJson
    # HTTP Response Code
    attr_accessor :httpRetCode
    # (no documentation provided)
    attr_accessor :syncStatus
    # (no documentation provided)
    attr_accessor :clusterName
    # (no documentation provided)
    attr_accessor :zoneName
    # (no documentation provided)
    attr_accessor :policyVersion

    # the json hash for this VXPolicyExportAudit
    def to_jaxb_json_hash
      _h = super
      _h['clientIP'] = clientIP.to_jaxb_json_hash unless clientIP.nil?
      _h['agentId'] = agentId.to_jaxb_json_hash unless agentId.nil?
      _h['requestedEpoch'] = requestedEpoch.to_jaxb_json_hash unless requestedEpoch.nil?
      _h['lastUpdated'] = lastUpdated.to_jaxb_json_hash unless lastUpdated.nil?
      _h['repositoryName'] = repositoryName.to_jaxb_json_hash unless repositoryName.nil?
      _h['exportedJson'] = exportedJson.to_jaxb_json_hash unless exportedJson.nil?
      _h['httpRetCode'] = httpRetCode.to_jaxb_json_hash unless httpRetCode.nil?
      _h['syncStatus'] = syncStatus.to_jaxb_json_hash unless syncStatus.nil?
      _h['clusterName'] = clusterName.to_jaxb_json_hash unless clusterName.nil?
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      return _h
    end

    #initializes this VXPolicyExportAudit with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['clientIP'].nil?
          _oa = _o['clientIP']
            if(_oa.is_a? Hash)
              @clientIP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientIP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientIP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientIP.push String.from_json(_item)
                 else
                   @clientIP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientIP = _oa
            end
          end
        if !_o['agentId'].nil?
          _oa = _o['agentId']
            if(_oa.is_a? Hash)
              @agentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @agentId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @agentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @agentId.push String.from_json(_item)
                 else
                   @agentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @agentId = _oa
            end
          end
        if !_o['requestedEpoch'].nil?
          _oa = _o['requestedEpoch']
            if(_oa.is_a? Hash)
              @requestedEpoch = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestedEpoch =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestedEpoch = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestedEpoch.push Bignum.from_json(_item)
                 else
                   @requestedEpoch.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestedEpoch = _oa
            end
          end
        if !_o['lastUpdated'].nil?
          _oa = _o['lastUpdated']
            if(_oa.is_a? Hash)
              @lastUpdated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastUpdated =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastUpdated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastUpdated.push Time.from_json(_item)
                 else
                   @lastUpdated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastUpdated = _oa
            end
          end
        if !_o['repositoryName'].nil?
          _oa = _o['repositoryName']
            if(_oa.is_a? Hash)
              @repositoryName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repositoryName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repositoryName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repositoryName.push String.from_json(_item)
                 else
                   @repositoryName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repositoryName = _oa
            end
          end
        if !_o['exportedJson'].nil?
          _oa = _o['exportedJson']
            if(_oa.is_a? Hash)
              @exportedJson = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @exportedJson =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @exportedJson = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @exportedJson.push String.from_json(_item)
                 else
                   @exportedJson.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @exportedJson = _oa
            end
          end
        if !_o['httpRetCode'].nil?
          _oa = _o['httpRetCode']
            if(_oa.is_a? Hash)
              @httpRetCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @httpRetCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @httpRetCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @httpRetCode.push Fixnum.from_json(_item)
                 else
                   @httpRetCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @httpRetCode = _oa
            end
          end
        if !_o['syncStatus'].nil?
          _oa = _o['syncStatus']
            if(_oa.is_a? Hash)
              @syncStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncStatus.push String.from_json(_item)
                 else
                   @syncStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncStatus = _oa
            end
          end
        if !_o['clusterName'].nil?
          _oa = _o['clusterName']
            if(_oa.is_a? Hash)
              @clusterName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clusterName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clusterName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clusterName.push String.from_json(_item)
                 else
                   @clusterName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clusterName = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
    end

    # constructs a VXPolicyExportAudit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItemCondition 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :values

    # the json hash for this RangerPolicyItemCondition
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      if !values.nil?
        _ha = Array.new
        values.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['values'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerPolicyItemCondition
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItemCondition with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['values'].nil?
          _oa = _o['values']
            if(_oa.is_a? Hash)
              @values = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @values =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @values = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @values.push String.from_json(_item)
                 else
                   @values.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @values = _oa
            end
          end
    end

    # constructs a RangerPolicyItemCondition from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerDataMaskDef 

    # (no documentation provided)
    attr_accessor :maskTypes
    # (no documentation provided)
    attr_accessor :accessTypes
    # (no documentation provided)
    attr_accessor :resources

    # the json hash for this RangerDataMaskDef
    def to_jaxb_json_hash
      _h = {}
      if !maskTypes.nil?
        _ha = Array.new
        maskTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['maskTypes'] = _ha
      end
      if !accessTypes.nil?
        _ha = Array.new
        accessTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypes'] = _ha
      end
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerDataMaskDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerDataMaskDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['maskTypes'].nil?
          _oa = _o['maskTypes']
            if(_oa.is_a? Hash)
              @maskTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @maskTypes =  Org::Apache::Ranger::Plugin::Model::RangerDataMaskTypeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @maskTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @maskTypes.push Org::Apache::Ranger::Plugin::Model::RangerDataMaskTypeDef.from_json(_item)
                 else
                   @maskTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @maskTypes = _oa
            end
          end
        if !_o['accessTypes'].nil?
          _oa = _o['accessTypes']
            if(_oa.is_a? Hash)
              @accessTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypes =  Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypes.push Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_item)
                 else
                   @accessTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypes = _oa
            end
          end
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
    end

    # constructs a RangerDataMaskDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuditRecordList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAuditRecords

    # the json hash for this VXAuditRecordList
    def to_jaxb_json_hash
      _h = super
      if !vXAuditRecords.nil?
        _ha = Array.new
        vXAuditRecords.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAuditRecords'] = _ha
      end
      return _h
    end

    #initializes this VXAuditRecordList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAuditRecords'].nil?
          _oa = _o['vXAuditRecords']
            if(_oa.is_a? Hash)
              @vXAuditRecords = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAuditRecords =  Org::Apache::Ranger::View::VXAuditRecord.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAuditRecords = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAuditRecords.push Org::Apache::Ranger::View::VXAuditRecord.from_json(_item)
                 else
                   @vXAuditRecords.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAuditRecords = _oa
            end
          end
    end

    # constructs a VXAuditRecordList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUser < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # First Name
    attr_accessor :firstName
    # Last Name
    attr_accessor :lastName
    # Email address
    attr_accessor :emailAddress
    # Password
    attr_accessor :password
    # Description
    attr_accessor :description
    # Id of the credential store
    attr_accessor :credStoreId
    # List of group ids
    attr_accessor :groupIdList
    # (no documentation provided)
    attr_accessor :groupNameList
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :isVisible
    # (no documentation provided)
    attr_accessor :userSource
    # List of roles for this user
    attr_accessor :userRoleList

    # the json hash for this VXUser
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['credStoreId'] = credStoreId.to_jaxb_json_hash unless credStoreId.nil?
      if !groupIdList.nil?
        _ha = Array.new
        groupIdList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupIdList'] = _ha
      end
      if !groupNameList.nil?
        _ha = Array.new
        groupNameList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupNameList'] = _ha
      end
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['isVisible'] = isVisible.to_jaxb_json_hash unless isVisible.nil?
      _h['userSource'] = userSource.to_jaxb_json_hash unless userSource.nil?
      if !userRoleList.nil?
        _ha = Array.new
        userRoleList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userRoleList'] = _ha
      end
      return _h
    end

    #initializes this VXUser with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['credStoreId'].nil?
          _oa = _o['credStoreId']
            if(_oa.is_a? Hash)
              @credStoreId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @credStoreId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @credStoreId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @credStoreId.push Bignum.from_json(_item)
                 else
                   @credStoreId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @credStoreId = _oa
            end
          end
        if !_o['groupIdList'].nil?
          _oa = _o['groupIdList']
            if(_oa.is_a? Hash)
              @groupIdList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupIdList =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupIdList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupIdList.push Bignum.from_json(_item)
                 else
                   @groupIdList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupIdList = _oa
            end
          end
        if !_o['groupNameList'].nil?
          _oa = _o['groupNameList']
            if(_oa.is_a? Hash)
              @groupNameList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupNameList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupNameList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupNameList.push String.from_json(_item)
                 else
                   @groupNameList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupNameList = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push Fixnum.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['isVisible'].nil?
          _oa = _o['isVisible']
            if(_oa.is_a? Hash)
              @isVisible = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isVisible =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isVisible = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isVisible.push Fixnum.from_json(_item)
                 else
                   @isVisible.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isVisible = _oa
            end
          end
        if !_o['userSource'].nil?
          _oa = _o['userSource']
            if(_oa.is_a? Hash)
              @userSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSource =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSource.push Fixnum.from_json(_item)
                 else
                   @userSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSource = _oa
            end
          end
        if !_o['userRoleList'].nil?
          _oa = _o['userRoleList']
            if(_oa.is_a? Hash)
              @userRoleList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userRoleList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userRoleList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userRoleList.push String.from_json(_item)
                 else
                   @userRoleList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userRoleList = _oa
            end
          end
    end

    # constructs a VXUser from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupPermissionList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXGroupPermission

    # the json hash for this VXGroupPermissionList
    def to_jaxb_json_hash
      _h = super
      if !vXGroupPermission.nil?
        _ha = Array.new
        vXGroupPermission.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXGroupPermission'] = _ha
      end
      return _h
    end

    #initializes this VXGroupPermissionList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXGroupPermission'].nil?
          _oa = _o['vXGroupPermission']
            if(_oa.is_a? Hash)
              @vXGroupPermission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXGroupPermission =  Org::Apache::Ranger::View::VXGroupPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXGroupPermission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXGroupPermission.push Org::Apache::Ranger::View::VXGroupPermission.from_json(_item)
                 else
                   @vXGroupPermission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXGroupPermission = _oa
            end
          end
    end

    # constructs a VXGroupPermissionList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXRepositoryList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXRepositories

    # the json hash for this VXRepositoryList
    def to_jaxb_json_hash
      _h = super
      if !vXRepositories.nil?
        _ha = Array.new
        vXRepositories.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXRepositories'] = _ha
      end
      return _h
    end

    #initializes this VXRepositoryList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXRepositories'].nil?
          _oa = _o['vXRepositories']
            if(_oa.is_a? Hash)
              @vXRepositories = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXRepositories =  Org::Apache::Ranger::View::VXRepository.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXRepositories = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXRepositories.push Org::Apache::Ranger::View::VXRepository.from_json(_item)
                 else
                   @vXRepositories.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXRepositories = _oa
            end
          end
    end

    # constructs a VXRepositoryList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPasswordChange < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # Id of the user
    attr_accessor :id
    # Login ID of the user
    attr_accessor :loginId
    # Email address of the user
    attr_accessor :emailAddress
    # Reset Code
    attr_accessor :resetCode
    # Old Password
    attr_accessor :oldPassword
    # Updated Password
    attr_accessor :updPassword

    # the json hash for this VXPasswordChange
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['loginId'] = loginId.to_jaxb_json_hash unless loginId.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['resetCode'] = resetCode.to_jaxb_json_hash unless resetCode.nil?
      _h['oldPassword'] = oldPassword.to_jaxb_json_hash unless oldPassword.nil?
      _h['updPassword'] = updPassword.to_jaxb_json_hash unless updPassword.nil?
      return _h
    end

    #initializes this VXPasswordChange with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['loginId'].nil?
          _oa = _o['loginId']
            if(_oa.is_a? Hash)
              @loginId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginId.push String.from_json(_item)
                 else
                   @loginId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginId = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['resetCode'].nil?
          _oa = _o['resetCode']
            if(_oa.is_a? Hash)
              @resetCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resetCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resetCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resetCode.push String.from_json(_item)
                 else
                   @resetCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resetCode = _oa
            end
          end
        if !_o['oldPassword'].nil?
          _oa = _o['oldPassword']
            if(_oa.is_a? Hash)
              @oldPassword = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oldPassword =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oldPassword = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oldPassword.push String.from_json(_item)
                 else
                   @oldPassword.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oldPassword = _oa
            end
          end
        if !_o['updPassword'].nil?
          _oa = _o['updPassword']
            if(_oa.is_a? Hash)
              @updPassword = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updPassword =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updPassword = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updPassword.push String.from_json(_item)
                 else
                   @updPassword.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updPassword = _oa
            end
          end
    end

    # constructs a VXPasswordChange from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerEnumDef 

    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :defaultIndex
    # (no documentation provided)
    attr_accessor :elements

    # the json hash for this RangerEnumDef
    def to_jaxb_json_hash
      _h = {}
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['defaultIndex'] = defaultIndex.to_jaxb_json_hash unless defaultIndex.nil?
      if !elements.nil?
        _ha = Array.new
        elements.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['elements'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerEnumDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerEnumDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['defaultIndex'].nil?
          _oa = _o['defaultIndex']
            if(_oa.is_a? Hash)
              @defaultIndex = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultIndex =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultIndex = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultIndex.push Fixnum.from_json(_item)
                 else
                   @defaultIndex.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultIndex = _oa
            end
          end
        if !_o['elements'].nil?
          _oa = _o['elements']
            if(_oa.is_a? Hash)
              @elements = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elements =  Org::Apache::Ranger::Plugin::Model::RangerEnumElementDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elements = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elements.push Org::Apache::Ranger::Plugin::Model::RangerEnumElementDef.from_json(_item)
                 else
                   @elements.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elements = _oa
            end
          end
    end

    # constructs a RangerEnumDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXFileSyncSourceInfo 

    # (no documentation provided)
    attr_accessor :fileName
    # (no documentation provided)
    attr_accessor :syncTime
    # (no documentation provided)
    attr_accessor :lastModified
    # (no documentation provided)
    attr_accessor :totalUsersSynced
    # (no documentation provided)
    attr_accessor :totalGroupsSynced

    # the json hash for this VXFileSyncSourceInfo
    def to_jaxb_json_hash
      _h = {}
      _h['fileName'] = fileName.to_jaxb_json_hash unless fileName.nil?
      _h['syncTime'] = syncTime.to_jaxb_json_hash unless syncTime.nil?
      _h['lastModified'] = lastModified.to_jaxb_json_hash unless lastModified.nil?
      _h['totalUsersSynced'] = totalUsersSynced.to_jaxb_json_hash unless totalUsersSynced.nil?
      _h['totalGroupsSynced'] = totalGroupsSynced.to_jaxb_json_hash unless totalGroupsSynced.nil?
      return _h
    end

    # the json (string form) for this VXFileSyncSourceInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXFileSyncSourceInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['fileName'].nil?
          _oa = _o['fileName']
            if(_oa.is_a? Hash)
              @fileName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fileName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fileName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fileName.push String.from_json(_item)
                 else
                   @fileName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fileName = _oa
            end
          end
        if !_o['syncTime'].nil?
          _oa = _o['syncTime']
            if(_oa.is_a? Hash)
              @syncTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncTime.push String.from_json(_item)
                 else
                   @syncTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncTime = _oa
            end
          end
        if !_o['lastModified'].nil?
          _oa = _o['lastModified']
            if(_oa.is_a? Hash)
              @lastModified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastModified =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastModified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastModified.push String.from_json(_item)
                 else
                   @lastModified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastModified = _oa
            end
          end
        if !_o['totalUsersSynced'].nil?
          _oa = _o['totalUsersSynced']
            if(_oa.is_a? Hash)
              @totalUsersSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalUsersSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalUsersSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalUsersSynced.push Bignum.from_json(_item)
                 else
                   @totalUsersSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalUsersSynced = _oa
            end
          end
        if !_o['totalGroupsSynced'].nil?
          _oa = _o['totalGroupsSynced']
            if(_oa.is_a? Hash)
              @totalGroupsSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalGroupsSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalGroupsSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalGroupsSynced.push Bignum.from_json(_item)
                 else
                   @totalGroupsSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalGroupsSynced = _oa
            end
          end
    end

    # constructs a VXFileSyncSourceInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupUserInfo < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :xgroupInfo
    # (no documentation provided)
    attr_accessor :xuserInfo

    # the json hash for this VXGroupUserInfo
    def to_jaxb_json_hash
      _h = super
      _h['xgroupInfo'] = xgroupInfo.to_jaxb_json_hash unless xgroupInfo.nil?
      if !xuserInfo.nil?
        _ha = Array.new
        xuserInfo.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['xuserInfo'] = _ha
      end
      return _h
    end

    #initializes this VXGroupUserInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['xgroupInfo'].nil?
          _oa = _o['xgroupInfo']
            if(_oa.is_a? Hash)
              @xgroupInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xgroupInfo =  Org::Apache::Ranger::View::VXGroup.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xgroupInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xgroupInfo.push Org::Apache::Ranger::View::VXGroup.from_json(_item)
                 else
                   @xgroupInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xgroupInfo = _oa
            end
          end
        if !_o['xuserInfo'].nil?
          _oa = _o['xuserInfo']
            if(_oa.is_a? Hash)
              @xuserInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xuserInfo =  Org::Apache::Ranger::View::VXUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xuserInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xuserInfo.push Org::Apache::Ranger::View::VXUser.from_json(_item)
                 else
                   @xuserInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xuserInfo = _oa
            end
          end
    end

    # constructs a VXGroupUserInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerAccessTypeDef 

    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :impliedGrants
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :rbKeyLabel

    # the json hash for this RangerAccessTypeDef
    def to_jaxb_json_hash
      _h = {}
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      if !impliedGrants.nil?
        _ha = Array.new
        impliedGrants.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['impliedGrants'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      return _h
    end

    # the json (string form) for this RangerAccessTypeDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerAccessTypeDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['impliedGrants'].nil?
          _oa = _o['impliedGrants']
            if(_oa.is_a? Hash)
              @impliedGrants = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @impliedGrants =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @impliedGrants = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @impliedGrants.push String.from_json(_item)
                 else
                   @impliedGrants.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @impliedGrants = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
    end

    # constructs a RangerAccessTypeDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuditRecord 

    # Date of audit log
    attr_accessor :date
    # Name of the resource
    attr_accessor :resource
    # Action which was audited
    attr_accessor :action
    # Result of the policy enforced
    attr_accessor :result
    # User name whose action was audited
    attr_accessor :user
    # Name of the policy enforcer
    attr_accessor :enforcer
    # Type of resource for which the audit was done
    attr_accessor :resourceType
    # Type of asset for which the audit was done
    # This attribute is of type enum AppCommonEnums::AssetType
    attr_accessor :assetType

    # the json hash for this VXAuditRecord
    def to_jaxb_json_hash
      _h = {}
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['resource'] = resource.to_jaxb_json_hash unless resource.nil?
      _h['action'] = action.to_jaxb_json_hash unless action.nil?
      _h['result'] = result.to_jaxb_json_hash unless result.nil?
      _h['user'] = user.to_jaxb_json_hash unless user.nil?
      _h['enforcer'] = enforcer.to_jaxb_json_hash unless enforcer.nil?
      _h['resourceType'] = resourceType.to_jaxb_json_hash unless resourceType.nil?
      _h['assetType'] = assetType.to_jaxb_json_hash unless assetType.nil?
      return _h
    end

    # the json (string form) for this VXAuditRecord
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXAuditRecord with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Time.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
        if !_o['resource'].nil?
          _oa = _o['resource']
            if(_oa.is_a? Hash)
              @resource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resource =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resource.push String.from_json(_item)
                 else
                   @resource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resource = _oa
            end
          end
        if !_o['action'].nil?
          _oa = _o['action']
            if(_oa.is_a? Hash)
              @action = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @action =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @action = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @action.push String.from_json(_item)
                 else
                   @action.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @action = _oa
            end
          end
        if !_o['result'].nil?
          _oa = _o['result']
            if(_oa.is_a? Hash)
              @result = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @result =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @result = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @result.push String.from_json(_item)
                 else
                   @result.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @result = _oa
            end
          end
        if !_o['user'].nil?
          _oa = _o['user']
            if(_oa.is_a? Hash)
              @user = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @user =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @user = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @user.push String.from_json(_item)
                 else
                   @user.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @user = _oa
            end
          end
        if !_o['enforcer'].nil?
          _oa = _o['enforcer']
            if(_oa.is_a? Hash)
              @enforcer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enforcer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enforcer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enforcer.push String.from_json(_item)
                 else
                   @enforcer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enforcer = _oa
            end
          end
        if !_o['resourceType'].nil?
          _oa = _o['resourceType']
            if(_oa.is_a? Hash)
              @resourceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceType.push Fixnum.from_json(_item)
                 else
                   @resourceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceType = _oa
            end
          end
        if !_o['assetType'].nil?
          _oa = _o['assetType']
            if(_oa.is_a? Hash)
              @assetType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @assetType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @assetType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @assetType.push Fixnum.from_json(_item)
                 else
                   @assetType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @assetType = _oa
            end
          end
    end

    # constructs a VXAuditRecord from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAssetList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAssets

    # the json hash for this VXAssetList
    def to_jaxb_json_hash
      _h = super
      if !vXAssets.nil?
        _ha = Array.new
        vXAssets.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAssets'] = _ha
      end
      return _h
    end

    #initializes this VXAssetList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAssets'].nil?
          _oa = _o['vXAssets']
            if(_oa.is_a? Hash)
              @vXAssets = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAssets =  Org::Apache::Ranger::View::VXAsset.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAssets = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAssets.push Org::Apache::Ranger::View::VXAsset.from_json(_item)
                 else
                   @vXAssets.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAssets = _oa
            end
          end
    end

    # constructs a VXAssetList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupUser < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # Id of the group
    attr_accessor :parentGroupId
    # Id of the user
    attr_accessor :userId

    # the json hash for this VXGroupUser
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['parentGroupId'] = parentGroupId.to_jaxb_json_hash unless parentGroupId.nil?
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      return _h
    end

    #initializes this VXGroupUser with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['parentGroupId'].nil?
          _oa = _o['parentGroupId']
            if(_oa.is_a? Hash)
              @parentGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentGroupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentGroupId.push Bignum.from_json(_item)
                 else
                   @parentGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentGroupId = _oa
            end
          end
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
    end

    # constructs a VXGroupUser from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerServiceDef < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :options
    # (no documentation provided)
    attr_accessor :policyConditions
    # (no documentation provided)
    attr_accessor :implClass
    # (no documentation provided)
    attr_accessor :enums
    # (no documentation provided)
    attr_accessor :rowFilterDef
    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :accessTypes
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :configs
    # (no documentation provided)
    attr_accessor :contextEnrichers
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :dataMaskDef

    # the json hash for this RangerServiceDef
    def to_jaxb_json_hash
      _h = super
      _h['options'] = options.to_jaxb_json_hash unless options.nil?
      if !policyConditions.nil?
        _ha = Array.new
        policyConditions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyConditions'] = _ha
      end
      _h['implClass'] = implClass.to_jaxb_json_hash unless implClass.nil?
      if !enums.nil?
        _ha = Array.new
        enums.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['enums'] = _ha
      end
      _h['rowFilterDef'] = rowFilterDef.to_jaxb_json_hash unless rowFilterDef.nil?
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      if !accessTypes.nil?
        _ha = Array.new
        accessTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypes'] = _ha
      end
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      if !configs.nil?
        _ha = Array.new
        configs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['configs'] = _ha
      end
      if !contextEnrichers.nil?
        _ha = Array.new
        contextEnrichers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['contextEnrichers'] = _ha
      end
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['dataMaskDef'] = dataMaskDef.to_jaxb_json_hash unless dataMaskDef.nil?
      return _h
    end

    #initializes this RangerServiceDef with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['options'].nil?
          _oa = _o['options']
            if(_oa.is_a? Hash)
              @options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @options =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @options.push Hash.from_json(_item)
                 else
                   @options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @options = _oa
            end
          end
        if !_o['policyConditions'].nil?
          _oa = _o['policyConditions']
            if(_oa.is_a? Hash)
              @policyConditions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyConditions =  Org::Apache::Ranger::Plugin::Model::RangerPolicyConditionDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyConditions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyConditions.push Org::Apache::Ranger::Plugin::Model::RangerPolicyConditionDef.from_json(_item)
                 else
                   @policyConditions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyConditions = _oa
            end
          end
        if !_o['implClass'].nil?
          _oa = _o['implClass']
            if(_oa.is_a? Hash)
              @implClass = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @implClass =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @implClass = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @implClass.push String.from_json(_item)
                 else
                   @implClass.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @implClass = _oa
            end
          end
        if !_o['enums'].nil?
          _oa = _o['enums']
            if(_oa.is_a? Hash)
              @enums = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enums =  Org::Apache::Ranger::Plugin::Model::RangerEnumDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enums = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enums.push Org::Apache::Ranger::Plugin::Model::RangerEnumDef.from_json(_item)
                 else
                   @enums.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enums = _oa
            end
          end
        if !_o['rowFilterDef'].nil?
          _oa = _o['rowFilterDef']
            if(_oa.is_a? Hash)
              @rowFilterDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rowFilterDef =  Org::Apache::Ranger::Plugin::Model::RangerRowFilterDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rowFilterDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rowFilterDef.push Org::Apache::Ranger::Plugin::Model::RangerRowFilterDef.from_json(_item)
                 else
                   @rowFilterDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rowFilterDef = _oa
            end
          end
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['accessTypes'].nil?
          _oa = _o['accessTypes']
            if(_oa.is_a? Hash)
              @accessTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypes =  Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypes.push Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_item)
                 else
                   @accessTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypes = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['configs'].nil?
          _oa = _o['configs']
            if(_oa.is_a? Hash)
              @configs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @configs =  Org::Apache::Ranger::Plugin::Model::RangerServiceConfigDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @configs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @configs.push Org::Apache::Ranger::Plugin::Model::RangerServiceConfigDef.from_json(_item)
                 else
                   @configs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @configs = _oa
            end
          end
        if !_o['contextEnrichers'].nil?
          _oa = _o['contextEnrichers']
            if(_oa.is_a? Hash)
              @contextEnrichers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contextEnrichers =  Org::Apache::Ranger::Plugin::Model::RangerContextEnricherDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contextEnrichers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contextEnrichers.push Org::Apache::Ranger::Plugin::Model::RangerContextEnricherDef.from_json(_item)
                 else
                   @contextEnrichers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contextEnrichers = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['dataMaskDef'].nil?
          _oa = _o['dataMaskDef']
            if(_oa.is_a? Hash)
              @dataMaskDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskDef =  Org::Apache::Ranger::Plugin::Model::RangerDataMaskDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskDef.push Org::Apache::Ranger::Plugin::Model::RangerDataMaskDef.from_json(_item)
                 else
                   @dataMaskDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskDef = _oa
            end
          end
    end

    # constructs a RangerServiceDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerValiditySchedule 

    # (no documentation provided)
    attr_accessor :endTime
    # (no documentation provided)
    attr_accessor :startTime
    # (no documentation provided)
    attr_accessor :recurrences
    # (no documentation provided)
    attr_accessor :timeZone

    # the json hash for this RangerValiditySchedule
    def to_jaxb_json_hash
      _h = {}
      _h['endTime'] = endTime.to_jaxb_json_hash unless endTime.nil?
      _h['startTime'] = startTime.to_jaxb_json_hash unless startTime.nil?
      if !recurrences.nil?
        _ha = Array.new
        recurrences.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['recurrences'] = _ha
      end
      _h['timeZone'] = timeZone.to_jaxb_json_hash unless timeZone.nil?
      return _h
    end

    # the json (string form) for this RangerValiditySchedule
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerValiditySchedule with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['endTime'].nil?
          _oa = _o['endTime']
            if(_oa.is_a? Hash)
              @endTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endTime.push String.from_json(_item)
                 else
                   @endTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endTime = _oa
            end
          end
        if !_o['startTime'].nil?
          _oa = _o['startTime']
            if(_oa.is_a? Hash)
              @startTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startTime.push String.from_json(_item)
                 else
                   @startTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startTime = _oa
            end
          end
        if !_o['recurrences'].nil?
          _oa = _o['recurrences']
            if(_oa.is_a? Hash)
              @recurrences = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recurrences =  Org::Apache::Ranger::Plugin::Model::RangerValidityRecurrence.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recurrences = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recurrences.push Org::Apache::Ranger::Plugin::Model::RangerValidityRecurrence.from_json(_item)
                 else
                   @recurrences.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recurrences = _oa
            end
          end
        if !_o['timeZone'].nil?
          _oa = _o['timeZone']
            if(_oa.is_a? Hash)
              @timeZone = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @timeZone =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @timeZone = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @timeZone.push String.from_json(_item)
                 else
                   @timeZone.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @timeZone = _oa
            end
          end
    end

    # constructs a RangerValiditySchedule from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerTag < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :options
    # (no documentation provided)
    attr_accessor :attributes
    # (no documentation provided)
    attr_accessor :validityPeriods
    # (no documentation provided)
    attr_accessor :owner
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this RangerTag
    def to_jaxb_json_hash
      _h = super
      _h['options'] = options.to_jaxb_json_hash unless options.nil?
      _h['attributes'] = attributes.to_jaxb_json_hash unless attributes.nil?
      if !validityPeriods.nil?
        _ha = Array.new
        validityPeriods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['validityPeriods'] = _ha
      end
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    #initializes this RangerTag with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['options'].nil?
          _oa = _o['options']
            if(_oa.is_a? Hash)
              @options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @options =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @options.push Hash.from_json(_item)
                 else
                   @options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @options = _oa
            end
          end
        if !_o['attributes'].nil?
          _oa = _o['attributes']
            if(_oa.is_a? Hash)
              @attributes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attributes =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attributes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attributes.push Hash.from_json(_item)
                 else
                   @attributes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attributes = _oa
            end
          end
        if !_o['validityPeriods'].nil?
          _oa = _o['validityPeriods']
            if(_oa.is_a? Hash)
              @validityPeriods = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validityPeriods =  Org::Apache::Ranger::Plugin::Model::RangerValiditySchedule.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validityPeriods = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validityPeriods.push Org::Apache::Ranger::Plugin::Model::RangerValiditySchedule.from_json(_item)
                 else
                   @validityPeriods.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validityPeriods = _oa
            end
          end
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push Fixnum.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a RangerTag from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyLabelList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vxPolicyLabels

    # the json hash for this VXPolicyLabelList
    def to_jaxb_json_hash
      _h = super
      if !vxPolicyLabels.nil?
        _ha = Array.new
        vxPolicyLabels.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vxPolicyLabels'] = _ha
      end
      return _h
    end

    #initializes this VXPolicyLabelList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vxPolicyLabels'].nil?
          _oa = _o['vxPolicyLabels']
            if(_oa.is_a? Hash)
              @vxPolicyLabels = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vxPolicyLabels =  Org::Apache::Ranger::View::VXPolicyLabel.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vxPolicyLabels = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vxPolicyLabels.push Org::Apache::Ranger::View::VXPolicyLabel.from_json(_item)
                 else
                   @vxPolicyLabels.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vxPolicyLabels = _oa
            end
          end
    end

    # constructs a VXPolicyLabelList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXString < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # Value
    attr_accessor :value

    # the json hash for this VXString
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    #initializes this VXString with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a VXString from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXCredentialStoreList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXCredentialStores

    # the json hash for this VXCredentialStoreList
    def to_jaxb_json_hash
      _h = super
      if !vXCredentialStores.nil?
        _ha = Array.new
        vXCredentialStores.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXCredentialStores'] = _ha
      end
      return _h
    end

    #initializes this VXCredentialStoreList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXCredentialStores'].nil?
          _oa = _o['vXCredentialStores']
            if(_oa.is_a? Hash)
              @vXCredentialStores = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXCredentialStores =  Org::Apache::Ranger::View::VXCredentialStore.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXCredentialStores = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXCredentialStores.push Org::Apache::Ranger::View::VXCredentialStore.from_json(_item)
                 else
                   @vXCredentialStores.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXCredentialStores = _oa
            end
          end
    end

    # constructs a VXCredentialStoreList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXKmsKeyList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXKeys

    # the json hash for this VXKmsKeyList
    def to_jaxb_json_hash
      _h = super
      if !vXKeys.nil?
        _ha = Array.new
        vXKeys.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXKeys'] = _ha
      end
      return _h
    end

    #initializes this VXKmsKeyList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXKeys'].nil?
          _oa = _o['vXKeys']
            if(_oa.is_a? Hash)
              @vXKeys = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXKeys =  Org::Apache::Ranger::View::VXKmsKey.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXKeys = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXKeys.push Org::Apache::Ranger::View::VXKmsKey.from_json(_item)
                 else
                   @vXKeys.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXKeys = _oa
            end
          end
    end

    # constructs a VXKmsKeyList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXLong < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # Value
    attr_accessor :value

    # the json hash for this VXLong
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    #initializes this VXLong with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push Bignum.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a VXLong from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupGroupList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXGroupGroups

    # the json hash for this VXGroupGroupList
    def to_jaxb_json_hash
      _h = super
      if !vXGroupGroups.nil?
        _ha = Array.new
        vXGroupGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXGroupGroups'] = _ha
      end
      return _h
    end

    #initializes this VXGroupGroupList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXGroupGroups'].nil?
          _oa = _o['vXGroupGroups']
            if(_oa.is_a? Hash)
              @vXGroupGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXGroupGroups =  Org::Apache::Ranger::View::VXGroupGroup.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXGroupGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXGroupGroups.push Org::Apache::Ranger::View::VXGroupGroup.from_json(_item)
                 else
                   @vXGroupGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXGroupGroups = _oa
            end
          end
    end

    # constructs a VXGroupGroupList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItemAccess 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :isAllowed

    # the json hash for this RangerPolicyItemAccess
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['isAllowed'] = isAllowed.to_jaxb_json_hash unless isAllowed.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyItemAccess
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItemAccess with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['isAllowed'].nil?
          _oa = _o['isAllowed']
            if(_oa.is_a? Hash)
              @isAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAllowed =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAllowed.push Boolean.from_json(_item)
                 else
                   @isAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAllowed = _oa
            end
          end
    end

    # constructs a RangerPolicyItemAccess from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXResponse < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # Status code
    # This attribute is of type enum XResponse::ResponseStatus
    attr_accessor :statusCode
    # Message description
    attr_accessor :msgDesc
    # List of messages
    attr_accessor :messageList

    # the json hash for this VXResponse
    def to_jaxb_json_hash
      _h = super
      _h['statusCode'] = statusCode.to_jaxb_json_hash unless statusCode.nil?
      _h['msgDesc'] = msgDesc.to_jaxb_json_hash unless msgDesc.nil?
      if !messageList.nil?
        _ha = Array.new
        messageList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['messageList'] = _ha
      end
      return _h
    end

    #initializes this VXResponse with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['statusCode'].nil?
          _oa = _o['statusCode']
            if(_oa.is_a? Hash)
              @statusCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @statusCode =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @statusCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @statusCode.push Fixnum.from_json(_item)
                 else
                   @statusCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @statusCode = _oa
            end
          end
        if !_o['msgDesc'].nil?
          _oa = _o['msgDesc']
            if(_oa.is_a? Hash)
              @msgDesc = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @msgDesc =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @msgDesc = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @msgDesc.push String.from_json(_item)
                 else
                   @msgDesc.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @msgDesc = _oa
            end
          end
        if !_o['messageList'].nil?
          _oa = _o['messageList']
            if(_oa.is_a? Hash)
              @messageList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @messageList =  Org::Apache::Ranger::View::VXMessage.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @messageList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @messageList.push Org::Apache::Ranger::View::VXMessage.from_json(_item)
                 else
                   @messageList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @messageList = _oa
            end
          end
    end

    # constructs a VXResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class VTrxLogAttr < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # the attribUserFriendlyName
    attr_accessor :attribUserFriendlyName
    # the isEnum
    attr_accessor :enum
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VTrxLogAttr
    def to_jaxb_json_hash
      _h = super
      _h['attribUserFriendlyName'] = attribUserFriendlyName.to_jaxb_json_hash unless attribUserFriendlyName.nil?
      _h['enum'] = enum.to_jaxb_json_hash unless enum.nil?
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VTrxLogAttr with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['attribUserFriendlyName'].nil?
          _oa = _o['attribUserFriendlyName']
            if(_oa.is_a? Hash)
              @attribUserFriendlyName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attribUserFriendlyName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attribUserFriendlyName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attribUserFriendlyName.push String.from_json(_item)
                 else
                   @attribUserFriendlyName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attribUserFriendlyName = _oa
            end
          end
        if !_o['enum'].nil?
          _oa = _o['enum']
            if(_oa.is_a? Hash)
              @enum = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enum =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enum = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enum.push Boolean.from_json(_item)
                 else
                   @enum.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enum = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VTrxLogAttr from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerSecurityZoneService 

    # (no documentation provided)
    attr_accessor :resources

    # the json hash for this RangerSecurityZoneService
    def to_jaxb_json_hash
      _h = {}
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerSecurityZoneService
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerSecurityZoneService with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Hash.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
    end

    # constructs a RangerSecurityZoneService from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXDataObject < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # Id of the data
    attr_accessor :id
    # Date when this data was created
    attr_accessor :createDate
    # Date when this data was updated
    attr_accessor :updateDate
    # Owner
    attr_accessor :owner
    # Updated By
    attr_accessor :updatedBy

    # the json hash for this VXDataObject
    def to_jaxb_json_hash
      _h = super
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['createDate'] = createDate.to_jaxb_json_hash unless createDate.nil?
      _h['updateDate'] = updateDate.to_jaxb_json_hash unless updateDate.nil?
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      _h['updatedBy'] = updatedBy.to_jaxb_json_hash unless updatedBy.nil?
      return _h
    end

    #initializes this VXDataObject with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['createDate'].nil?
          _oa = _o['createDate']
            if(_oa.is_a? Hash)
              @createDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createDate.push Time.from_json(_item)
                 else
                   @createDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createDate = _oa
            end
          end
        if !_o['updateDate'].nil?
          _oa = _o['updateDate']
            if(_oa.is_a? Hash)
              @updateDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateDate.push Time.from_json(_item)
                 else
                   @updateDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateDate = _oa
            end
          end
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push String.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
        if !_o['updatedBy'].nil?
          _oa = _o['updatedBy']
            if(_oa.is_a? Hash)
              @updatedBy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedBy =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedBy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedBy.push String.from_json(_item)
                 else
                   @updatedBy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedBy = _oa
            end
          end
    end

    # constructs a VXDataObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXModuleDefList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXModuleDef

    # the json hash for this VXModuleDefList
    def to_jaxb_json_hash
      _h = super
      if !vXModuleDef.nil?
        _ha = Array.new
        vXModuleDef.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXModuleDef'] = _ha
      end
      return _h
    end

    #initializes this VXModuleDefList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXModuleDef'].nil?
          _oa = _o['vXModuleDef']
            if(_oa.is_a? Hash)
              @vXModuleDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXModuleDef =  Org::Apache::Ranger::View::VXModuleDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXModuleDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXModuleDef.push Org::Apache::Ranger::View::VXModuleDef.from_json(_item)
                 else
                   @vXModuleDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXModuleDef = _oa
            end
          end
    end

    # constructs a VXModuleDefList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Admin

module Client

module Datatype

  # (no documentation provided)
  class Message 

    # (no documentation provided)
    attr_accessor :rbKey
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :fieldName
    # (no documentation provided)
    attr_accessor :objectId
    # (no documentation provided)
    attr_accessor :message

    # the json hash for this Message
    def to_jaxb_json_hash
      _h = {}
      _h['rbKey'] = rbKey.to_jaxb_json_hash unless rbKey.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['fieldName'] = fieldName.to_jaxb_json_hash unless fieldName.nil?
      _h['objectId'] = objectId.to_jaxb_json_hash unless objectId.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      return _h
    end

    # the json (string form) for this Message
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Message with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['rbKey'].nil?
          _oa = _o['rbKey']
            if(_oa.is_a? Hash)
              @rbKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKey.push String.from_json(_item)
                 else
                   @rbKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKey = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['fieldName'].nil?
          _oa = _o['fieldName']
            if(_oa.is_a? Hash)
              @fieldName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fieldName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fieldName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fieldName.push String.from_json(_item)
                 else
                   @fieldName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fieldName = _oa
            end
          end
        if !_o['objectId'].nil?
          _oa = _o['objectId']
            if(_oa.is_a? Hash)
              @objectId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @objectId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @objectId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @objectId.push Bignum.from_json(_item)
                 else
                   @objectId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @objectId = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
    end

    # constructs a Message from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class TagPolicies 

    # (no documentation provided)
    attr_accessor :policyUpdateTime
    # (no documentation provided)
    attr_accessor :serviceId
    # (no documentation provided)
    attr_accessor :policies
    # (no documentation provided)
    attr_accessor :serviceDef
    # (no documentation provided)
    attr_accessor :auditMode
    # (no documentation provided)
    attr_accessor :policyVersion
    # (no documentation provided)
    attr_accessor :serviceName

    # the json hash for this TagPolicies
    def to_jaxb_json_hash
      _h = {}
      _h['policyUpdateTime'] = policyUpdateTime.to_jaxb_json_hash unless policyUpdateTime.nil?
      _h['serviceId'] = serviceId.to_jaxb_json_hash unless serviceId.nil?
      if !policies.nil?
        _ha = Array.new
        policies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policies'] = _ha
      end
      _h['serviceDef'] = serviceDef.to_jaxb_json_hash unless serviceDef.nil?
      _h['auditMode'] = auditMode.to_jaxb_json_hash unless auditMode.nil?
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      return _h
    end

    # the json (string form) for this TagPolicies
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TagPolicies with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['policyUpdateTime'].nil?
          _oa = _o['policyUpdateTime']
            if(_oa.is_a? Hash)
              @policyUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyUpdateTime.push Time.from_json(_item)
                 else
                   @policyUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyUpdateTime = _oa
            end
          end
        if !_o['serviceId'].nil?
          _oa = _o['serviceId']
            if(_oa.is_a? Hash)
              @serviceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceId.push Bignum.from_json(_item)
                 else
                   @serviceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceId = _oa
            end
          end
        if !_o['policies'].nil?
          _oa = _o['policies']
            if(_oa.is_a? Hash)
              @policies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policies =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policies.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policies = _oa
            end
          end
        if !_o['serviceDef'].nil?
          _oa = _o['serviceDef']
            if(_oa.is_a? Hash)
              @serviceDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceDef =  Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceDef.push Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_item)
                 else
                   @serviceDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceDef = _oa
            end
          end
        if !_o['auditMode'].nil?
          _oa = _o['auditMode']
            if(_oa.is_a? Hash)
              @auditMode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditMode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditMode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditMode.push String.from_json(_item)
                 else
                   @auditMode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditMode = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
    end

    # constructs a TagPolicies from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPortalUser < Org::Apache::Ranger::View::VXDataObject 

    # Login Id for the user
    attr_accessor :loginId
    # Password
    attr_accessor :password
    # Status
    # This attribute is of type enum CommonEnums::ActivationStatus
    attr_accessor :status
    # Email address of the user
    attr_accessor :emailAddress
    # First name of the user
    attr_accessor :firstName
    # Last name of the user
    attr_accessor :lastName
    # Public name of the user
    attr_accessor :publicScreenName
    # Source of the user
    # This attribute is of type enum CommonEnums::UserSource
    attr_accessor :userSource
    # Notes for the user
    attr_accessor :notes
    # List of roles for this user
    attr_accessor :userRoleList
    # (no documentation provided)
    attr_accessor :groupIdList
    # (no documentation provided)
    attr_accessor :userPermList
    # (no documentation provided)
    attr_accessor :groupPermissions

    # the json hash for this VXPortalUser
    def to_jaxb_json_hash
      _h = super
      _h['loginId'] = loginId.to_jaxb_json_hash unless loginId.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['publicScreenName'] = publicScreenName.to_jaxb_json_hash unless publicScreenName.nil?
      _h['userSource'] = userSource.to_jaxb_json_hash unless userSource.nil?
      _h['notes'] = notes.to_jaxb_json_hash unless notes.nil?
      if !userRoleList.nil?
        _ha = Array.new
        userRoleList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userRoleList'] = _ha
      end
      if !groupIdList.nil?
        _ha = Array.new
        groupIdList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupIdList'] = _ha
      end
      if !userPermList.nil?
        _ha = Array.new
        userPermList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userPermList'] = _ha
      end
      if !groupPermissions.nil?
        _ha = Array.new
        groupPermissions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupPermissions'] = _ha
      end
      return _h
    end

    #initializes this VXPortalUser with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['loginId'].nil?
          _oa = _o['loginId']
            if(_oa.is_a? Hash)
              @loginId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginId.push String.from_json(_item)
                 else
                   @loginId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginId = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push Fixnum.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['publicScreenName'].nil?
          _oa = _o['publicScreenName']
            if(_oa.is_a? Hash)
              @publicScreenName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicScreenName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicScreenName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicScreenName.push String.from_json(_item)
                 else
                   @publicScreenName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicScreenName = _oa
            end
          end
        if !_o['userSource'].nil?
          _oa = _o['userSource']
            if(_oa.is_a? Hash)
              @userSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userSource =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userSource.push Fixnum.from_json(_item)
                 else
                   @userSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userSource = _oa
            end
          end
        if !_o['notes'].nil?
          _oa = _o['notes']
            if(_oa.is_a? Hash)
              @notes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @notes =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @notes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @notes.push String.from_json(_item)
                 else
                   @notes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @notes = _oa
            end
          end
        if !_o['userRoleList'].nil?
          _oa = _o['userRoleList']
            if(_oa.is_a? Hash)
              @userRoleList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userRoleList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userRoleList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userRoleList.push String.from_json(_item)
                 else
                   @userRoleList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userRoleList = _oa
            end
          end
        if !_o['groupIdList'].nil?
          _oa = _o['groupIdList']
            if(_oa.is_a? Hash)
              @groupIdList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupIdList =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupIdList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupIdList.push Bignum.from_json(_item)
                 else
                   @groupIdList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupIdList = _oa
            end
          end
        if !_o['userPermList'].nil?
          _oa = _o['userPermList']
            if(_oa.is_a? Hash)
              @userPermList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userPermList =  Org::Apache::Ranger::View::VXUserPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userPermList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userPermList.push Org::Apache::Ranger::View::VXUserPermission.from_json(_item)
                 else
                   @userPermList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userPermList = _oa
            end
          end
        if !_o['groupPermissions'].nil?
          _oa = _o['groupPermissions']
            if(_oa.is_a? Hash)
              @groupPermissions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupPermissions =  Org::Apache::Ranger::View::VXGroupPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupPermissions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupPermissions.push Org::Apache::Ranger::View::VXGroupPermission.from_json(_item)
                 else
                   @groupPermissions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupPermissions = _oa
            end
          end
    end

    # constructs a VXPortalUser from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Service

  # (no documentation provided)
  class ResourceLookupContext 

    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :resourceName
    # (no documentation provided)
    attr_accessor :userInput

    # the json hash for this ResourceLookupContext
    def to_jaxb_json_hash
      _h = {}
      _h['resources'] = resources.to_jaxb_json_hash unless resources.nil?
      _h['resourceName'] = resourceName.to_jaxb_json_hash unless resourceName.nil?
      _h['userInput'] = userInput.to_jaxb_json_hash unless userInput.nil?
      return _h
    end

    # the json (string form) for this ResourceLookupContext
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ResourceLookupContext with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Hash.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['resourceName'].nil?
          _oa = _o['resourceName']
            if(_oa.is_a? Hash)
              @resourceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceName.push String.from_json(_item)
                 else
                   @resourceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceName = _oa
            end
          end
        if !_o['userInput'].nil?
          _oa = _o['userInput']
            if(_oa.is_a? Hash)
              @userInput = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userInput =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userInput = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userInput.push String.from_json(_item)
                 else
                   @userInput.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userInput = _oa
            end
          end
    end

    # constructs a ResourceLookupContext from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class GrantRevokeRequest 

    # (no documentation provided)
    attr_accessor :grantorGroups
    # (no documentation provided)
    attr_accessor :resource
    # (no documentation provided)
    attr_accessor :requestData
    # (no documentation provided)
    attr_accessor :zoneName
    # (no documentation provided)
    attr_accessor :isRecursive
    # (no documentation provided)
    attr_accessor :clientType
    # (no documentation provided)
    attr_accessor :accessTypes
    # (no documentation provided)
    attr_accessor :replaceExistingPermissions
    # (no documentation provided)
    attr_accessor :delegateAdmin
    # (no documentation provided)
    attr_accessor :grantor
    # (no documentation provided)
    attr_accessor :clusterName
    # (no documentation provided)
    attr_accessor :enableAudit
    # (no documentation provided)
    attr_accessor :groups
    # (no documentation provided)
    attr_accessor :clientIPAddress
    # (no documentation provided)
    attr_accessor :users
    # (no documentation provided)
    attr_accessor :sessionId

    # the json hash for this GrantRevokeRequest
    def to_jaxb_json_hash
      _h = {}
      if !grantorGroups.nil?
        _ha = Array.new
        grantorGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['grantorGroups'] = _ha
      end
      _h['resource'] = resource.to_jaxb_json_hash unless resource.nil?
      _h['requestData'] = requestData.to_jaxb_json_hash unless requestData.nil?
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['clientType'] = clientType.to_jaxb_json_hash unless clientType.nil?
      if !accessTypes.nil?
        _ha = Array.new
        accessTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypes'] = _ha
      end
      _h['replaceExistingPermissions'] = replaceExistingPermissions.to_jaxb_json_hash unless replaceExistingPermissions.nil?
      _h['delegateAdmin'] = delegateAdmin.to_jaxb_json_hash unless delegateAdmin.nil?
      _h['grantor'] = grantor.to_jaxb_json_hash unless grantor.nil?
      _h['clusterName'] = clusterName.to_jaxb_json_hash unless clusterName.nil?
      _h['enableAudit'] = enableAudit.to_jaxb_json_hash unless enableAudit.nil?
      if !groups.nil?
        _ha = Array.new
        groups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groups'] = _ha
      end
      _h['clientIPAddress'] = clientIPAddress.to_jaxb_json_hash unless clientIPAddress.nil?
      if !users.nil?
        _ha = Array.new
        users.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['users'] = _ha
      end
      _h['sessionId'] = sessionId.to_jaxb_json_hash unless sessionId.nil?
      return _h
    end

    # the json (string form) for this GrantRevokeRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this GrantRevokeRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['grantorGroups'].nil?
          _oa = _o['grantorGroups']
            if(_oa.is_a? Hash)
              @grantorGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grantorGroups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grantorGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grantorGroups.push String.from_json(_item)
                 else
                   @grantorGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grantorGroups = _oa
            end
          end
        if !_o['resource'].nil?
          _oa = _o['resource']
            if(_oa.is_a? Hash)
              @resource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resource =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resource.push Hash.from_json(_item)
                 else
                   @resource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resource = _oa
            end
          end
        if !_o['requestData'].nil?
          _oa = _o['requestData']
            if(_oa.is_a? Hash)
              @requestData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestData =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestData.push String.from_json(_item)
                 else
                   @requestData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestData = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Boolean.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['clientType'].nil?
          _oa = _o['clientType']
            if(_oa.is_a? Hash)
              @clientType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientType.push String.from_json(_item)
                 else
                   @clientType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientType = _oa
            end
          end
        if !_o['accessTypes'].nil?
          _oa = _o['accessTypes']
            if(_oa.is_a? Hash)
              @accessTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypes =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypes.push String.from_json(_item)
                 else
                   @accessTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypes = _oa
            end
          end
        if !_o['replaceExistingPermissions'].nil?
          _oa = _o['replaceExistingPermissions']
            if(_oa.is_a? Hash)
              @replaceExistingPermissions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @replaceExistingPermissions =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @replaceExistingPermissions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @replaceExistingPermissions.push Boolean.from_json(_item)
                 else
                   @replaceExistingPermissions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @replaceExistingPermissions = _oa
            end
          end
        if !_o['delegateAdmin'].nil?
          _oa = _o['delegateAdmin']
            if(_oa.is_a? Hash)
              @delegateAdmin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delegateAdmin =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delegateAdmin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delegateAdmin.push Boolean.from_json(_item)
                 else
                   @delegateAdmin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delegateAdmin = _oa
            end
          end
        if !_o['grantor'].nil?
          _oa = _o['grantor']
            if(_oa.is_a? Hash)
              @grantor = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @grantor =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @grantor = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @grantor.push String.from_json(_item)
                 else
                   @grantor.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @grantor = _oa
            end
          end
        if !_o['clusterName'].nil?
          _oa = _o['clusterName']
            if(_oa.is_a? Hash)
              @clusterName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clusterName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clusterName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clusterName.push String.from_json(_item)
                 else
                   @clusterName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clusterName = _oa
            end
          end
        if !_o['enableAudit'].nil?
          _oa = _o['enableAudit']
            if(_oa.is_a? Hash)
              @enableAudit = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enableAudit =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enableAudit = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enableAudit.push Boolean.from_json(_item)
                 else
                   @enableAudit.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enableAudit = _oa
            end
          end
        if !_o['groups'].nil?
          _oa = _o['groups']
            if(_oa.is_a? Hash)
              @groups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groups.push String.from_json(_item)
                 else
                   @groups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groups = _oa
            end
          end
        if !_o['clientIPAddress'].nil?
          _oa = _o['clientIPAddress']
            if(_oa.is_a? Hash)
              @clientIPAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientIPAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientIPAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientIPAddress.push String.from_json(_item)
                 else
                   @clientIPAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientIPAddress = _oa
            end
          end
        if !_o['users'].nil?
          _oa = _o['users']
            if(_oa.is_a? Hash)
              @users = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @users =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @users = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @users.push String.from_json(_item)
                 else
                   @users.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @users = _oa
            end
          end
        if !_o['sessionId'].nil?
          _oa = _o['sessionId']
            if(_oa.is_a? Hash)
              @sessionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionId.push String.from_json(_item)
                 else
                   @sessionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionId = _oa
            end
          end
    end

    # constructs a GrantRevokeRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerDataMaskTypeDef 

    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :dataMaskOptions
    # (no documentation provided)
    attr_accessor :transformer
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :rbKeyLabel

    # the json hash for this RangerDataMaskTypeDef
    def to_jaxb_json_hash
      _h = {}
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['dataMaskOptions'] = dataMaskOptions.to_jaxb_json_hash unless dataMaskOptions.nil?
      _h['transformer'] = transformer.to_jaxb_json_hash unless transformer.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      return _h
    end

    # the json (string form) for this RangerDataMaskTypeDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerDataMaskTypeDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['dataMaskOptions'].nil?
          _oa = _o['dataMaskOptions']
            if(_oa.is_a? Hash)
              @dataMaskOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskOptions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskOptions.push Hash.from_json(_item)
                 else
                   @dataMaskOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskOptions = _oa
            end
          end
        if !_o['transformer'].nil?
          _oa = _o['transformer']
            if(_oa.is_a? Hash)
              @transformer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transformer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transformer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transformer.push String.from_json(_item)
                 else
                   @transformer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transformer = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
    end

    # constructs a RangerDataMaskTypeDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAccessAudit < Org::Apache::Ranger::View::VXDataObject 

    # Repository Type
    attr_accessor :auditType
    # Access Result
    # This attribute is of type enum CommonEnums::AccessResult
    attr_accessor :accessResult
    # Access Type
    attr_accessor :accessType
    # Acl Enforcer
    attr_accessor :aclEnforcer
    # Agent Id
    attr_accessor :agentId
    # Client Ip
    attr_accessor :clientIP
    # Client Type
    attr_accessor :clientType
    # Policy Id
    attr_accessor :policyId
    # Repository Name
    attr_accessor :repoName
    # Repository Type
    attr_accessor :repoType
    # Service Type ~~ repoType
    attr_accessor :serviceType
    # Reason of result
    attr_accessor :resultReason
    # Session Id
    attr_accessor :sessionId
    # Event Time
    attr_accessor :eventTime
    # Requesting User
    attr_accessor :requestUser
    # Action
    attr_accessor :action
    # Requesting Data
    attr_accessor :requestData
    # Resource Path
    attr_accessor :resourcePath
    # Resource Type
    attr_accessor :resourceType
    # (no documentation provided)
    attr_accessor :sequenceNumber
    # (no documentation provided)
    attr_accessor :eventCount
    # (no documentation provided)
    attr_accessor :eventDuration
    # (no documentation provided)
    attr_accessor :tags
    # (no documentation provided)
    attr_accessor :clusterName
    # (no documentation provided)
    attr_accessor :zoneName
    # (no documentation provided)
    attr_accessor :policyVersion

    # the json hash for this VXAccessAudit
    def to_jaxb_json_hash
      _h = super
      _h['auditType'] = auditType.to_jaxb_json_hash unless auditType.nil?
      _h['accessResult'] = accessResult.to_jaxb_json_hash unless accessResult.nil?
      _h['accessType'] = accessType.to_jaxb_json_hash unless accessType.nil?
      _h['aclEnforcer'] = aclEnforcer.to_jaxb_json_hash unless aclEnforcer.nil?
      _h['agentId'] = agentId.to_jaxb_json_hash unless agentId.nil?
      _h['clientIP'] = clientIP.to_jaxb_json_hash unless clientIP.nil?
      _h['clientType'] = clientType.to_jaxb_json_hash unless clientType.nil?
      _h['policyId'] = policyId.to_jaxb_json_hash unless policyId.nil?
      _h['repoName'] = repoName.to_jaxb_json_hash unless repoName.nil?
      _h['repoType'] = repoType.to_jaxb_json_hash unless repoType.nil?
      _h['serviceType'] = serviceType.to_jaxb_json_hash unless serviceType.nil?
      _h['resultReason'] = resultReason.to_jaxb_json_hash unless resultReason.nil?
      _h['sessionId'] = sessionId.to_jaxb_json_hash unless sessionId.nil?
      _h['eventTime'] = eventTime.to_jaxb_json_hash unless eventTime.nil?
      _h['requestUser'] = requestUser.to_jaxb_json_hash unless requestUser.nil?
      _h['action'] = action.to_jaxb_json_hash unless action.nil?
      _h['requestData'] = requestData.to_jaxb_json_hash unless requestData.nil?
      _h['resourcePath'] = resourcePath.to_jaxb_json_hash unless resourcePath.nil?
      _h['resourceType'] = resourceType.to_jaxb_json_hash unless resourceType.nil?
      _h['sequenceNumber'] = sequenceNumber.to_jaxb_json_hash unless sequenceNumber.nil?
      _h['eventCount'] = eventCount.to_jaxb_json_hash unless eventCount.nil?
      _h['eventDuration'] = eventDuration.to_jaxb_json_hash unless eventDuration.nil?
      _h['tags'] = tags.to_jaxb_json_hash unless tags.nil?
      _h['clusterName'] = clusterName.to_jaxb_json_hash unless clusterName.nil?
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      return _h
    end

    #initializes this VXAccessAudit with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['auditType'].nil?
          _oa = _o['auditType']
            if(_oa.is_a? Hash)
              @auditType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditType.push Fixnum.from_json(_item)
                 else
                   @auditType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditType = _oa
            end
          end
        if !_o['accessResult'].nil?
          _oa = _o['accessResult']
            if(_oa.is_a? Hash)
              @accessResult = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessResult =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessResult = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessResult.push Fixnum.from_json(_item)
                 else
                   @accessResult.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessResult = _oa
            end
          end
        if !_o['accessType'].nil?
          _oa = _o['accessType']
            if(_oa.is_a? Hash)
              @accessType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessType.push String.from_json(_item)
                 else
                   @accessType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessType = _oa
            end
          end
        if !_o['aclEnforcer'].nil?
          _oa = _o['aclEnforcer']
            if(_oa.is_a? Hash)
              @aclEnforcer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @aclEnforcer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @aclEnforcer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @aclEnforcer.push String.from_json(_item)
                 else
                   @aclEnforcer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @aclEnforcer = _oa
            end
          end
        if !_o['agentId'].nil?
          _oa = _o['agentId']
            if(_oa.is_a? Hash)
              @agentId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @agentId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @agentId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @agentId.push String.from_json(_item)
                 else
                   @agentId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @agentId = _oa
            end
          end
        if !_o['clientIP'].nil?
          _oa = _o['clientIP']
            if(_oa.is_a? Hash)
              @clientIP = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientIP =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientIP = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientIP.push String.from_json(_item)
                 else
                   @clientIP.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientIP = _oa
            end
          end
        if !_o['clientType'].nil?
          _oa = _o['clientType']
            if(_oa.is_a? Hash)
              @clientType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientType.push String.from_json(_item)
                 else
                   @clientType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientType = _oa
            end
          end
        if !_o['policyId'].nil?
          _oa = _o['policyId']
            if(_oa.is_a? Hash)
              @policyId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyId.push Bignum.from_json(_item)
                 else
                   @policyId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyId = _oa
            end
          end
        if !_o['repoName'].nil?
          _oa = _o['repoName']
            if(_oa.is_a? Hash)
              @repoName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repoName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repoName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repoName.push String.from_json(_item)
                 else
                   @repoName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repoName = _oa
            end
          end
        if !_o['repoType'].nil?
          _oa = _o['repoType']
            if(_oa.is_a? Hash)
              @repoType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repoType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repoType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repoType.push Fixnum.from_json(_item)
                 else
                   @repoType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repoType = _oa
            end
          end
        if !_o['serviceType'].nil?
          _oa = _o['serviceType']
            if(_oa.is_a? Hash)
              @serviceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceType.push String.from_json(_item)
                 else
                   @serviceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceType = _oa
            end
          end
        if !_o['resultReason'].nil?
          _oa = _o['resultReason']
            if(_oa.is_a? Hash)
              @resultReason = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resultReason =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resultReason = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resultReason.push String.from_json(_item)
                 else
                   @resultReason.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resultReason = _oa
            end
          end
        if !_o['sessionId'].nil?
          _oa = _o['sessionId']
            if(_oa.is_a? Hash)
              @sessionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionId.push String.from_json(_item)
                 else
                   @sessionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionId = _oa
            end
          end
        if !_o['eventTime'].nil?
          _oa = _o['eventTime']
            if(_oa.is_a? Hash)
              @eventTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventTime.push Time.from_json(_item)
                 else
                   @eventTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventTime = _oa
            end
          end
        if !_o['requestUser'].nil?
          _oa = _o['requestUser']
            if(_oa.is_a? Hash)
              @requestUser = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestUser =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestUser = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestUser.push String.from_json(_item)
                 else
                   @requestUser.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestUser = _oa
            end
          end
        if !_o['action'].nil?
          _oa = _o['action']
            if(_oa.is_a? Hash)
              @action = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @action =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @action = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @action.push String.from_json(_item)
                 else
                   @action.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @action = _oa
            end
          end
        if !_o['requestData'].nil?
          _oa = _o['requestData']
            if(_oa.is_a? Hash)
              @requestData = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @requestData =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @requestData = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @requestData.push String.from_json(_item)
                 else
                   @requestData.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @requestData = _oa
            end
          end
        if !_o['resourcePath'].nil?
          _oa = _o['resourcePath']
            if(_oa.is_a? Hash)
              @resourcePath = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourcePath =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourcePath = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourcePath.push String.from_json(_item)
                 else
                   @resourcePath.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourcePath = _oa
            end
          end
        if !_o['resourceType'].nil?
          _oa = _o['resourceType']
            if(_oa.is_a? Hash)
              @resourceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceType.push String.from_json(_item)
                 else
                   @resourceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceType = _oa
            end
          end
        if !_o['sequenceNumber'].nil?
          _oa = _o['sequenceNumber']
            if(_oa.is_a? Hash)
              @sequenceNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sequenceNumber =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sequenceNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sequenceNumber.push Bignum.from_json(_item)
                 else
                   @sequenceNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sequenceNumber = _oa
            end
          end
        if !_o['eventCount'].nil?
          _oa = _o['eventCount']
            if(_oa.is_a? Hash)
              @eventCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventCount =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventCount.push Bignum.from_json(_item)
                 else
                   @eventCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventCount = _oa
            end
          end
        if !_o['eventDuration'].nil?
          _oa = _o['eventDuration']
            if(_oa.is_a? Hash)
              @eventDuration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @eventDuration =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @eventDuration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @eventDuration.push Bignum.from_json(_item)
                 else
                   @eventDuration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @eventDuration = _oa
            end
          end
        if !_o['tags'].nil?
          _oa = _o['tags']
            if(_oa.is_a? Hash)
              @tags = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tags =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tags = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tags.push String.from_json(_item)
                 else
                   @tags.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tags = _oa
            end
          end
        if !_o['clusterName'].nil?
          _oa = _o['clusterName']
            if(_oa.is_a? Hash)
              @clusterName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clusterName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clusterName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clusterName.push String.from_json(_item)
                 else
                   @clusterName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clusterName = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
    end

    # constructs a VXAccessAudit from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyExportAuditList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPolicyExportAudits

    # the json hash for this VXPolicyExportAuditList
    def to_jaxb_json_hash
      _h = super
      if !vXPolicyExportAudits.nil?
        _ha = Array.new
        vXPolicyExportAudits.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPolicyExportAudits'] = _ha
      end
      return _h
    end

    #initializes this VXPolicyExportAuditList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPolicyExportAudits'].nil?
          _oa = _o['vXPolicyExportAudits']
            if(_oa.is_a? Hash)
              @vXPolicyExportAudits = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPolicyExportAudits =  Org::Apache::Ranger::View::VXPolicyExportAudit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPolicyExportAudits = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPolicyExportAudits.push Org::Apache::Ranger::View::VXPolicyExportAudit.from_json(_item)
                 else
                   @vXPolicyExportAudits.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPolicyExportAudits = _oa
            end
          end
    end

    # constructs a VXPolicyExportAuditList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class SecurityZoneInfo 

    # (no documentation provided)
    attr_accessor :policies
    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :policyDeltas
    # (no documentation provided)
    attr_accessor :zoneName

    # the json hash for this SecurityZoneInfo
    def to_jaxb_json_hash
      _h = {}
      if !policies.nil?
        _ha = Array.new
        policies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policies'] = _ha
      end
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      if !policyDeltas.nil?
        _ha = Array.new
        policyDeltas.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyDeltas'] = _ha
      end
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      return _h
    end

    # the json (string form) for this SecurityZoneInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SecurityZoneInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['policies'].nil?
          _oa = _o['policies']
            if(_oa.is_a? Hash)
              @policies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policies =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policies.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policies = _oa
            end
          end
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Hash.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['policyDeltas'].nil?
          _oa = _o['policyDeltas']
            if(_oa.is_a? Hash)
              @policyDeltas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyDeltas =  Org::Apache::Ranger::Plugin::Model::RangerPolicyDelta.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyDeltas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyDeltas.push Org::Apache::Ranger::Plugin::Model::RangerPolicyDelta.from_json(_item)
                 else
                   @policyDeltas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyDeltas = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
    end

    # constructs a SecurityZoneInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXModuleDef < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :createTime
    # (no documentation provided)
    attr_accessor :updateTime
    # (no documentation provided)
    attr_accessor :addedById
    # (no documentation provided)
    attr_accessor :updatedById
    # (no documentation provided)
    attr_accessor :module
    # (no documentation provided)
    attr_accessor :url
    # (no documentation provided)
    attr_accessor :userPermList
    # (no documentation provided)
    attr_accessor :groupPermList

    # the json hash for this VXModuleDef
    def to_jaxb_json_hash
      _h = super
      _h['createTime'] = createTime.to_jaxb_json_hash unless createTime.nil?
      _h['updateTime'] = updateTime.to_jaxb_json_hash unless updateTime.nil?
      _h['addedById'] = addedById.to_jaxb_json_hash unless addedById.nil?
      _h['updatedById'] = updatedById.to_jaxb_json_hash unless updatedById.nil?
      _h['module'] = module.to_jaxb_json_hash unless module.nil?
      _h['url'] = url.to_jaxb_json_hash unless url.nil?
      if !userPermList.nil?
        _ha = Array.new
        userPermList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userPermList'] = _ha
      end
      if !groupPermList.nil?
        _ha = Array.new
        groupPermList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupPermList'] = _ha
      end
      return _h
    end

    #initializes this VXModuleDef with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['createTime'].nil?
          _oa = _o['createTime']
            if(_oa.is_a? Hash)
              @createTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @createTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @createTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @createTime.push Time.from_json(_item)
                 else
                   @createTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @createTime = _oa
            end
          end
        if !_o['updateTime'].nil?
          _oa = _o['updateTime']
            if(_oa.is_a? Hash)
              @updateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updateTime.push Time.from_json(_item)
                 else
                   @updateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updateTime = _oa
            end
          end
        if !_o['addedById'].nil?
          _oa = _o['addedById']
            if(_oa.is_a? Hash)
              @addedById = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @addedById =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @addedById = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @addedById.push Bignum.from_json(_item)
                 else
                   @addedById.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @addedById = _oa
            end
          end
        if !_o['updatedById'].nil?
          _oa = _o['updatedById']
            if(_oa.is_a? Hash)
              @updatedById = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @updatedById =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @updatedById = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @updatedById.push Bignum.from_json(_item)
                 else
                   @updatedById.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @updatedById = _oa
            end
          end
        if !_o['module'].nil?
          _oa = _o['module']
            if(_oa.is_a? Hash)
              @module = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @module =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @module = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @module.push String.from_json(_item)
                 else
                   @module.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @module = _oa
            end
          end
        if !_o['url'].nil?
          _oa = _o['url']
            if(_oa.is_a? Hash)
              @url = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @url =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @url = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @url.push String.from_json(_item)
                 else
                   @url.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @url = _oa
            end
          end
        if !_o['userPermList'].nil?
          _oa = _o['userPermList']
            if(_oa.is_a? Hash)
              @userPermList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userPermList =  Org::Apache::Ranger::View::VXUserPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userPermList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userPermList.push Org::Apache::Ranger::View::VXUserPermission.from_json(_item)
                 else
                   @userPermList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userPermList = _oa
            end
          end
        if !_o['groupPermList'].nil?
          _oa = _o['groupPermList']
            if(_oa.is_a? Hash)
              @groupPermList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupPermList =  Org::Apache::Ranger::View::VXGroupPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupPermList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupPermList.push Org::Apache::Ranger::View::VXGroupPermission.from_json(_item)
                 else
                   @groupPermList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupPermList = _oa
            end
          end
    end

    # constructs a VXModuleDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAccessAuditList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAccessAudits

    # the json hash for this VXAccessAuditList
    def to_jaxb_json_hash
      _h = super
      if !vXAccessAudits.nil?
        _ha = Array.new
        vXAccessAudits.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAccessAudits'] = _ha
      end
      return _h
    end

    #initializes this VXAccessAuditList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAccessAudits'].nil?
          _oa = _o['vXAccessAudits']
            if(_oa.is_a? Hash)
              @vXAccessAudits = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAccessAudits =  Org::Apache::Ranger::View::VXAccessAudit.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAccessAudits = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAccessAudits.push Org::Apache::Ranger::View::VXAccessAudit.from_json(_item)
                 else
                   @vXAccessAudits.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAccessAudits = _oa
            end
          end
    end

    # constructs a VXAccessAuditList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerExportPolicyList < Org::Apache::Ranger::View::RangerPolicyList 

    # (no documentation provided)
    attr_accessor :metaDataInfo

    # the json hash for this RangerExportPolicyList
    def to_jaxb_json_hash
      _h = super
      _h['metaDataInfo'] = metaDataInfo.to_jaxb_json_hash unless metaDataInfo.nil?
      return _h
    end

    #initializes this RangerExportPolicyList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['metaDataInfo'].nil?
          _oa = _o['metaDataInfo']
            if(_oa.is_a? Hash)
              @metaDataInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @metaDataInfo =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @metaDataInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @metaDataInfo.push Hash.from_json(_item)
                 else
                   @metaDataInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @metaDataInfo = _oa
            end
          end
    end

    # constructs a RangerExportPolicyList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicy < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :service
    # (no documentation provided)
    attr_accessor :rowFilterPolicyItems
    # (no documentation provided)
    attr_accessor :zoneName
    # (no documentation provided)
    attr_accessor :policyLabels
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :validitySchedules
    # (no documentation provided)
    attr_accessor :resourceSignature
    # (no documentation provided)
    attr_accessor :allowExceptions
    # (no documentation provided)
    attr_accessor :policyPriority
    # (no documentation provided)
    attr_accessor :isAuditEnabled
    # (no documentation provided)
    attr_accessor :serviceType
    # (no documentation provided)
    attr_accessor :options
    # (no documentation provided)
    attr_accessor :policyItems
    # (no documentation provided)
    attr_accessor :dataMaskPolicyItems
    # (no documentation provided)
    attr_accessor :denyExceptions
    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :denyPolicyItems
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :policyType

    # the json hash for this RangerPolicy
    def to_jaxb_json_hash
      _h = super
      _h['service'] = service.to_jaxb_json_hash unless service.nil?
      if !rowFilterPolicyItems.nil?
        _ha = Array.new
        rowFilterPolicyItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rowFilterPolicyItems'] = _ha
      end
      _h['zoneName'] = zoneName.to_jaxb_json_hash unless zoneName.nil?
      if !policyLabels.nil?
        _ha = Array.new
        policyLabels.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyLabels'] = _ha
      end
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      if !validitySchedules.nil?
        _ha = Array.new
        validitySchedules.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['validitySchedules'] = _ha
      end
      _h['resourceSignature'] = resourceSignature.to_jaxb_json_hash unless resourceSignature.nil?
      if !allowExceptions.nil?
        _ha = Array.new
        allowExceptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['allowExceptions'] = _ha
      end
      _h['policyPriority'] = policyPriority.to_jaxb_json_hash unless policyPriority.nil?
      _h['isAuditEnabled'] = isAuditEnabled.to_jaxb_json_hash unless isAuditEnabled.nil?
      _h['serviceType'] = serviceType.to_jaxb_json_hash unless serviceType.nil?
      _h['options'] = options.to_jaxb_json_hash unless options.nil?
      if !policyItems.nil?
        _ha = Array.new
        policyItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyItems'] = _ha
      end
      if !dataMaskPolicyItems.nil?
        _ha = Array.new
        dataMaskPolicyItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['dataMaskPolicyItems'] = _ha
      end
      if !denyExceptions.nil?
        _ha = Array.new
        denyExceptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['denyExceptions'] = _ha
      end
      _h['resources'] = resources.to_jaxb_json_hash unless resources.nil?
      if !denyPolicyItems.nil?
        _ha = Array.new
        denyPolicyItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['denyPolicyItems'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['policyType'] = policyType.to_jaxb_json_hash unless policyType.nil?
      return _h
    end

    #initializes this RangerPolicy with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['service'].nil?
          _oa = _o['service']
            if(_oa.is_a? Hash)
              @service = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @service =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @service = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @service.push String.from_json(_item)
                 else
                   @service.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @service = _oa
            end
          end
        if !_o['rowFilterPolicyItems'].nil?
          _oa = _o['rowFilterPolicyItems']
            if(_oa.is_a? Hash)
              @rowFilterPolicyItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rowFilterPolicyItems =  Org::Apache::Ranger::Plugin::Model::RangerRowFilterPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rowFilterPolicyItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rowFilterPolicyItems.push Org::Apache::Ranger::Plugin::Model::RangerRowFilterPolicyItem.from_json(_item)
                 else
                   @rowFilterPolicyItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rowFilterPolicyItems = _oa
            end
          end
        if !_o['zoneName'].nil?
          _oa = _o['zoneName']
            if(_oa.is_a? Hash)
              @zoneName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zoneName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zoneName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zoneName.push String.from_json(_item)
                 else
                   @zoneName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zoneName = _oa
            end
          end
        if !_o['policyLabels'].nil?
          _oa = _o['policyLabels']
            if(_oa.is_a? Hash)
              @policyLabels = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyLabels =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyLabels = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyLabels.push String.from_json(_item)
                 else
                   @policyLabels.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyLabels = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['validitySchedules'].nil?
          _oa = _o['validitySchedules']
            if(_oa.is_a? Hash)
              @validitySchedules = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validitySchedules =  Org::Apache::Ranger::Plugin::Model::RangerValiditySchedule.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validitySchedules = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validitySchedules.push Org::Apache::Ranger::Plugin::Model::RangerValiditySchedule.from_json(_item)
                 else
                   @validitySchedules.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validitySchedules = _oa
            end
          end
        if !_o['resourceSignature'].nil?
          _oa = _o['resourceSignature']
            if(_oa.is_a? Hash)
              @resourceSignature = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceSignature =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceSignature = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceSignature.push String.from_json(_item)
                 else
                   @resourceSignature.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceSignature = _oa
            end
          end
        if !_o['allowExceptions'].nil?
          _oa = _o['allowExceptions']
            if(_oa.is_a? Hash)
              @allowExceptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @allowExceptions =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @allowExceptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @allowExceptions.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_item)
                 else
                   @allowExceptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @allowExceptions = _oa
            end
          end
        if !_o['policyPriority'].nil?
          _oa = _o['policyPriority']
            if(_oa.is_a? Hash)
              @policyPriority = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyPriority =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyPriority = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyPriority.push Fixnum.from_json(_item)
                 else
                   @policyPriority.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyPriority = _oa
            end
          end
        if !_o['isAuditEnabled'].nil?
          _oa = _o['isAuditEnabled']
            if(_oa.is_a? Hash)
              @isAuditEnabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAuditEnabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAuditEnabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAuditEnabled.push Boolean.from_json(_item)
                 else
                   @isAuditEnabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAuditEnabled = _oa
            end
          end
        if !_o['serviceType'].nil?
          _oa = _o['serviceType']
            if(_oa.is_a? Hash)
              @serviceType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceType.push String.from_json(_item)
                 else
                   @serviceType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceType = _oa
            end
          end
        if !_o['options'].nil?
          _oa = _o['options']
            if(_oa.is_a? Hash)
              @options = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @options =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @options = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @options.push Hash.from_json(_item)
                 else
                   @options.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @options = _oa
            end
          end
        if !_o['policyItems'].nil?
          _oa = _o['policyItems']
            if(_oa.is_a? Hash)
              @policyItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyItems =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyItems.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_item)
                 else
                   @policyItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyItems = _oa
            end
          end
        if !_o['dataMaskPolicyItems'].nil?
          _oa = _o['dataMaskPolicyItems']
            if(_oa.is_a? Hash)
              @dataMaskPolicyItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskPolicyItems =  Org::Apache::Ranger::Plugin::Model::RangerDataMaskPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskPolicyItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskPolicyItems.push Org::Apache::Ranger::Plugin::Model::RangerDataMaskPolicyItem.from_json(_item)
                 else
                   @dataMaskPolicyItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskPolicyItems = _oa
            end
          end
        if !_o['denyExceptions'].nil?
          _oa = _o['denyExceptions']
            if(_oa.is_a? Hash)
              @denyExceptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @denyExceptions =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @denyExceptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @denyExceptions.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_item)
                 else
                   @denyExceptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @denyExceptions = _oa
            end
          end
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Hash.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['denyPolicyItems'].nil?
          _oa = _o['denyPolicyItems']
            if(_oa.is_a? Hash)
              @denyPolicyItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @denyPolicyItems =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @denyPolicyItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @denyPolicyItems.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItem.from_json(_item)
                 else
                   @denyPolicyItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @denyPolicyItems = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['policyType'].nil?
          _oa = _o['policyType']
            if(_oa.is_a? Hash)
              @policyType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyType.push Fixnum.from_json(_item)
                 else
                   @policyType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyType = _oa
            end
          end
    end

    # constructs a RangerPolicy from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItemDataMaskInfo 

    # (no documentation provided)
    attr_accessor :conditionExpr
    # (no documentation provided)
    attr_accessor :dataMaskType
    # (no documentation provided)
    attr_accessor :valueExpr

    # the json hash for this RangerPolicyItemDataMaskInfo
    def to_jaxb_json_hash
      _h = {}
      _h['conditionExpr'] = conditionExpr.to_jaxb_json_hash unless conditionExpr.nil?
      _h['dataMaskType'] = dataMaskType.to_jaxb_json_hash unless dataMaskType.nil?
      _h['valueExpr'] = valueExpr.to_jaxb_json_hash unless valueExpr.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyItemDataMaskInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItemDataMaskInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['conditionExpr'].nil?
          _oa = _o['conditionExpr']
            if(_oa.is_a? Hash)
              @conditionExpr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conditionExpr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conditionExpr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conditionExpr.push String.from_json(_item)
                 else
                   @conditionExpr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conditionExpr = _oa
            end
          end
        if !_o['dataMaskType'].nil?
          _oa = _o['dataMaskType']
            if(_oa.is_a? Hash)
              @dataMaskType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskType.push String.from_json(_item)
                 else
                   @dataMaskType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskType = _oa
            end
          end
        if !_o['valueExpr'].nil?
          _oa = _o['valueExpr']
            if(_oa.is_a? Hash)
              @valueExpr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @valueExpr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @valueExpr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @valueExpr.push String.from_json(_item)
                 else
                   @valueExpr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @valueExpr = _oa
            end
          end
    end

    # constructs a RangerPolicyItemDataMaskInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroupGroup < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # Id of the parent group
    attr_accessor :parentGroupId
    # Id of the group
    attr_accessor :groupId

    # the json hash for this VXGroupGroup
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['parentGroupId'] = parentGroupId.to_jaxb_json_hash unless parentGroupId.nil?
      _h['groupId'] = groupId.to_jaxb_json_hash unless groupId.nil?
      return _h
    end

    #initializes this VXGroupGroup with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['parentGroupId'].nil?
          _oa = _o['parentGroupId']
            if(_oa.is_a? Hash)
              @parentGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parentGroupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parentGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parentGroupId.push Bignum.from_json(_item)
                 else
                   @parentGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parentGroupId = _oa
            end
          end
        if !_o['groupId'].nil?
          _oa = _o['groupId']
            if(_oa.is_a? Hash)
              @groupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupId.push Bignum.from_json(_item)
                 else
                   @groupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupId = _oa
            end
          end
    end

    # constructs a VXGroupGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUserGroupInfo < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :xuserInfo
    # (no documentation provided)
    attr_accessor :xgroupInfo

    # the json hash for this VXUserGroupInfo
    def to_jaxb_json_hash
      _h = super
      _h['xuserInfo'] = xuserInfo.to_jaxb_json_hash unless xuserInfo.nil?
      if !xgroupInfo.nil?
        _ha = Array.new
        xgroupInfo.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['xgroupInfo'] = _ha
      end
      return _h
    end

    #initializes this VXUserGroupInfo with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['xuserInfo'].nil?
          _oa = _o['xuserInfo']
            if(_oa.is_a? Hash)
              @xuserInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xuserInfo =  Org::Apache::Ranger::View::VXUser.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xuserInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xuserInfo.push Org::Apache::Ranger::View::VXUser.from_json(_item)
                 else
                   @xuserInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xuserInfo = _oa
            end
          end
        if !_o['xgroupInfo'].nil?
          _oa = _o['xgroupInfo']
            if(_oa.is_a? Hash)
              @xgroupInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @xgroupInfo =  Org::Apache::Ranger::View::VXGroup.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @xgroupInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @xgroupInfo.push Org::Apache::Ranger::View::VXGroup.from_json(_item)
                 else
                   @xgroupInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @xgroupInfo = _oa
            end
          end
    end

    # constructs a VXUserGroupInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPermObjList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXPermObjs

    # the json hash for this VXPermObjList
    def to_jaxb_json_hash
      _h = super
      if !vXPermObjs.nil?
        _ha = Array.new
        vXPermObjs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXPermObjs'] = _ha
      end
      return _h
    end

    #initializes this VXPermObjList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXPermObjs'].nil?
          _oa = _o['vXPermObjs']
            if(_oa.is_a? Hash)
              @vXPermObjs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXPermObjs =  Org::Apache::Ranger::View::VXPermObj.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXPermObjs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXPermObjs.push Org::Apache::Ranger::View::VXPermObj.from_json(_item)
                 else
                   @vXPermObjs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXPermObjs = _oa
            end
          end
    end

    # constructs a VXPermObjList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class ServicePolicies 

    # (no documentation provided)
    attr_accessor :policyDeltas
    # (no documentation provided)
    attr_accessor :auditMode
    # (no documentation provided)
    attr_accessor :serviceId
    # (no documentation provided)
    attr_accessor :policyUpdateTime
    # (no documentation provided)
    attr_accessor :policies
    # (no documentation provided)
    attr_accessor :securityZones
    # (no documentation provided)
    attr_accessor :policyVersion
    # (no documentation provided)
    attr_accessor :serviceName
    # (no documentation provided)
    attr_accessor :serviceDef
    # (no documentation provided)
    attr_accessor :tagPolicies

    # the json hash for this ServicePolicies
    def to_jaxb_json_hash
      _h = {}
      if !policyDeltas.nil?
        _ha = Array.new
        policyDeltas.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policyDeltas'] = _ha
      end
      _h['auditMode'] = auditMode.to_jaxb_json_hash unless auditMode.nil?
      _h['serviceId'] = serviceId.to_jaxb_json_hash unless serviceId.nil?
      _h['policyUpdateTime'] = policyUpdateTime.to_jaxb_json_hash unless policyUpdateTime.nil?
      if !policies.nil?
        _ha = Array.new
        policies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policies'] = _ha
      end
      _h['securityZones'] = securityZones.to_jaxb_json_hash unless securityZones.nil?
      _h['policyVersion'] = policyVersion.to_jaxb_json_hash unless policyVersion.nil?
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      _h['serviceDef'] = serviceDef.to_jaxb_json_hash unless serviceDef.nil?
      _h['tagPolicies'] = tagPolicies.to_jaxb_json_hash unless tagPolicies.nil?
      return _h
    end

    # the json (string form) for this ServicePolicies
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ServicePolicies with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['policyDeltas'].nil?
          _oa = _o['policyDeltas']
            if(_oa.is_a? Hash)
              @policyDeltas = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyDeltas =  Org::Apache::Ranger::Plugin::Model::RangerPolicyDelta.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyDeltas = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyDeltas.push Org::Apache::Ranger::Plugin::Model::RangerPolicyDelta.from_json(_item)
                 else
                   @policyDeltas.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyDeltas = _oa
            end
          end
        if !_o['auditMode'].nil?
          _oa = _o['auditMode']
            if(_oa.is_a? Hash)
              @auditMode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditMode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditMode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditMode.push String.from_json(_item)
                 else
                   @auditMode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditMode = _oa
            end
          end
        if !_o['serviceId'].nil?
          _oa = _o['serviceId']
            if(_oa.is_a? Hash)
              @serviceId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceId.push Bignum.from_json(_item)
                 else
                   @serviceId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceId = _oa
            end
          end
        if !_o['policyUpdateTime'].nil?
          _oa = _o['policyUpdateTime']
            if(_oa.is_a? Hash)
              @policyUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyUpdateTime.push Time.from_json(_item)
                 else
                   @policyUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyUpdateTime = _oa
            end
          end
        if !_o['policies'].nil?
          _oa = _o['policies']
            if(_oa.is_a? Hash)
              @policies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policies =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policies.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policies = _oa
            end
          end
        if !_o['securityZones'].nil?
          _oa = _o['securityZones']
            if(_oa.is_a? Hash)
              @securityZones = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @securityZones =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @securityZones = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @securityZones.push Hash.from_json(_item)
                 else
                   @securityZones.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @securityZones = _oa
            end
          end
        if !_o['policyVersion'].nil?
          _oa = _o['policyVersion']
            if(_oa.is_a? Hash)
              @policyVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyVersion.push Bignum.from_json(_item)
                 else
                   @policyVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyVersion = _oa
            end
          end
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
        if !_o['serviceDef'].nil?
          _oa = _o['serviceDef']
            if(_oa.is_a? Hash)
              @serviceDef = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceDef =  Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceDef = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceDef.push Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_item)
                 else
                   @serviceDef.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceDef = _oa
            end
          end
        if !_o['tagPolicies'].nil?
          _oa = _o['tagPolicies']
            if(_oa.is_a? Hash)
              @tagPolicies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagPolicies =  Org::Apache::Ranger::Plugin::Util::TagPolicies.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagPolicies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagPolicies.push Org::Apache::Ranger::Plugin::Util::TagPolicies.from_json(_item)
                 else
                   @tagPolicies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagPolicies = _oa
            end
          end
    end

    # constructs a ServicePolicies from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXCredentialStore < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # Description
    attr_accessor :description

    # the json hash for this VXCredentialStore
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    #initializes this VXCredentialStore with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a VXCredentialStore from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPermObj 

    # List of userName
    attr_accessor :userList
    # List of groupName
    attr_accessor :groupList
    # List of permission
    attr_accessor :permList
    # IP address for groups
    attr_accessor :ipAddress

    # the json hash for this VXPermObj
    def to_jaxb_json_hash
      _h = {}
      if !userList.nil?
        _ha = Array.new
        userList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['userList'] = _ha
      end
      if !groupList.nil?
        _ha = Array.new
        groupList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groupList'] = _ha
      end
      if !permList.nil?
        _ha = Array.new
        permList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['permList'] = _ha
      end
      _h['ipAddress'] = ipAddress.to_jaxb_json_hash unless ipAddress.nil?
      return _h
    end

    # the json (string form) for this VXPermObj
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXPermObj with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['userList'].nil?
          _oa = _o['userList']
            if(_oa.is_a? Hash)
              @userList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userList.push String.from_json(_item)
                 else
                   @userList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userList = _oa
            end
          end
        if !_o['groupList'].nil?
          _oa = _o['groupList']
            if(_oa.is_a? Hash)
              @groupList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupList.push String.from_json(_item)
                 else
                   @groupList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupList = _oa
            end
          end
        if !_o['permList'].nil?
          _oa = _o['permList']
            if(_oa.is_a? Hash)
              @permList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @permList =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @permList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @permList.push String.from_json(_item)
                 else
                   @permList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @permList = _oa
            end
          end
        if !_o['ipAddress'].nil?
          _oa = _o['ipAddress']
            if(_oa.is_a? Hash)
              @ipAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipAddress.push String.from_json(_item)
                 else
                   @ipAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipAddress = _oa
            end
          end
    end

    # constructs a VXPermObj from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItemRowFilterInfo 

    # (no documentation provided)
    attr_accessor :filterExpr

    # the json hash for this RangerPolicyItemRowFilterInfo
    def to_jaxb_json_hash
      _h = {}
      _h['filterExpr'] = filterExpr.to_jaxb_json_hash unless filterExpr.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyItemRowFilterInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItemRowFilterInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['filterExpr'].nil?
          _oa = _o['filterExpr']
            if(_oa.is_a? Hash)
              @filterExpr = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @filterExpr =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @filterExpr = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @filterExpr.push String.from_json(_item)
                 else
                   @filterExpr.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @filterExpr = _oa
            end
          end
    end

    # constructs a RangerPolicyItemRowFilterInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyItem 

    # (no documentation provided)
    attr_accessor :conditions
    # (no documentation provided)
    attr_accessor :delegateAdmin
    # (no documentation provided)
    attr_accessor :groups
    # (no documentation provided)
    attr_accessor :users
    # (no documentation provided)
    attr_accessor :accesses

    # the json hash for this RangerPolicyItem
    def to_jaxb_json_hash
      _h = {}
      if !conditions.nil?
        _ha = Array.new
        conditions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['conditions'] = _ha
      end
      _h['delegateAdmin'] = delegateAdmin.to_jaxb_json_hash unless delegateAdmin.nil?
      if !groups.nil?
        _ha = Array.new
        groups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['groups'] = _ha
      end
      if !users.nil?
        _ha = Array.new
        users.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['users'] = _ha
      end
      if !accesses.nil?
        _ha = Array.new
        accesses.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accesses'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerPolicyItem
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyItem with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['conditions'].nil?
          _oa = _o['conditions']
            if(_oa.is_a? Hash)
              @conditions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @conditions =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItemCondition.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @conditions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @conditions.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItemCondition.from_json(_item)
                 else
                   @conditions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @conditions = _oa
            end
          end
        if !_o['delegateAdmin'].nil?
          _oa = _o['delegateAdmin']
            if(_oa.is_a? Hash)
              @delegateAdmin = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @delegateAdmin =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @delegateAdmin = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @delegateAdmin.push Boolean.from_json(_item)
                 else
                   @delegateAdmin.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @delegateAdmin = _oa
            end
          end
        if !_o['groups'].nil?
          _oa = _o['groups']
            if(_oa.is_a? Hash)
              @groups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groups.push String.from_json(_item)
                 else
                   @groups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groups = _oa
            end
          end
        if !_o['users'].nil?
          _oa = _o['users']
            if(_oa.is_a? Hash)
              @users = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @users =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @users = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @users.push String.from_json(_item)
                 else
                   @users.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @users = _oa
            end
          end
        if !_o['accesses'].nil?
          _oa = _o['accesses']
            if(_oa.is_a? Hash)
              @accesses = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accesses =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItemAccess.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accesses = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accesses.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItemAccess.from_json(_item)
                 else
                   @accesses.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accesses = _oa
            end
          end
    end

    # constructs a RangerPolicyItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXGroup < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # Description
    attr_accessor :description
    # Type of group
    # This attribute is of type enum CommonEnums::XAGroupType
    attr_accessor :groupType
    # (no documentation provided)
    attr_accessor :groupSource
    # Id of the credential store
    attr_accessor :credStoreId
    # Group visibility
    attr_accessor :isVisible

    # the json hash for this VXGroup
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['groupType'] = groupType.to_jaxb_json_hash unless groupType.nil?
      _h['groupSource'] = groupSource.to_jaxb_json_hash unless groupSource.nil?
      _h['credStoreId'] = credStoreId.to_jaxb_json_hash unless credStoreId.nil?
      _h['isVisible'] = isVisible.to_jaxb_json_hash unless isVisible.nil?
      return _h
    end

    #initializes this VXGroup with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['groupType'].nil?
          _oa = _o['groupType']
            if(_oa.is_a? Hash)
              @groupType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupType.push Fixnum.from_json(_item)
                 else
                   @groupType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupType = _oa
            end
          end
        if !_o['groupSource'].nil?
          _oa = _o['groupSource']
            if(_oa.is_a? Hash)
              @groupSource = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @groupSource =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @groupSource = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @groupSource.push Fixnum.from_json(_item)
                 else
                   @groupSource.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @groupSource = _oa
            end
          end
        if !_o['credStoreId'].nil?
          _oa = _o['credStoreId']
            if(_oa.is_a? Hash)
              @credStoreId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @credStoreId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @credStoreId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @credStoreId.push Bignum.from_json(_item)
                 else
                   @credStoreId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @credStoreId = _oa
            end
          end
        if !_o['isVisible'].nil?
          _oa = _o['isVisible']
            if(_oa.is_a? Hash)
              @isVisible = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isVisible =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isVisible = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isVisible.push Fixnum.from_json(_item)
                 else
                   @isVisible.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isVisible = _oa
            end
          end
    end

    # constructs a VXGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerPolicyList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :policies

    # the json hash for this RangerPolicyList
    def to_jaxb_json_hash
      _h = super
      if !policies.nil?
        _ha = Array.new
        policies.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['policies'] = _ha
      end
      return _h
    end

    #initializes this RangerPolicyList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['policies'].nil?
          _oa = _o['policies']
            if(_oa.is_a? Hash)
              @policies = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policies =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policies = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policies.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policies.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policies = _oa
            end
          end
    end

    # constructs a RangerPolicyList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerRowFilterDef 

    # (no documentation provided)
    attr_accessor :resources
    # (no documentation provided)
    attr_accessor :accessTypes

    # the json hash for this RangerRowFilterDef
    def to_jaxb_json_hash
      _h = {}
      if !resources.nil?
        _ha = Array.new
        resources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['resources'] = _ha
      end
      if !accessTypes.nil?
        _ha = Array.new
        accessTypes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypes'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerRowFilterDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerRowFilterDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['resources'].nil?
          _oa = _o['resources']
            if(_oa.is_a? Hash)
              @resources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resources =  Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resources.push Org::Apache::Ranger::Plugin::Model::RangerResourceDef.from_json(_item)
                 else
                   @resources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resources = _oa
            end
          end
        if !_o['accessTypes'].nil?
          _oa = _o['accessTypes']
            if(_oa.is_a? Hash)
              @accessTypes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypes =  Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypes.push Org::Apache::Ranger::Plugin::Model::RangerAccessTypeDef.from_json(_item)
                 else
                   @accessTypes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypes = _oa
            end
          end
    end

    # constructs a RangerRowFilterDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerSecurityZone < Org::Apache::Ranger::Plugin::Model::RangerBaseModelObject 

    # (no documentation provided)
    attr_accessor :adminUsers
    # (no documentation provided)
    attr_accessor :services
    # (no documentation provided)
    attr_accessor :auditUsers
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :adminUserGroups
    # (no documentation provided)
    attr_accessor :auditUserGroups

    # the json hash for this RangerSecurityZone
    def to_jaxb_json_hash
      _h = super
      if !adminUsers.nil?
        _ha = Array.new
        adminUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['adminUsers'] = _ha
      end
      _h['services'] = services.to_jaxb_json_hash unless services.nil?
      if !auditUsers.nil?
        _ha = Array.new
        auditUsers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['auditUsers'] = _ha
      end
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !adminUserGroups.nil?
        _ha = Array.new
        adminUserGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['adminUserGroups'] = _ha
      end
      if !auditUserGroups.nil?
        _ha = Array.new
        auditUserGroups.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['auditUserGroups'] = _ha
      end
      return _h
    end

    #initializes this RangerSecurityZone with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['adminUsers'].nil?
          _oa = _o['adminUsers']
            if(_oa.is_a? Hash)
              @adminUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @adminUsers =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @adminUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @adminUsers.push String.from_json(_item)
                 else
                   @adminUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @adminUsers = _oa
            end
          end
        if !_o['services'].nil?
          _oa = _o['services']
            if(_oa.is_a? Hash)
              @services = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @services =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @services = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @services.push Hash.from_json(_item)
                 else
                   @services.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @services = _oa
            end
          end
        if !_o['auditUsers'].nil?
          _oa = _o['auditUsers']
            if(_oa.is_a? Hash)
              @auditUsers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditUsers =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditUsers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditUsers.push String.from_json(_item)
                 else
                   @auditUsers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditUsers = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['adminUserGroups'].nil?
          _oa = _o['adminUserGroups']
            if(_oa.is_a? Hash)
              @adminUserGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @adminUserGroups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @adminUserGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @adminUserGroups.push String.from_json(_item)
                 else
                   @adminUserGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @adminUserGroups = _oa
            end
          end
        if !_o['auditUserGroups'].nil?
          _oa = _o['auditUserGroups']
            if(_oa.is_a? Hash)
              @auditUserGroups = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @auditUserGroups =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @auditUserGroups = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @auditUserGroups.push String.from_json(_item)
                 else
                   @auditUserGroups.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @auditUserGroups = _oa
            end
          end
    end

    # constructs a RangerSecurityZone from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUgsyncAuditInfoList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vxUgsyncAuditInfoList

    # the json hash for this VXUgsyncAuditInfoList
    def to_jaxb_json_hash
      _h = super
      if !vxUgsyncAuditInfoList.nil?
        _ha = Array.new
        vxUgsyncAuditInfoList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vxUgsyncAuditInfoList'] = _ha
      end
      return _h
    end

    #initializes this VXUgsyncAuditInfoList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vxUgsyncAuditInfoList'].nil?
          _oa = _o['vxUgsyncAuditInfoList']
            if(_oa.is_a? Hash)
              @vxUgsyncAuditInfoList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vxUgsyncAuditInfoList =  Org::Apache::Ranger::View::VXUgsyncAuditInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vxUgsyncAuditInfoList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vxUgsyncAuditInfoList.push Org::Apache::Ranger::View::VXUgsyncAuditInfo.from_json(_item)
                 else
                   @vxUgsyncAuditInfoList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vxUgsyncAuditInfoList = _oa
            end
          end
    end

    # constructs a VXUgsyncAuditInfoList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXRepository < Org::Apache::Ranger::View::VXDataObject 

    # Name
    attr_accessor :name
    # Description
    attr_accessor :description
    # Type of asset. i.e HDFS, HIVE, HBASE, KNOX
    attr_accessor :repositoryType
    # Config in json format
    attr_accessor :config
    # Status This attribute is of type boolean : true/false
    attr_accessor :isActive
    # Version No of Project
    attr_accessor :version

    # the json hash for this VXRepository
    def to_jaxb_json_hash
      _h = super
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['repositoryType'] = repositoryType.to_jaxb_json_hash unless repositoryType.nil?
      _h['config'] = config.to_jaxb_json_hash unless config.nil?
      _h['isActive'] = isActive.to_jaxb_json_hash unless isActive.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      return _h
    end

    #initializes this VXRepository with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['repositoryType'].nil?
          _oa = _o['repositoryType']
            if(_oa.is_a? Hash)
              @repositoryType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repositoryType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repositoryType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repositoryType.push String.from_json(_item)
                 else
                   @repositoryType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repositoryType = _oa
            end
          end
        if !_o['config'].nil?
          _oa = _o['config']
            if(_oa.is_a? Hash)
              @config = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @config =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @config = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @config.push String.from_json(_item)
                 else
                   @config.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @config = _oa
            end
          end
        if !_o['isActive'].nil?
          _oa = _o['isActive']
            if(_oa.is_a? Hash)
              @isActive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isActive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isActive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isActive.push Boolean.from_json(_item)
                 else
                   @isActive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isActive = _oa
            end
          end
        if !_o['version'].nil?
          _oa = _o['version']
            if(_oa.is_a? Hash)
              @version = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @version =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @version = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @version.push String.from_json(_item)
                 else
                   @version.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @version = _oa
            end
          end
    end

    # constructs a VXRepository from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class RangerServiceDefList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :serviceDefs

    # the json hash for this RangerServiceDefList
    def to_jaxb_json_hash
      _h = super
      if !serviceDefs.nil?
        _ha = Array.new
        serviceDefs.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['serviceDefs'] = _ha
      end
      return _h
    end

    #initializes this RangerServiceDefList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['serviceDefs'].nil?
          _oa = _o['serviceDefs']
            if(_oa.is_a? Hash)
              @serviceDefs = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceDefs =  Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceDefs = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceDefs.push Org::Apache::Ranger::Plugin::Model::RangerServiceDef.from_json(_item)
                 else
                   @serviceDefs.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceDefs = _oa
            end
          end
    end

    # constructs a RangerServiceDefList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUserPermissionList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXUserPermission

    # the json hash for this VXUserPermissionList
    def to_jaxb_json_hash
      _h = super
      if !vXUserPermission.nil?
        _ha = Array.new
        vXUserPermission.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXUserPermission'] = _ha
      end
      return _h
    end

    #initializes this VXUserPermissionList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXUserPermission'].nil?
          _oa = _o['vXUserPermission']
            if(_oa.is_a? Hash)
              @vXUserPermission = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXUserPermission =  Org::Apache::Ranger::View::VXUserPermission.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXUserPermission = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXUserPermission.push Org::Apache::Ranger::View::VXUserPermission.from_json(_item)
                 else
                   @vXUserPermission.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXUserPermission = _oa
            end
          end
    end

    # constructs a VXUserPermissionList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Common

module View

  # (no documentation provided)
  class VEnum < Org::Apache::Ranger::Common::View::ViewBaseBean 

    # String - value of member attribute &lt;b&gt;enumName&lt;/b&gt;.
    attr_accessor :enumName
    # List&lt;VEnumElement&gt; - value of member attribute
    # &lt;b&gt;elementList&lt;/b&gt;.
    attr_accessor :elementList
    # (no documentation provided)
    attr_accessor :myClassType

    # the json hash for this VEnum
    def to_jaxb_json_hash
      _h = super
      _h['enumName'] = enumName.to_jaxb_json_hash unless enumName.nil?
      if !elementList.nil?
        _ha = Array.new
        elementList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['elementList'] = _ha
      end
      _h['myClassType'] = myClassType.to_jaxb_json_hash unless myClassType.nil?
      return _h
    end

    #initializes this VEnum with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['enumName'].nil?
          _oa = _o['enumName']
            if(_oa.is_a? Hash)
              @enumName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enumName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enumName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enumName.push String.from_json(_item)
                 else
                   @enumName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enumName = _oa
            end
          end
        if !_o['elementList'].nil?
          _oa = _o['elementList']
            if(_oa.is_a? Hash)
              @elementList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @elementList =  Org::Apache::Ranger::Common::View::VEnumElement.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @elementList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @elementList.push Org::Apache::Ranger::Common::View::VEnumElement.from_json(_item)
                 else
                   @elementList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @elementList = _oa
            end
          end
        if !_o['myClassType'].nil?
          _oa = _o['myClassType']
            if(_oa.is_a? Hash)
              @myClassType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @myClassType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @myClassType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @myClassType.push Fixnum.from_json(_item)
                 else
                   @myClassType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @myClassType = _oa
            end
          end
    end

    # constructs a VEnum from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyDelta 

    # (no documentation provided)
    attr_accessor :policy
    # (no documentation provided)
    attr_accessor :changeType
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this RangerPolicyDelta
    def to_jaxb_json_hash
      _h = {}
      _h['policy'] = policy.to_jaxb_json_hash unless policy.nil?
      _h['changeType'] = changeType.to_jaxb_json_hash unless changeType.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this RangerPolicyDelta
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyDelta with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['policy'].nil?
          _oa = _o['policy']
            if(_oa.is_a? Hash)
              @policy = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policy =  Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policy = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policy.push Org::Apache::Ranger::Plugin::Model::RangerPolicy.from_json(_item)
                 else
                   @policy.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policy = _oa
            end
          end
        if !_o['changeType'].nil?
          _oa = _o['changeType']
            if(_oa.is_a? Hash)
              @changeType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @changeType =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @changeType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @changeType.push Fixnum.from_json(_item)
                 else
                   @changeType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @changeType = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Bignum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a RangerPolicyDelta from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUserPermission < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :userId
    # (no documentation provided)
    attr_accessor :moduleId
    # (no documentation provided)
    attr_accessor :isAllowed
    # (no documentation provided)
    attr_accessor :userName
    # (no documentation provided)
    attr_accessor :moduleName
    # (no documentation provided)
    attr_accessor :loginId

    # the json hash for this VXUserPermission
    def to_jaxb_json_hash
      _h = super
      _h['userId'] = userId.to_jaxb_json_hash unless userId.nil?
      _h['moduleId'] = moduleId.to_jaxb_json_hash unless moduleId.nil?
      _h['isAllowed'] = isAllowed.to_jaxb_json_hash unless isAllowed.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      _h['moduleName'] = moduleName.to_jaxb_json_hash unless moduleName.nil?
      _h['loginId'] = loginId.to_jaxb_json_hash unless loginId.nil?
      return _h
    end

    #initializes this VXUserPermission with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['userId'].nil?
          _oa = _o['userId']
            if(_oa.is_a? Hash)
              @userId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userId.push Bignum.from_json(_item)
                 else
                   @userId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userId = _oa
            end
          end
        if !_o['moduleId'].nil?
          _oa = _o['moduleId']
            if(_oa.is_a? Hash)
              @moduleId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleId.push Bignum.from_json(_item)
                 else
                   @moduleId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleId = _oa
            end
          end
        if !_o['isAllowed'].nil?
          _oa = _o['isAllowed']
            if(_oa.is_a? Hash)
              @isAllowed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isAllowed =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isAllowed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isAllowed.push Fixnum.from_json(_item)
                 else
                   @isAllowed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isAllowed = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
        if !_o['moduleName'].nil?
          _oa = _o['moduleName']
            if(_oa.is_a? Hash)
              @moduleName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @moduleName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @moduleName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @moduleName.push String.from_json(_item)
                 else
                   @moduleName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @moduleName = _oa
            end
          end
        if !_o['loginId'].nil?
          _oa = _o['loginId']
            if(_oa.is_a? Hash)
              @loginId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @loginId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @loginId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @loginId.push String.from_json(_item)
                 else
                   @loginId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @loginId = _oa
            end
          end
    end

    # constructs a VXUserPermission from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerResourceDef 

    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :parent
    # (no documentation provided)
    attr_accessor :uiHint
    # (no documentation provided)
    attr_accessor :rbKeyLabel
    # (no documentation provided)
    attr_accessor :mandatory
    # (no documentation provided)
    attr_accessor :accessTypeRestrictions
    # (no documentation provided)
    attr_accessor :validationRegEx
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :rbKeyDescription
    # (no documentation provided)
    attr_accessor :excludesSupported
    # (no documentation provided)
    attr_accessor :label
    # (no documentation provided)
    attr_accessor :matcherOptions
    # (no documentation provided)
    attr_accessor :matcher
    # (no documentation provided)
    attr_accessor :isValidLeaf
    # (no documentation provided)
    attr_accessor :validationMessage
    # (no documentation provided)
    attr_accessor :level
    # (no documentation provided)
    attr_accessor :rbKeyValidationMessage
    # (no documentation provided)
    attr_accessor :lookupSupported
    # (no documentation provided)
    attr_accessor :recursiveSupported
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this RangerResourceDef
    def to_jaxb_json_hash
      _h = {}
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['parent'] = parent.to_jaxb_json_hash unless parent.nil?
      _h['uiHint'] = uiHint.to_jaxb_json_hash unless uiHint.nil?
      _h['rbKeyLabel'] = rbKeyLabel.to_jaxb_json_hash unless rbKeyLabel.nil?
      _h['mandatory'] = mandatory.to_jaxb_json_hash unless mandatory.nil?
      if !accessTypeRestrictions.nil?
        _ha = Array.new
        accessTypeRestrictions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['accessTypeRestrictions'] = _ha
      end
      _h['validationRegEx'] = validationRegEx.to_jaxb_json_hash unless validationRegEx.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['rbKeyDescription'] = rbKeyDescription.to_jaxb_json_hash unless rbKeyDescription.nil?
      _h['excludesSupported'] = excludesSupported.to_jaxb_json_hash unless excludesSupported.nil?
      _h['label'] = label.to_jaxb_json_hash unless label.nil?
      _h['matcherOptions'] = matcherOptions.to_jaxb_json_hash unless matcherOptions.nil?
      _h['matcher'] = matcher.to_jaxb_json_hash unless matcher.nil?
      _h['isValidLeaf'] = isValidLeaf.to_jaxb_json_hash unless isValidLeaf.nil?
      _h['validationMessage'] = validationMessage.to_jaxb_json_hash unless validationMessage.nil?
      _h['level'] = level.to_jaxb_json_hash unless level.nil?
      _h['rbKeyValidationMessage'] = rbKeyValidationMessage.to_jaxb_json_hash unless rbKeyValidationMessage.nil?
      _h['lookupSupported'] = lookupSupported.to_jaxb_json_hash unless lookupSupported.nil?
      _h['recursiveSupported'] = recursiveSupported.to_jaxb_json_hash unless recursiveSupported.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this RangerResourceDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerResourceDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['parent'].nil?
          _oa = _o['parent']
            if(_oa.is_a? Hash)
              @parent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parent.push String.from_json(_item)
                 else
                   @parent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parent = _oa
            end
          end
        if !_o['uiHint'].nil?
          _oa = _o['uiHint']
            if(_oa.is_a? Hash)
              @uiHint = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uiHint =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uiHint = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uiHint.push String.from_json(_item)
                 else
                   @uiHint.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uiHint = _oa
            end
          end
        if !_o['rbKeyLabel'].nil?
          _oa = _o['rbKeyLabel']
            if(_oa.is_a? Hash)
              @rbKeyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyLabel.push String.from_json(_item)
                 else
                   @rbKeyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyLabel = _oa
            end
          end
        if !_o['mandatory'].nil?
          _oa = _o['mandatory']
            if(_oa.is_a? Hash)
              @mandatory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mandatory =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mandatory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mandatory.push Boolean.from_json(_item)
                 else
                   @mandatory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mandatory = _oa
            end
          end
        if !_o['accessTypeRestrictions'].nil?
          _oa = _o['accessTypeRestrictions']
            if(_oa.is_a? Hash)
              @accessTypeRestrictions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @accessTypeRestrictions =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @accessTypeRestrictions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @accessTypeRestrictions.push String.from_json(_item)
                 else
                   @accessTypeRestrictions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @accessTypeRestrictions = _oa
            end
          end
        if !_o['validationRegEx'].nil?
          _oa = _o['validationRegEx']
            if(_oa.is_a? Hash)
              @validationRegEx = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationRegEx =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationRegEx = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationRegEx.push String.from_json(_item)
                 else
                   @validationRegEx.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationRegEx = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['rbKeyDescription'].nil?
          _oa = _o['rbKeyDescription']
            if(_oa.is_a? Hash)
              @rbKeyDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyDescription.push String.from_json(_item)
                 else
                   @rbKeyDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyDescription = _oa
            end
          end
        if !_o['excludesSupported'].nil?
          _oa = _o['excludesSupported']
            if(_oa.is_a? Hash)
              @excludesSupported = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @excludesSupported =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @excludesSupported = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @excludesSupported.push Boolean.from_json(_item)
                 else
                   @excludesSupported.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @excludesSupported = _oa
            end
          end
        if !_o['label'].nil?
          _oa = _o['label']
            if(_oa.is_a? Hash)
              @label = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @label =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @label = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @label.push String.from_json(_item)
                 else
                   @label.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @label = _oa
            end
          end
        if !_o['matcherOptions'].nil?
          _oa = _o['matcherOptions']
            if(_oa.is_a? Hash)
              @matcherOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @matcherOptions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @matcherOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @matcherOptions.push Hash.from_json(_item)
                 else
                   @matcherOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @matcherOptions = _oa
            end
          end
        if !_o['matcher'].nil?
          _oa = _o['matcher']
            if(_oa.is_a? Hash)
              @matcher = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @matcher =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @matcher = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @matcher.push String.from_json(_item)
                 else
                   @matcher.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @matcher = _oa
            end
          end
        if !_o['isValidLeaf'].nil?
          _oa = _o['isValidLeaf']
            if(_oa.is_a? Hash)
              @isValidLeaf = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isValidLeaf =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isValidLeaf = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isValidLeaf.push Boolean.from_json(_item)
                 else
                   @isValidLeaf.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isValidLeaf = _oa
            end
          end
        if !_o['validationMessage'].nil?
          _oa = _o['validationMessage']
            if(_oa.is_a? Hash)
              @validationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationMessage.push String.from_json(_item)
                 else
                   @validationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationMessage = _oa
            end
          end
        if !_o['level'].nil?
          _oa = _o['level']
            if(_oa.is_a? Hash)
              @level = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @level =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @level = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @level.push Fixnum.from_json(_item)
                 else
                   @level.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @level = _oa
            end
          end
        if !_o['rbKeyValidationMessage'].nil?
          _oa = _o['rbKeyValidationMessage']
            if(_oa.is_a? Hash)
              @rbKeyValidationMessage = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rbKeyValidationMessage =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rbKeyValidationMessage = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rbKeyValidationMessage.push String.from_json(_item)
                 else
                   @rbKeyValidationMessage.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rbKeyValidationMessage = _oa
            end
          end
        if !_o['lookupSupported'].nil?
          _oa = _o['lookupSupported']
            if(_oa.is_a? Hash)
              @lookupSupported = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lookupSupported =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lookupSupported = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lookupSupported.push Boolean.from_json(_item)
                 else
                   @lookupSupported.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lookupSupported = _oa
            end
          end
        if !_o['recursiveSupported'].nil?
          _oa = _o['recursiveSupported']
            if(_oa.is_a? Hash)
              @recursiveSupported = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @recursiveSupported =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @recursiveSupported = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @recursiveSupported.push Boolean.from_json(_item)
                 else
                   @recursiveSupported.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @recursiveSupported = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a RangerResourceDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXStringList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXStrings

    # the json hash for this VXStringList
    def to_jaxb_json_hash
      _h = super
      if !vXStrings.nil?
        _ha = Array.new
        vXStrings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXStrings'] = _ha
      end
      return _h
    end

    #initializes this VXStringList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXStrings'].nil?
          _oa = _o['vXStrings']
            if(_oa.is_a? Hash)
              @vXStrings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXStrings =  Org::Apache::Ranger::View::VXString.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXStrings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXStrings.push Org::Apache::Ranger::View::VXString.from_json(_item)
                 else
                   @vXStrings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXStrings = _oa
            end
          end
    end

    # constructs a VXStringList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXUnixSyncSourceInfo 

    # (no documentation provided)
    attr_accessor :unixBackend
    # (no documentation provided)
    attr_accessor :fileName
    # (no documentation provided)
    attr_accessor :syncTime
    # (no documentation provided)
    attr_accessor :lastModified
    # (no documentation provided)
    attr_accessor :minUserId
    # (no documentation provided)
    attr_accessor :minGroupId
    # (no documentation provided)
    attr_accessor :totalUsersSynced
    # (no documentation provided)
    attr_accessor :totalGroupsSynced

    # the json hash for this VXUnixSyncSourceInfo
    def to_jaxb_json_hash
      _h = {}
      _h['unixBackend'] = unixBackend.to_jaxb_json_hash unless unixBackend.nil?
      _h['fileName'] = fileName.to_jaxb_json_hash unless fileName.nil?
      _h['syncTime'] = syncTime.to_jaxb_json_hash unless syncTime.nil?
      _h['lastModified'] = lastModified.to_jaxb_json_hash unless lastModified.nil?
      _h['minUserId'] = minUserId.to_jaxb_json_hash unless minUserId.nil?
      _h['minGroupId'] = minGroupId.to_jaxb_json_hash unless minGroupId.nil?
      _h['totalUsersSynced'] = totalUsersSynced.to_jaxb_json_hash unless totalUsersSynced.nil?
      _h['totalGroupsSynced'] = totalGroupsSynced.to_jaxb_json_hash unless totalGroupsSynced.nil?
      return _h
    end

    # the json (string form) for this VXUnixSyncSourceInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this VXUnixSyncSourceInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['unixBackend'].nil?
          _oa = _o['unixBackend']
            if(_oa.is_a? Hash)
              @unixBackend = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unixBackend =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unixBackend = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unixBackend.push String.from_json(_item)
                 else
                   @unixBackend.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unixBackend = _oa
            end
          end
        if !_o['fileName'].nil?
          _oa = _o['fileName']
            if(_oa.is_a? Hash)
              @fileName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fileName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fileName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fileName.push String.from_json(_item)
                 else
                   @fileName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fileName = _oa
            end
          end
        if !_o['syncTime'].nil?
          _oa = _o['syncTime']
            if(_oa.is_a? Hash)
              @syncTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @syncTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @syncTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @syncTime.push String.from_json(_item)
                 else
                   @syncTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @syncTime = _oa
            end
          end
        if !_o['lastModified'].nil?
          _oa = _o['lastModified']
            if(_oa.is_a? Hash)
              @lastModified = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastModified =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastModified = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastModified.push String.from_json(_item)
                 else
                   @lastModified.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastModified = _oa
            end
          end
        if !_o['minUserId'].nil?
          _oa = _o['minUserId']
            if(_oa.is_a? Hash)
              @minUserId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minUserId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minUserId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minUserId.push String.from_json(_item)
                 else
                   @minUserId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minUserId = _oa
            end
          end
        if !_o['minGroupId'].nil?
          _oa = _o['minGroupId']
            if(_oa.is_a? Hash)
              @minGroupId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @minGroupId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @minGroupId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @minGroupId.push String.from_json(_item)
                 else
                   @minGroupId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @minGroupId = _oa
            end
          end
        if !_o['totalUsersSynced'].nil?
          _oa = _o['totalUsersSynced']
            if(_oa.is_a? Hash)
              @totalUsersSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalUsersSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalUsersSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalUsersSynced.push Bignum.from_json(_item)
                 else
                   @totalUsersSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalUsersSynced = _oa
            end
          end
        if !_o['totalGroupsSynced'].nil?
          _oa = _o['totalGroupsSynced']
            if(_oa.is_a? Hash)
              @totalGroupsSynced = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @totalGroupsSynced =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @totalGroupsSynced = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @totalGroupsSynced.push Bignum.from_json(_item)
                 else
                   @totalGroupsSynced.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @totalGroupsSynced = _oa
            end
          end
    end

    # constructs a VXUnixSyncSourceInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerContextEnricherDef 

    # (no documentation provided)
    attr_accessor :itemId
    # (no documentation provided)
    attr_accessor :enricherOptions
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :enricher

    # the json hash for this RangerContextEnricherDef
    def to_jaxb_json_hash
      _h = {}
      _h['itemId'] = itemId.to_jaxb_json_hash unless itemId.nil?
      _h['enricherOptions'] = enricherOptions.to_jaxb_json_hash unless enricherOptions.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['enricher'] = enricher.to_jaxb_json_hash unless enricher.nil?
      return _h
    end

    # the json (string form) for this RangerContextEnricherDef
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerContextEnricherDef with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['itemId'].nil?
          _oa = _o['itemId']
            if(_oa.is_a? Hash)
              @itemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemId =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemId.push Bignum.from_json(_item)
                 else
                   @itemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemId = _oa
            end
          end
        if !_o['enricherOptions'].nil?
          _oa = _o['enricherOptions']
            if(_oa.is_a? Hash)
              @enricherOptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enricherOptions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enricherOptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enricherOptions.push Hash.from_json(_item)
                 else
                   @enricherOptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enricherOptions = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['enricher'].nil?
          _oa = _o['enricher']
            if(_oa.is_a? Hash)
              @enricher = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enricher =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enricher = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enricher.push String.from_json(_item)
                 else
                   @enricher.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enricher = _oa
            end
          end
    end

    # constructs a RangerContextEnricherDef from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXPolicyLabel < Org::Apache::Ranger::View::VXDataObject 

    # (no documentation provided)
    attr_accessor :policyLabel

    # the json hash for this VXPolicyLabel
    def to_jaxb_json_hash
      _h = super
      _h['policyLabel'] = policyLabel.to_jaxb_json_hash unless policyLabel.nil?
      return _h
    end

    #initializes this VXPolicyLabel with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['policyLabel'].nil?
          _oa = _o['policyLabel']
            if(_oa.is_a? Hash)
              @policyLabel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @policyLabel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @policyLabel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @policyLabel.push String.from_json(_item)
                 else
                   @policyLabel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @policyLabel = _oa
            end
          end
    end

    # constructs a VXPolicyLabel from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Util

  # (no documentation provided)
  class ServiceTags 

    # (no documentation provided)
    attr_accessor :serviceName
    # (no documentation provided)
    attr_accessor :tagDefinitions
    # (no documentation provided)
    attr_accessor :resourceToTagIds
    # (no documentation provided)
    attr_accessor :serviceResources
    # (no documentation provided)
    attr_accessor :op
    # (no documentation provided)
    attr_accessor :tagVersion
    # (no documentation provided)
    attr_accessor :tags
    # (no documentation provided)
    attr_accessor :tagUpdateTime

    # the json hash for this ServiceTags
    def to_jaxb_json_hash
      _h = {}
      _h['serviceName'] = serviceName.to_jaxb_json_hash unless serviceName.nil?
      _h['tagDefinitions'] = tagDefinitions.to_jaxb_json_hash unless tagDefinitions.nil?
      _h['resourceToTagIds'] = resourceToTagIds.to_jaxb_json_hash unless resourceToTagIds.nil?
      if !serviceResources.nil?
        _ha = Array.new
        serviceResources.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['serviceResources'] = _ha
      end
      _h['op'] = op.to_jaxb_json_hash unless op.nil?
      _h['tagVersion'] = tagVersion.to_jaxb_json_hash unless tagVersion.nil?
      _h['tags'] = tags.to_jaxb_json_hash unless tags.nil?
      _h['tagUpdateTime'] = tagUpdateTime.to_jaxb_json_hash unless tagUpdateTime.nil?
      return _h
    end

    # the json (string form) for this ServiceTags
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this ServiceTags with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['serviceName'].nil?
          _oa = _o['serviceName']
            if(_oa.is_a? Hash)
              @serviceName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceName.push String.from_json(_item)
                 else
                   @serviceName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceName = _oa
            end
          end
        if !_o['tagDefinitions'].nil?
          _oa = _o['tagDefinitions']
            if(_oa.is_a? Hash)
              @tagDefinitions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagDefinitions =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagDefinitions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagDefinitions.push Hash.from_json(_item)
                 else
                   @tagDefinitions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagDefinitions = _oa
            end
          end
        if !_o['resourceToTagIds'].nil?
          _oa = _o['resourceToTagIds']
            if(_oa.is_a? Hash)
              @resourceToTagIds = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @resourceToTagIds =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @resourceToTagIds = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @resourceToTagIds.push Hash.from_json(_item)
                 else
                   @resourceToTagIds.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @resourceToTagIds = _oa
            end
          end
        if !_o['serviceResources'].nil?
          _oa = _o['serviceResources']
            if(_oa.is_a? Hash)
              @serviceResources = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @serviceResources =  Org::Apache::Ranger::Plugin::Model::RangerServiceResource.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @serviceResources = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @serviceResources.push Org::Apache::Ranger::Plugin::Model::RangerServiceResource.from_json(_item)
                 else
                   @serviceResources.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @serviceResources = _oa
            end
          end
        if !_o['op'].nil?
          _oa = _o['op']
            if(_oa.is_a? Hash)
              @op = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @op =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @op = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @op.push String.from_json(_item)
                 else
                   @op.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @op = _oa
            end
          end
        if !_o['tagVersion'].nil?
          _oa = _o['tagVersion']
            if(_oa.is_a? Hash)
              @tagVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagVersion =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagVersion.push Bignum.from_json(_item)
                 else
                   @tagVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagVersion = _oa
            end
          end
        if !_o['tags'].nil?
          _oa = _o['tags']
            if(_oa.is_a? Hash)
              @tags = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tags =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tags = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tags.push Hash.from_json(_item)
                 else
                   @tags.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tags = _oa
            end
          end
        if !_o['tagUpdateTime'].nil?
          _oa = _o['tagUpdateTime']
            if(_oa.is_a? Hash)
              @tagUpdateTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tagUpdateTime =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tagUpdateTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tagUpdateTime.push Time.from_json(_item)
                 else
                   @tagUpdateTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tagUpdateTime = _oa
            end
          end
    end

    # constructs a ServiceTags from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerPolicyResource 

    # (no documentation provided)
    attr_accessor :isRecursive
    # (no documentation provided)
    attr_accessor :isExcludes
    # (no documentation provided)
    attr_accessor :values

    # the json hash for this RangerPolicyResource
    def to_jaxb_json_hash
      _h = {}
      _h['isRecursive'] = isRecursive.to_jaxb_json_hash unless isRecursive.nil?
      _h['isExcludes'] = isExcludes.to_jaxb_json_hash unless isExcludes.nil?
      if !values.nil?
        _ha = Array.new
        values.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['values'] = _ha
      end
      return _h
    end

    # the json (string form) for this RangerPolicyResource
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RangerPolicyResource with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['isRecursive'].nil?
          _oa = _o['isRecursive']
            if(_oa.is_a? Hash)
              @isRecursive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isRecursive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isRecursive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isRecursive.push Boolean.from_json(_item)
                 else
                   @isRecursive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isRecursive = _oa
            end
          end
        if !_o['isExcludes'].nil?
          _oa = _o['isExcludes']
            if(_oa.is_a? Hash)
              @isExcludes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isExcludes =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isExcludes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isExcludes.push Boolean.from_json(_item)
                 else
                   @isExcludes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isExcludes = _oa
            end
          end
        if !_o['values'].nil?
          _oa = _o['values']
            if(_oa.is_a? Hash)
              @values = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @values =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @values = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @values.push String.from_json(_item)
                 else
                   @values.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @values = _oa
            end
          end
    end

    # constructs a RangerPolicyResource from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Org

module Apache

module Ranger

module View

  # (no documentation provided)
  class VXAuditMapList < Org::Apache::Ranger::Common::View::VList 

    # (no documentation provided)
    attr_accessor :vXAuditMaps

    # the json hash for this VXAuditMapList
    def to_jaxb_json_hash
      _h = super
      if !vXAuditMaps.nil?
        _ha = Array.new
        vXAuditMaps.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['vXAuditMaps'] = _ha
      end
      return _h
    end

    #initializes this VXAuditMapList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['vXAuditMaps'].nil?
          _oa = _o['vXAuditMaps']
            if(_oa.is_a? Hash)
              @vXAuditMaps = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vXAuditMaps =  Org::Apache::Ranger::View::VXAuditMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vXAuditMaps = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vXAuditMaps.push Org::Apache::Ranger::View::VXAuditMap.from_json(_item)
                 else
                   @vXAuditMaps.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vXAuditMaps = _oa
            end
          end
    end

    # constructs a VXAuditMapList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Org

module Apache

module Ranger

module Plugin

module Model

  # (no documentation provided)
  class RangerDataMaskPolicyItem < Org::Apache::Ranger::Plugin::Model::RangerPolicyItem 

    # (no documentation provided)
    attr_accessor :dataMaskInfo

    # the json hash for this RangerDataMaskPolicyItem
    def to_jaxb_json_hash
      _h = super
      _h['dataMaskInfo'] = dataMaskInfo.to_jaxb_json_hash unless dataMaskInfo.nil?
      return _h
    end

    #initializes this RangerDataMaskPolicyItem with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['dataMaskInfo'].nil?
          _oa = _o['dataMaskInfo']
            if(_oa.is_a? Hash)
              @dataMaskInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @dataMaskInfo =  Org::Apache::Ranger::Plugin::Model::RangerPolicyItemDataMaskInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @dataMaskInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @dataMaskInfo.push Org::Apache::Ranger::Plugin::Model::RangerPolicyItemDataMaskInfo.from_json(_item)
                 else
                   @dataMaskInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @dataMaskInfo = _oa
            end
          end
    end

    # constructs a RangerDataMaskPolicyItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end
